syntax = "proto3";

package smartcore.bos;

option go_package = "github.com/vanti-dev/sc-bos/pkg/gen";

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

service ButtonApi {
  rpc GetButtonState(GetButtonStateRequest) returns (ButtonState);
  rpc PullButtonState(PullButtonStateRequest) returns (stream PullButtonStateResponse);
}

message ButtonState {
  enum Press {
    PRESS_UNSPECIFIED = 0;
    // Button is in its neutral position.
    UNPRESSED = 1;
    // Button is being pushed in.
    PRESSED = 2;
  }

  message Gesture {
    enum Kind {
      KIND_UNSPECIFIED = 0;
      // One or more short press-and-release actions.
      // Clicks in short succession may be fused into double-clicks, triple-clicks etc. - in this case, the number
      // of fused clicks is stored in the count field.
      // When clicks are fused in this way, the gesture will not appear at all until the final click has finished -
      // it's not possible for a single gesture to be first reported as a single click, and then modified to a double click.
      CLICK = 1;
      // Button is kept in the pressed state for an extended period.
      // Buttons may support repeat events, in which case the count will increment for each repeat event.
      HOLD = 2;
    }

    // Opaque identifier changes each time a new gesture begins.
    // The gesture will remain in the ButtonState even when the client has already seen it; the client can use the id
    // to detect when a new gesture has begun.
    string id = 1;
    Kind kind = 2;
    // A counter for sub-events that occur within a single gesture. See the Kind for details of meaning.
    int32 count = 3;
    // The time when the gesture was first recognised.
    google.protobuf.Timestamp start_time = 4;
    // The time when the gesture was recognised as completed. For HOLD gestures, this remains unset until the button
    // is released.
    google.protobuf.Timestamp end_time = 5;
  }

  Press state = 1;
  // The time that state changed to its present value.
  google.protobuf.Timestamp state_change_time = 2;

  // The gesture that is currently in progress, or finished most recently.
  Gesture most_recent_gesture = 3;
}

message GetButtonStateRequest {
  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
}

message PullButtonStateRequest {
  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
  // By default, PullButtonState sends the initial ButtonState when the stream opens, followed by changes.
  // Setting updates_only true will disable this behaviour, sending only when the ButtonState changes.
  bool updates_only = 3;
}
message PullButtonStateResponse {
  message Change {
    string name = 1;
    google.protobuf.Timestamp change_time = 2;
    ButtonState button_state = 3;
  }

  repeated Change changes = 1;
}