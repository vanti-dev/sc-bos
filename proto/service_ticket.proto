syntax = "proto3";

package smartcore.bos;

option go_package = "github.com/vanti-dev/sc-bos/pkg/gen";

import "types/info.proto";

// ServiceTicketApi is a service which provides an interface for creating and updating service tickets in a
// third party system. e.g. a CAFM.
service ServiceTicketApi {
  rpc CreateTicket(CreateTicketRequest) returns (Ticket) {}
  rpc UpdateTicket(UpdateTicketRequest) returns (Ticket) {}
  // there are intentionally no retrieve and delete operations. smart core is not designed to be a CAFM.
  // we need to be able to raise tickets in the external system and possibly update them if we discover
  // more useful info to help resolve the issue. We do not want to be managing the tickets in smart core.
}

// ServiceTicketInfo can be used to fetch information that is required to create or update a ticket for a
// system specific implementation.
service ServiceTicketInfo {
  rpc DescribeTicket(DescribeTicketRequest) returns (TicketSupport) {}
}

// Ticket represents a service ticket in a third party system.
message Ticket {
  // Id is blank when creating a ticket, and is filled in by the external system. The ID is then used to update the ticket.
  string id = 1;
  // Short summary of the issue being reported.
  string summary = 2;
  // Full description on the issue being reported. This should include all the available information to help resolve the issue.
  string description = 3;
  // Who reported the issue, this could be a person or an automation. e.g. "Bob" or "Cleaning Assistant".
  string reporter_name = 4;

  message Classification {
    // The title of the classification.
    // This is unique within the context of the implementing system.
    string title = 1;
    // Optional. A more detailed description can be displayed to a user to help them decide the correct classification.
    string description = 2;
  }
  // What type of issue is this. e.g. "Fault", "Cleaning", "Maintenance".
  // Values supported by the implementing system are discovered via the ServiceTicketInfo service.
  Classification classification = 5;

  message Severity {
    // The title of the severity.
    // This is unique within the context of the implementing system.
    string title = 1;
    // Optional. A more detailed description can be displayed to a user to help them decide the correct severity.
    string description = 2;
  }
  // How severe is the issue. e.g. "Critical", "High", "Medium", "Low".
  // Values supported by the implementing system are discovered via the ServiceTicketInfo service.
  Severity severity = 6;
  // Optional. A url that points to more information on this ticket
  string external_url = 7;
}

// CreateTicketRequest is the request to create a ticket in the external system.
message CreateTicketRequest {
  string name = 1;
  Ticket ticket = 2;
}

// UpdateTicketRequest is the request to update a ticket in the external system. The ticket ID must be set.
message UpdateTicketRequest {
  string name = 1;
  Ticket ticket = 2;
}

message DescribeTicketRequest {
  string name = 1;
}

message TicketSupport {
  // How a named device supports read/write/pull apis
  smartcore.types.ResourceSupport resource_support = 1;
  // The classifications supported by the implementing system.
  repeated Ticket.Classification classifications = 2;
  // The severities supported by the implementing system.
  repeated Ticket.Severity severities = 3;
}

