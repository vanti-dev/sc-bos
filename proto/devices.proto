syntax = "proto3";

package smartcore.bos;

option go_package = "github.com/vanti-dev/sc-bos/pkg/gen";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "traits/metadata.proto";
import "types/change.proto";
import "types/time/period.proto";

// DevicesApi allows you to query for devices by metadata.
service DevicesApi {
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse);
  rpc PullDevices(PullDevicesRequest) returns (stream PullDevicesResponse);

  rpc GetDevicesMetadata(GetDevicesMetadataRequest) returns (DevicesMetadata);
  rpc PullDevicesMetadata(PullDevicesMetadataRequest) returns (stream PullDevicesMetadataResponse);

  rpc GetDownloadDevicesUrl(GetDownloadDevicesUrlRequest) returns (DownloadDevicesUrl);
}

message Device {
  string name = 1;
  smartcore.traits.Metadata metadata = 2;

  message Query {
    message Condition {
      // The name of a field relative to Device using '.' as a path separator.
      // For example "metadata.membership.group".
      // If absent then any field may be matched against the value.
      string field = 1;
      oneof value {
        // Compare the field to this string using a case sensitive comparison
        string string_equal = 2;
        // Compare the field to this string using a simple unicode case folding comparison.
        // See the go package strings.EqualFold.
        string string_equal_fold = 3;
        // Compare the field using case sensitive contains.
        string string_contains = 4;
        // Compare the field using contains in a case insensitive manner.
        string string_contains_fold = 5;

        // Compare the field to any of these strings using case sensitive comparison.
        // The server may have limits on the number of strings that can be compared.
        StringList string_in = 6;
        // Compare the field to any of these strings using a simple unicode case folding comparison.
        // The server may have limits on the number of strings that can be compared.
        StringList string_in_fold = 7;

        // there's room here for additional rhs values for the field, but we don't need any
      }
    }
    // A list of strings, because oneof can't be repeated.
    message StringList {
      repeated string strings = 1;
    }

    // Conditions that must match for the device to be included in the results.
    // Each condition is applied as an AND operation.
    repeated Condition conditions = 1;
  }
}

message DevicesMetadata {
  int32 total_count = 1;

  message StringFieldCount {
    string field = 1;
    map<string, uint32> counts = 2;
  }
  // Field counts contain how many devices exist with specific field values.
  // For example if there are 7 devices that have "metadata.membership.group" of "Lighting" then there will exist a
  // field_counts entry that looks like `{field: "metadata.membership.group", counts: {"Lighting": 7}}`.
  repeated StringFieldCount field_counts = 2;

  message Include {
    // Fields contains all the device fields that metadata should be computed for.
    repeated string fields = 1;
  }
}

message ListDevicesRequest {
  // string name = 1; // omitted because I don't think we need it, but we might

  // Fields to fetch relative to the Device type
  google.protobuf.FieldMask read_mask = 2;

  // The maximum number of devices to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;
  // A page token, received from a previous `ListDevicesResponse` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 4;

  // A query for filtering the devices that will be returned
  Device.Query query = 5;
}

message ListDevicesResponse {
  repeated Device devices = 1;
  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
  // If non-zero this is the total number of devices.
  // This may be an estimate.
  int32 total_size = 3;
}

message PullDevicesRequest {
  // string name = 1; // omitted because I don't think we need it, but we might

  // Fields to fetch relative to the Device type
  google.protobuf.FieldMask read_mask = 2;
  // When true the device will only send changes to the resource value.
  // The default behaviour is to send the current value immediately followed by any updates as they happen.
  bool updates_only = 3;

  // A query for filtering the devices that will be returned
  Device.Query query = 4;
}

message PullDevicesResponse {
  // The list of changes which have occurred
  repeated Change changes = 1;

  message Change {
    // The name of the device that emitted this change
    string name = 1;
    // The type of change (e.g. ADD, UPDATE, etc...)
    smartcore.types.ChangeType type = 2;
    // The new value to use for ADD|UPDATE changes
    Device new_value = 3;
    // The old value to use for UPDATE|REMOVE changes
    Device old_value = 4;
    // When the change occurred
    google.protobuf.Timestamp change_time = 5;
  }
}

message GetDevicesMetadataRequest {
  // string name = 1; // omitted because I don't think we need it, but we might

  // Fields to fetch relative to the DeviceMetadata type
  google.protobuf.FieldMask read_mask = 2;
  // Which fields to include in the metadata calculations.
  // If absent DeviceMetadata.field_counts will be empty.
  DevicesMetadata.Include includes = 3;
}

message PullDevicesMetadataRequest {
  // string name = 1; // omitted because I don't think we need it, but we might

  // Fields to fetch relative to the DeviceMetadata type
  google.protobuf.FieldMask read_mask = 2;
  // Which fields to include in the metadata calculations.
  // If absent DeviceMetadata.field_counts will be empty.
  DevicesMetadata.Include includes = 3;
  // When true the device will only send changes to the resource value.
  // The default behaviour is to send the current value immediately followed by any updates as they happen.
  bool updates_only = 4;
}

message PullDevicesMetadataResponse {
  repeated Change changes = 1;

  message Change {
    // The name of the device that emitted this change
    string name = 1; // not currently used
    // The updated devices metadata value.
    DevicesMetadata devices_metadata = 2;
    // When the change occurred
    google.protobuf.Timestamp change_time = 3;
  }
}

message GetDownloadDevicesUrlRequest {
  // A query for filtering the devices that will be returned
  Device.Query query = 1;
  // Specifies the media type (or MIME type) of the file to be downloaded.
  // Defaults to text/csv.
  // Supported values are text/csv.
  string media_type = 2;

  // A query for historical records for matched devices.
  // When present, GETting the url will return rows for each historical record for each device matched by query.
  smartcore.types.time.Period history = 3;

  // Table configures how tabular file formats are generated.
  message Table {
    message Column {
      // The qualified name of the column, the column heading you get by default.
      // For example: "md.name" or "iaq.co2".
      string name = 1;
      string title = 2;
    }

    // Columns that should be included.
    // If columns have a title then this will replace the qualified header.
    repeated Column include_cols = 1;
    // Columns that should be excluded.
    // Titles are ignored.
    repeated Column exclude_cols = 2;
  }
  // For tabular media types, configure how the table should be formatted.
  Table table = 4;
}

message DownloadDevicesUrl {
  string url = 1;
  string filename = 2;
  // The negotiated media type.
  string media_type = 3;
  // The latest time the url will be valid for, you will not be able to use the url after this time.
  google.protobuf.Timestamp expire_after_time = 4;
}
