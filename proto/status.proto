syntax = "proto3";

package smartcore.bos;

option go_package = "github.com/vanti-dev/sc-bos/pkg/gen";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "types/time/period.proto";

// Provides access to device status and problems.
// Any device or group may implement this trait to provide visibility into the function of the device.
service StatusApi {
  rpc GetCurrentStatus(GetCurrentStatusRequest) returns (StatusLog);
  rpc PullCurrentStatus(PullCurrentStatusRequest) returns (stream PullCurrentStatusResponse);
}

message StatusLog {
  enum Level {
    LEVEL_UNDEFINED = 0;
    // The device is working as intended.
    // The device will respond to commands and is working within normal parameters.
    NOMINAL = 1;
    // The device is functioning but if left unattended may fail in the future.
    // For example the battery level may be low, or it is close to running out of paper.
    NOTICE = 2;
    // Some functions of the device are unavailable or in fault, but not all.
    // The intended function of the device is still available but at a reduced efficiency or capacity.
    // For example if only 3/4 lights in a corridor are working, you can still see but there is a fault.
    REDUCED_FUNCTION = 3;
    // The device is not performing its desired function.
    // Some of the device features may still be working but enough is faulty, or critical pieces are faulty such that
    // the reason for the device to exist is not being fulfilled.
    // For example an access control unit may have a working card reader but if the magnetic lock is broken then either
    // everyone (or nobody) can open the door negating the function of the device.
    NON_FUNCTIONAL = 4;
    // No communication with the device was possible
    OFFLINE = 127;
  }
  // What is the working status of the device.
  // This will be the most severe level - the highest ordinal - from any problems the device currently has.
  // For example if a printer is running low on paper (a NOTICE) and the printer head is jammed (a FAULTY) then the status will be FAULTY.
  Level level = 1;
  // I human readable message describing the problem.
  // For example "printer head jammed" or "temperature out of range".
  string description = 2;
  // The time the problem was first recorded.
  // This is tied to the status level and should not change if only the description is updated.
  // If a critical problem is resolved but a less critical problem still exists, the timestamp should reflect the earlier problems time.
  google.protobuf.Timestamp record_time = 3;

  message Problem {
    Level level = 1;
    string description = 2;
    google.protobuf.Timestamp record_time = 3;
    string name = 4; // an identifier for the component of the device that has the problem
  }

  // Additional problems the device or its constituent parts are experiencing.
  // None of these should report NOMINAL.
  repeated Problem problems = 4;
}

message GetCurrentStatusRequest {
  // The device to get the status of.
  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
}

message PullCurrentStatusRequest {
  // The device to get the status of.
  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
  bool updates_only = 3;
}

message PullCurrentStatusResponse {
  repeated Change changes = 1;

  message Change {
    // name for the device that issued the change
    string name = 1;
    // when the change occurred
    google.protobuf.Timestamp change_time = 2;
    // The new value for the color
    StatusLog current_status = 3;
  }
}

// Provides historical entries for changes to the status of a device.
service StatusHistory {
  rpc ListCurrentStatusHistory(ListCurrentStatusHistoryRequest) returns (ListCurrentStatusHistoryResponse);
}

message StatusLogRecord {
  StatusLog current_status = 1;
  google.protobuf.Timestamp record_time = 2;
}

message ListCurrentStatusHistoryRequest {
  string name = 1;
  smartcore.types.time.Period period = 2;

  // Fields to fetch relative to the StatusLog type
  google.protobuf.FieldMask read_mask = 3;
  // The maximum number of devices to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 4;
  // A page token, received from a previous `ListCurrentStatusHistoryResponse` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 5;
  // Specify the order of the returned records.
  // The default is `create_time asc` - aka oldest record first.
  // The format is `field_name [asc|desc]`, with asc being the default.
  // Only `create_time` is supported.
  string order_by = 6;
}

message ListCurrentStatusHistoryResponse {
  repeated StatusLogRecord current_status_records = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
  // If non-zero this is the total number of records matched by the query.
  // This may be an estimate.
  int32 total_size = 3;
}
