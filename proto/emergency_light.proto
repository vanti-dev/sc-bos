syntax = "proto3";

package smartcore.bos;

option go_package = "github.com/vanti-dev/sc-bos/pkg/gen";

import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

// EmergencyLightApi provides methods to start and stop tests on emergency lights, and to retrieve test results.
// The API is designed to be implemented by emergency lights.
service EmergencyLightApi {
  // Attempt to start a function test
  rpc StartFunctionTest(StartEmergencyTestRequest) returns (StartEmergencyTestResponse);
  // Attempt to start a duration test
  rpc StartDurationTest(StartEmergencyTestRequest) returns (StartEmergencyTestResponse);
  // Stop any test that is in progress. If no tests are running this has no effect.
  // When a running test is stopped before completion, its EmergencyTestResult.Result MUST be updated to TEST_RESULT_UNSPECIFIED
  rpc StopEmergencyTest(StopEmergencyTestsRequest) returns (StopEmergencyTestsResponse);
  // Get the set of results of the most recent tests performed on the emergency light.
  rpc GetTestResultSet(GetTestResultSetRequest) returns (TestResultSet);
  rpc PullTestResultSets(PullTestResultRequest) returns (stream PullTestResultsResponse);
}

// TestResultSet contains the results of the most recent tests performed on the emergency light.
message TestResultSet {
  EmergencyTestResult function_test = 1;
  EmergencyTestResult duration_test = 2;
}

message EmergencyTestResult {
  enum Result {
    TEST_RESULT_UNSPECIFIED = 0;
    TEST_PASSED = 1;
    CIRCUIT_FAILURE = 2;
    BATTERY_DURATION_FAILURE = 3;
    BATTERY_FAILURE = 4;
    LAMP_FAILURE = 5;
    TEST_FAILED = 6;
    LIGHT_FAULTY = 7;
    COMMUNICATION_FAILURE = 8;
    OTHER_FAULT = 9;
    TEST_RESULT_PENDING = 10;
  }

  // The result of the most recent test. If a test is currently in progress,
  // result should be set to TEST_RESULT_PENDING or TEST_RESULT_UNSPECIFIED
  Result result = 1;
  // Optional. The time at which the most recent test was started, if known.
  // This will be updated whenever a new test is successfully started with StartFunctionTest or StartDurationTest.
  google.protobuf.Timestamp start_time = 2;
  // Optional. The time at which the most recent test was completed.
  // This should be populated whenever the test has completed and the result is known.
  // If the test result is still pending or unspecified, this field should not be set and should be ignored.
  google.protobuf.Timestamp end_time = 3;
  // Optional. Duration of the duration test, if applicable.
  google.protobuf.Duration duration = 4;
}

message StartEmergencyTestRequest {
  string name = 1;
}
message StartEmergencyTestResponse {
  // The time at which the test was started.
  google.protobuf.Timestamp start_time = 1;
  // Optional. The duration of the test, if applicable.
  google.protobuf.Duration duration = 2;
}

message StopEmergencyTestsRequest {
  string name = 1;
}
message StopEmergencyTestsResponse {}

message GetTestResultSetRequest {

  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
  // If an implementing driver can query the emergency light for a result, use this to force a query instead of using any cached results.
  bool query_device = 3;
}

message PullTestResultRequest {
  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
  bool updates_only = 3;
}

message PullTestResultsResponse {
  repeated Change changes = 1;

  message Change {
    string name = 1;
    google.protobuf.Timestamp change_time = 2;
    TestResultSet test_result = 3;
  }
}
