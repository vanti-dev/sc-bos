syntax = "proto3";

package smartcore.bos;

option go_package = "github.com/vanti-dev/sc-bos/pkg/gen";

import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "actor.proto";
import "types/change.proto";
import "types/time/period.proto";

// The HealthApi provides access to health checks for a device.
//
// Each device can have one or more HealthChecks associated with it,
// each check is identified by the check id, which is unique per device.
// See HealthCheck for details of how each check represents health.
service HealthApi {
  // List health checks for a named device.
  rpc ListHealthChecks(ListHealthChecksRequest) returns (ListHealthChecksResponse);
  // Pull changes to health checks for a named device.
  rpc PullHealthChecks(PullHealthChecksRequest) returns (stream PullHealthChecksResponse);

  // Get a specific health check for a named device.
  rpc GetHealthCheck(GetHealthCheckRequest) returns (HealthCheck);
  // Pull changes to a specific health check for a named device.
  rpc PullHealthCheck(PullHealthCheckRequest) returns (stream PullHealthCheckResponse);

  // todo: RunHealthCheck(s), and other long running operation management RPCs
  // todo: CreateHealthCheck, and other CRUD RPCs
  // todo: AcknowledgeHealthCheck, and other ack state changing RPCs
}

// HealthHistory provides access to historical records for HealthApi service resources.
service HealthHistory {
  rpc ListHealthCheckHistory(ListHealthCheckHistoryRequest) returns (ListHealthCheckHistoryResponse);
}

// HealthCheck represents some check against the health of a device.
//
// The outcome of a health check is recorded in the normality field,
// a NORMAL value indicates the check found the device to be healthy,
// any other value indicates the device is unhealthy in some way.
//
// Each health check monitors a specific aspect or condition of the device.
// Bounds checks monitor a value against expected values or ranges.
// Fault checks monitor the device and report one or more faults.
// While the type of check isn't required, it is strongly recommended to provide insight into how the device is performing.
//
// The *_impact fields record whether abnormal results from the check may have an effect on
// occupants, equipment, or compliance with standards.
// For example a temperature check on a climate control system may have a COMFORT occupant impact,
// while a paper level check on a printer may have a FUNCTION equipment impact.
//
// When performing a check, the reliability of the check is also reported.
// Reliability is a measure of how confident we are in the results of the check,
// and generally maps to the ability to communicate with the device.
//
// Another device may have an effect on the reliability of this device, like a gateway or the network,
// see the Reliability.cause field.
// An absent cause implies the device is responsible for its own reliability issues.
// Similarly, poor reliability of a device may affect the reliability of other devices,
// see the Reliability.affects field.
//
// Each check can specify that it should be acknowledged when it changes state.
// Health changes that require acknowledgement but have not been acknowledged still require attention from operators.
// The ack_required field says which health state transitions require acknowledgement.
message HealthCheck {
  // An id uniquely representing this check against this device.
  // An equivalent check against a different device may have the same id, for example "ping" or "temperature".
  string id = 1;

  // A human readable name for this check, to distinguish the check from others.
  string display_name = 2;
  // A description of the check.
  string description = 3;

  // OccupantImpact represents the impact abnormal values for this check can have on occupants.
  enum OccupantImpact {
    OCCUPANT_IMPACT_UNSPECIFIED = 0;
    // The check does not impact occupants.
    NO_OCCUPANT_IMPACT = 1;
    // Abnormal values for this check can impact the comfort of occupants.
    // For example, a temperature check out of range in a climate control system.
    COMFORT = 2;
    // Abnormal values for this check can impact the health of occupants.
    // For example, a CO2 check out of range in a ventilation system.
    HEALTH = 3;
    // Abnormal values for this check can impact the life-safety of occupants.
    // For example, a gas leak check out of range in a gas safety system.
    LIFE = 4;
  }

  // The impact abnormal values for this check can have on occupants.
  OccupantImpact occupant_impact = 5;

  // EquipmentImpact represents the impact abnormal values for this check can have on equipment.
  enum EquipmentImpact {
    EQUIPMENT_IMPACT_UNSPECIFIED = 0;
    // The check does not impact equipment.
    NO_EQUIPMENT_IMPACT = 1;
    // Abnormal values for this check can impact the warranty for the device.
    // For example, a temperature check out of range in a device that has an operating temperature range.
    WARRANTY = 2;
    // Abnormal values for this check can impact the lifespan of the device.
    // For example, running a device at levels outside normal operating ranges.
    LIFESPAN = 3;
    // Abnormal values for this check indicate that the equipment is unable to perform its intended function.
    // For example, a check for paper levels on a printer.
    FUNCTION = 4;
  }

  // The impact abnormal values for this check can have on the equipment.
  EquipmentImpact equipment_impact = 6;

  // ComplianceImpact describes how this check relates to published standards.
  message ComplianceImpact {
    // A Standard is a published standard that devices or sites conform to.
    message Standard {
      // The common name for the standard used by humans.
      // For example "BS 5266", "ISO 50001", "CIS v8.1", etc.
      // Required.
      string display_name = 1;
      // The official name for the standard, unambiguously identifying it.
      // The title usually includes the organization, an id, and version information.
      // For example "BS 5266-1:2016".
      string title = 2;
      // A more detailed description of the standard this check relates to.
      // For example "British Standard for emergency lighting systems in buildings"
      string description = 3;
      // The body or organization that published the standard.
      // This should be the well recognised short name of the organization.
      // For example "BSI", "ASHRAE", "ISO", etc.
      string organization = 4;
      // A reference within the standard that this check relates to.
      // For example a clause or section number like "5.3.1".
      string reference = 5;
    }

    // Contribution describes how this check contributes to compliance with the standard.
    enum Contribution {
      CONTRIBUTION_UNSPECIFIED = 0;
      // The check does not affect the compliance outcome, but may be mentioned in reports.
      NOTE = 1;
      // The check contributes to the final rating achieved against the standard.
      // For example, a check that monitors energy utilisation might reduce the rating from A to B when abnormal.
      RATING = 2;
      // An abnormal check contributes towards warnings or minor issues against the standard.
      WARNING = 3;
      // An abnormal check contributes towards a compliance failure or major issue against the standard.
      FAIL = 4;
    }

    // The standard this check relates to.
    // Required.
    Standard standard = 1;
    // How this check contributes to compliance with the standard.
    // Required.
    Contribution contribution = 2;
  }

  // A list of compliance standards and how this check impacts them.
  repeated ComplianceImpact compliance_impacts = 7;

  // Error represents an error with an optional structured code.
  message Error {
    // A short message describing the error suitable for display to the user.
    string summary_text = 1;
    // Additional details for the error in plain text.
    string details_text = 2;

    // Code is a structured error code that can be used to programmatically identify the error.
    message Code {
      // A unique code for the error within the system.
      // Required.
      string code = 1;
      // The system responsible for the error code.
      // Required.
      // The value should be the well recognised name of the system that generated the error code.
      // Examples include "DALI" and "HTTP".
      string system = 2;
    }
    // An error code that can be used to programmatically identify the error.
    // Errors with the same code and system should be interpreted as the same error.
    Code code = 3;
  }

  // Reliability represents confidence in the results of the check,
  // typically tied to the communication with the device.
  message Reliability {
    enum State {
      STATE_UNSPECIFIED = 0;
      // The communication with the device is established and healthy.
      // The state will remain RELIABLE across normal reconnections and transient bad responses.
      RELIABLE = 1;
      // Communication with the device is unreliable for an unspecified reason.
      // Prefer more specific states to indicate the reason for unreliability when possible.
      UNRELIABLE = 2;
      // There are issues with the connection that may resolve themselves on future attempts.
      CONN_TRANSIENT_FAILURE = 3;
      // Sending messages to the device has failed.
      SEND_FAILURE = 4;
      // The device has not responded to our last message.
      // For example if the client times out waiting for a response from the device.
      NO_RESPONSE = 5;
      // The device has responded to our last message, but the response was not valid.
      // For example, persistent HTTP 500 responses or version mismatches between client and device.
      BAD_RESPONSE = 6;
      // The device, or the properties we require on the device, are not present.
      NOT_FOUND = 7;
      // The device indicates that we do not have permission to access it.
      PERMISSION_DENIED = 8;
    }
    // The state of the connection.
    State state = 1;
    // The time when the state last entered RELIABLE.
    // Reconnections during normal operation will not update this time.
    // Temporary bad responses will not update this time.
    google.protobuf.Timestamp reliable_time = 2;
    // The time when the state last entered a non-RELIABLE state.
    google.protobuf.Timestamp unreliable_time = 3;

    // An error message relating to the non-RELIABLE state.
    Error last_error = 4;

    // Cause describes the underlying cause of the reliability issue.
    // It is recommended that display_name is set to allow operators to identify where the issue is coming from.
    // Providing a name allows navigation and additional details for the cause to be presented to the operator.
    message Cause {
      // The device name of the cause of the reliability issue.
      // Reliability details for the cause can be found in the HealthCheck for that device.
      string name = 1;
      // An error that describes the cause of the reliability issue.
      Error error = 2;
      // A human readable name for the entity that is the cause of the reliability issue.
      string display_name = 3;
    }
    // The underlying cause of the reliability issue, when not owned by this device.
    // Cause should be set when another device or system has an impact on the reliability of this device.
    Cause cause = 5;

    // Affects represents the impact this device has on the reliability of other devices.
    // An empty Affects denotes that this device affects other devices, but no other information is available.
    message Affects {
      // A count of how many devices are affected by this devices reliability issue.
      // A zero value indicates the number of affected devices is unknown.
      int32 count = 1;
    }
    // The devices that are affected by the reliability issue of this device.
    // Affects should be set when this device has an impact on the reliability of other devices,
    // even if information about the affected devices is not available.
    Affects affects = 6;
  }

  // A measure of how reliable the measured health is.
  // Typically this represents our ability to communicate with the device, to ask it questions about its health.
  Reliability reliability = 10;


  // Value is one of the supported value types for a check.
  message Value {
    oneof value {
      bool bool_value = 1;
      string string_value = 2;
      int64 int_value = 3;
      uint64 uint_value = 4;
      double float_value = 5;
      google.protobuf.Timestamp timestamp_value = 6;
      google.protobuf.Duration duration_value = 7;
    }
  }
  // A range of Values.
  // At least one of low or high must be set.
  // Only ordered types can be used for ranges: numbers, strings, timestamps, and durations.
  message ValueRange {
    // The low range, below which values are considered abnormal, typically LOW.
    Value low = 1;
    // The high range, above which values are considered abnormal, typically HIGH.
    Value high = 2;
    // Optional deadband applied before the check returns to NORMAL to avoid jitter.
    // Deadband should have a value type compatible with the low and high values.
    // If low and high are Timestamps, then deadband should be a Duration.
    //
    // The check will transition from HIGH to NORMAL when the current_value becomes less than high - deadband,
    // and from LOW to NORMAL when the current_value becomes greater than low + deadband.
    Value deadband = 3;
  }
  // A collection of values.
  message Values {
    repeated Value values = 1;
  }

  // Normality describes the possible normal states for the check.
  enum Normality {
    NORMALITY_UNSPECIFIED = 0;
    // The check has found the device is operating normally, without error or unexpected values.
    NORMAL = 1;
    // The check has found the device is not operating normally.
    ABNORMAL = 2;
    // The value is below the normal operating range.
    LOW = 3;
    // The value is above the normal operating range.
    HIGH = 4;
  }
  // Normality represents whether the behaviour of the device this check is monitoring is normal.
  // Any Normality enum value greater than NORMAL is considered abnormal.
  // Where possible a device will report the most specific abnormal state.
  Normality normality = 11;
  // The time when normality last entered NORMAL.
  google.protobuf.Timestamp normal_time = 12;
  // The time when normality last entered a non-NORMAL state.
  google.protobuf.Timestamp abnormal_time = 13;

  // Bounds describes a check that compares a measured value against expected values or ranges.
  message Bounds {
    // The measured value.
    // Optional when NORMAL.
    Value current_value = 1;
    oneof expected {
      // The normal value we expect for a healthy device.
      // Any measured value that is not equal to this value will result in a state of ABNORMAL.
      Value normal_value = 2;
      // A value indicating that the device is abnormal.
      // Any measured value that is not equal to this value will result in a state of NORMAL.
      Value abnormal_value = 3;
      // The range of values that are considered normal for a healthy device.
      // Any measured value that is not within this range will result in a state of HIGH or LOW.
      // See ValueRange.deadband for more information on how the deadband is applied.
      ValueRange normal_range = 4;
      // ValueRange abnormal_range = 5; // Not sure if we need this, waiting for a real use case

      // A list of normal values that are considered healthy for the device.
      // Any measured value that is not in this list will result in a state of ABNORMAL.
      Values normal_values = 6;
      // A list of abnormal values that are considered unhealthy for the device.
      // Any measured value that is in this list will result in a state of ABNORMAL.
      Values abnormal_values = 7;
    }
    // The unit of the value, for example "°C", "%", "kB", etc.
    string display_unit = 8;
  }

  // Faults represents a check that reports a list of known issues with a device.
  // The presence of any faults will result in an ABNORMAL state.
  message Faults {
    // A list of faults or errors currently present on the device.
    // The presence of any current faults will result in an ABNORMAL state.
    // If the device is healthy this list should be empty.
    repeated Error current_faults = 1;

    // todo: maybe some way to list the possible faults the device can report?
  }

  // Details about the check being performed.
  // Optional, but strongly recommended.
  // HealthChecks should not change their type of check after creation.
  oneof check {
    // This check is comparing a value against known good/bad values described by this field.
    Bounds bounds = 15;
    // This check is looking for faults or alarms on the device.
    Faults faults = 16;
  }

  // An acknowledgement for a change in health state.
  // Some changes in health state require acknowledgement from another person or system before they can be considered
  // resolved.
  //
  // For example, a fire detection system may detect smoke, which will cause the health check to change to ABNORMAL.
  // Even if the smoke clears and the check returns to NORMAL, the system should still require a person to investigate
  // the abnormality.
  // Requiring an acknowledgement allows the system to track whether the abnormality has been investigated,
  // or whether the system is still in a state that requires attention.
  //
  // Each check can specify whether it expects an acknowledgement independently for each health state transition.
  // The possible transitions are represented by the HealthChange enum.
  // Changing the expected acks will not change any existing acks, but will change the required acks for future changes
  // in health state.
  //
  // The Ack itself can come from user interaction with a Smart Core app, via this API,
  // from an interaction with a system managing a device, like a headend workstation,
  // or from physical interaction with the device, like pressing a reset button.
  // The source field should identify the source of the acknowledgement.
  message Ack {
    google.protobuf.Timestamp ack_time = 1;
    // The actor that has acknowledged the change in health, if known.
    smartcore.bos.Actor actor = 2;
    // The source of the acknowledgement.
    // This should identify the app or system that acknowledged the change in health.
    // For example, "smartcore.app.ops", "reset button", or "device".
    string source = 3;
  }
  // Health state transitions as different bit mask values.
  // See Ack for details.
  enum HealthChange {
    HEALTH_CHANGE_UNSPECIFIED = 0;
    // A change from an unhealthy state to the healthy state.
    TO_HEALTHY = 1;
    // A change to a reliability state that is not RELIABLE.
    TO_UNRELIABLE = 2;
    // A change to a check state that is not NORMAL.
    TO_ABNORMAL = 4;
  }
  // A bit mask of health state transitions that will require acknowledgement.
  // See Ack for details.
  int32 ack_expected = 20;
  // A bit mask of health state transitions that currently require acknowledgement but don't have one.
  // Output only.
  // See Ack for details.
  int32 ack_required = 21;
  // An acknowledgement for the change to a healthy state.
  // See Ack for details.
  Ack to_healthy_ack = 22;
  // An acknowledgement for the change to a reliability state that is not RELIABLE.
  // See Ack for details.
  Ack to_unreliable_ack = 23;
  // An acknowledgement for the change to a check state that is not NORMAL.
  // See Ack for details.
  Ack to_abnormal_ack = 24;
}

// HealthCheckRecord represents a historical record of a health check for a device.
message HealthCheckRecord {
  HealthCheck health_check = 1;
  google.protobuf.Timestamp record_time = 2;
  enum RecordType {
    RECORD_TYPE_UNSPECIFIED = 0;
    // This record is the first record for the health check.
    ADDED = 1;
    // The health check was updated.
    UPDATED = 2;
    // The health check was removed.
    // The health_check field will contain the last known health_check,
    // which will likely be a duplicate of the previous record.
    REMOVED = 3;
  }
  RecordType record_type = 3;
}

message ListHealthChecksRequest {
  // The device to get the health checks for.
  string name = 1;
  // A field mask to select which fields to return.
  google.protobuf.FieldMask read_mask = 2;
  // The maximum number of health checks to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;
  // A page token, received from a previous `ListHealthChecksResponse` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 4;
}

message ListHealthChecksResponse {
  // The health checks for the device.
  repeated HealthCheck health_checks = 1;
  // A token to retrieve the next page of results.
  // If there are no more results, this will be empty.
  string next_page_token = 2;
  // The total number of health checks for the device.
  int32 total_size = 3;
}

message PullHealthChecksRequest {
  // The device to get the health checks for.
  string name = 1;
  // A field mask to select which fields to return.
  google.protobuf.FieldMask read_mask = 2;
  // When true the device will only send changes to the health checks.
  // The default behaviour is to send the current health checks immediately followed by any updates as they happen.
  bool updates_only = 3;
}

message PullHealthChecksResponse {
  // Changes to the list of health checks for the device.
  repeated Change changes = 1;

  message Change {
    // The name of the device the health check belongs to.
    string name = 1;
    // The type of change (e.g. ADD, UPDATE, etc...)
    smartcore.types.ChangeType type = 2;
    // The new value to use for ADD|UPDATE changes
    HealthCheck new_value = 3;
    // The old value to use for UPDATE|REMOVE changes
    HealthCheck old_value = 4;
    // When the change occurred
    google.protobuf.Timestamp change_time = 5;
  }
}

message GetHealthCheckRequest {
  // The device to get the health check for.
  string name = 1;
  // The id of the health check to get.
  string id = 2;
  // A field mask to select which fields to return.
  google.protobuf.FieldMask read_mask = 3;
}

message PullHealthCheckRequest {
  // The device to get the health check for.
  string name = 1;
  // The id of the health check to get.
  string id = 2;
  // A field mask to select which fields to return.
  google.protobuf.FieldMask read_mask = 3;
  // When true the device will only send changes to the health check.
  // The default behaviour is to send the current health check immediately followed by any updates as they happen.
  bool updates_only = 4;
}

message PullHealthCheckResponse {
  // The changes to the health check for the device.
  repeated Change changes = 1;

  message Change {
    // The name of the device the health check belongs to.
    string name = 1;
    // The new health check value.
    HealthCheck health_check = 3;
    // When the change occurred
    google.protobuf.Timestamp change_time = 2;
  }
}

message ListHealthCheckHistoryRequest {
  // The name of the device to list the history for.
  string name = 1;
  // The id of the health check to list the history for.
  // Optional, if not specified the history for all health checks on the device will be returned.
  string id = 7;
  // The period of time to list the history for.
  smartcore.types.time.Period period = 2;

  // Fields to fetch relative to the HealthCheckRecord type
  google.protobuf.FieldMask read_mask = 3;
  // The maximum number of devices to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 4;
  // A page token, received from a previous `ListHealthCheckHistoryResponse` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 5;
  // Specify the order of the returned records.
  // The default is `record_time asc` - aka oldest record first.
  // The format is `field_name [asc|desc]`, with asc being the default.
  // Only `record_time` is supported.
  string order_by = 6;
}

message ListHealthCheckHistoryResponse {
  repeated HealthCheckRecord health_check_records = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
  // If non-zero this is the total number of records matched by the query.
  // This may be an estimate.
  int32 total_size = 3;
}
