syntax = "proto3";

package smartcore.bos;

option go_package = "github.com/vanti-dev/sc-bos/pkg/gen";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "types/change.proto";
import "actor.proto";

// SecurityEventApi describes the capability to view and manage security events.
// These are typically events from an access control system's API, but could be from any security system.
service SecurityEventApi {
  rpc ListSecurityEvents(ListSecurityEventsRequest) returns (ListSecurityEventsResponse) {}
  rpc PullSecurityEvents(PullSecurityEventsRequest) returns (stream PullSecurityEventsResponse) {}
  // todo expand these rpcs to enable acknowledging and processing security events with an external system
}

// SecurityEvent describes a security event that has occurred.
// At a minimum this should define the time the event occurred, a description of the event
// and a unique ID for the event, typically derived from the originating system.
// Ideally, this will contain all the relevant information we know about the event.
message SecurityEvent {
  enum State {
    // The state of the security event is unknown.
    STATE_UNKNOWN = 0;
    // The security event has not been acknowledged.
    UNACKNOWLEDGED = 1;
    // The security event has been acknowledged.
    ACKNOWLEDGED = 2;
    // The security event has been resolved.
    RESOLVED = 3;
  }

  enum EventType {
      // The event type is unknown
      EVENT_TYPE_UNKNOWN = 0;
      // A security device has been tampered with
      TAMPER = 1;
      // A tamper detection has returned to normal
      TAMPER_CLEAR = 2;
      // A device has stopped responding
      DEVICE_OFFLINE = 3;
      // A card has reported an error
      CARD_ERROR = 4;
      // A maintenance warning has occurred
      MAINTENANCE_WARNING = 5;
      // A maintenance error has occurred
      MAINTENANCE_ERROR = 6;
      // The state of an alarm zone has changed
      ALARM_ZONE_STATE_CHANGE = 7;
      // An incorrect pin has been entered
      INCORRECT_PIN = 8;
      // Access has been denied
      ACCESS_DENIED = 9;
      // Access has been granted
      ACCESS_GRANTED = 10;
      // The source experienced duress
      DURESS = 11;
      // A card event has occurred
      CARD_EVENT = 12;
      // A door status has been reported
      DOOR_STATUS = 13;
      // A door has been open too long
      DOOR_OPEN_TOO_LONG = 14;
      // A door has been forced open
      DOOR_FORCED_OPEN = 15;
      // A door has not been locked
      DOOR_NOT_LOCKED = 16;
      // A power failure has occurred
      POWER_FAILURE = 17;
      // An invalid logon attempt has occurred
      INVALID_LOGON_ATTEMPT = 18;
      // A network attack has been detected
      NETWORK_ATTACK = 19;
      // Locker status
      LOCKER_STATUS = 20;
      // A locker has been open too long
      LOCKER_OPEN_TOO_LONG = 21;
      // A locker has been forced open
      LOCKER_FORCED_OPEN = 22;
      // A locker has not been locked
      LOCKER_NOT_LOCKED = 23;
  }

  // The time the security event occurred.
  google.protobuf.Timestamp security_event_time = 1;

  // A description of the security event.
  string description = 2;

  // The ID of the event in the source system.
  string id = 3;

  // A source is the device, cardholder or any other object where the security event originated from.
  message Source {
    // ID. The unique identifier of the source.
    string id = 1;
    // Name. The human readable name of the source.
    string name = 2;
    // Subsystem. The subsystem this event originated from, access control, cctv etc.
    string subsystem = 3;
    // Floor. The floor the event originated from.
    string floor = 4;
    // Zone. The zone the event originated from.
    string zone = 5;
  }
  // The source the security event originated from, typically a door or other access point.
  Source source = 4;

  // Optional. What actor caused this event to be triggered, an object, like a car, or a person or animal.
  // Sometimes, the event will not require an actor e.g. a door has been open too long.
  // Other times, an actor will cause a security event to occur at a source, e.g. a person has entered a door.
  Actor actor = 5;

  // Optional. The state of the security event, unacknowledged, acknowledged etc.
  State state = 6;

  // Optional. The priority of the security event
  int32 priority = 7;

  // Optional. The type of the security event
  EventType event_type = 8;
}

message ListSecurityEventsRequest {
  // The name of the device to get security events for.
  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
  // The maximum number of SecurityEvents to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;
  // A page token, received from a previous `ListSecurityEventsResponse` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 4;
}

message ListSecurityEventsResponse {
  repeated SecurityEvent security_events = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
  // If non-zero this is the total number of alerts after filtering is applied.
  // This may be an estimate.
  int32 total_size = 3;
}

message PullSecurityEventsRequest {
  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
  bool updates_only = 3;
}

message PullSecurityEventsResponse {
  repeated Change changes = 1;

  message Change {
    string name = 1;
    google.protobuf.Timestamp change_time = 2;
    SecurityEvent new_value = 3;
    SecurityEvent old_value = 4;
    smartcore.types.ChangeType type = 5;
  }
}