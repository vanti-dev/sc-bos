syntax = "proto3";

package smartcore.bos;

option go_package = "github.com/vanti-dev/sc-bos/pkg/gen";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

service LightingTestApi {
  rpc GetLightHealth(GetLightHealthRequest) returns (LightHealth);
  rpc ListLightHealth(ListLightHealthRequest) returns (ListLightHealthResponse);

  rpc ListLightEvents(ListLightEventsRequest) returns (ListLightEventsResponse);

  rpc GetReportCSV(GetReportCSVRequest) returns (ReportCSV);
}

// Resource Types

enum LightFault {
  FAULT_UNSPECIFIED = 0;
  DURATION_TEST_FAILED = 1;   // the most recent duration test failed
  FUNCTION_TEST_FAILED = 2;   // the most recent function test failed
  BATTERY_FAULT = 3;          // there is a problem with the emergency battery
  LAMP_FAULT = 4;             // there is a problem with the emergency lamp
  COMMUNICATION_FAILURE = 5;  // the system is unable to communicate with the emergency light
  OTHER_FAULT = 6;
}

message LightHealth {
  // The Smart Core device name of the emergency light.
  string name = 1;
  // The last time this data was updated.
  google.protobuf.Timestamp update_time = 2;
  repeated LightFault faults = 3;
}

message LightingEvent {
  string name = 1; // Smart Core device name of the light this entry applies to
  string id = 2;   // An opaque, unique identifier for this log entry
  google.protobuf.Timestamp timestamp = 3;

  oneof event {
    DurationTestPass duration_test_pass = 4;
    FunctionTestPass function_test_pass = 5;
    StatusReport status_report = 6;
  }

  message DurationTestPass {
    google.protobuf.Duration achieved_duration = 1;
  }
  message FunctionTestPass {

  }
  message StatusReport {
    repeated LightFault faults = 1;
  }
}

// RPC Requests & Responses

message GetLightHealthRequest {
  string name = 1;
}

message ListLightHealthRequest {
  // The maximum number of emergency light names to return at once. The service may choose to return fewer.
  // If unspecified, defaults to 50.
  int32 page_size = 1;

  // Page token from a previous ListEmergencyLists call. Provide to get the next page.
  // If omitted, the first page is supplied.
  string page_token = 2;
}
message ListLightHealthResponse {
  repeated LightHealth emergency_lights = 1;
  string next_page_token = 2;
}

message ListLightEventsRequest {
  int32 page_size = 1;
  string page_token = 2;
  // TODO: add filtering support
}
message ListLightEventsResponse {
  repeated LightingEvent events = 1;
  // Contains a page token which can be supplied as page_token in ListLightEventsRequest to fetch the next page of
  // results.
  // Only present when more results are immediately available.
  string next_page_token = 2;

  // Contains a page token which can be supplied as page_token in ListLightEventsRequest to fetch only new data
  // in the future.
  // Unlike next_page_token, this is present even when no more pages are immediately available. The client can check
  // again in the future
  string future_page_token = 3;
}

message GetReportCSVRequest {
  // Add a header to the generated CSV as the first row.
  bool include_header = 1;
}
message ReportCSV {
  bytes csv = 1;
}