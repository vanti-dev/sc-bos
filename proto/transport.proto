syntax = "proto3";

package smartcore.bos;

option go_package = "github.com/vanti-dev/sc-bos/pkg/gen";

import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "types/info.proto";

// TransportAPI represents something that can transport something else between places.
// The transport will often be an elevator, but could be an escalator, conveyor etc.
service TransportApi {
  rpc GetTransport(GetTransportRequest) returns (Transport);
  rpc PullTransport(PullTransportRequest) returns (stream PullTransportResponse);
}

service TransportInfo {
  rpc DescribeTransport(DescribeTransportRequest) returns (TransportSupport);
}

// Transport describes the current state of the transport.
message Transport {
    enum Direction {
      DIRECTION_UNSPECIFIED = 0;
      // i.e. the device is stationary and not moving in any direction.
      NO_DIRECTION = 1;
      UP = 2;
      DOWN = 3;
      IN = 4;
      OUT = 5;
      CLOCKWISE = 6;
      ANTICLOCKWISE = 7;
      FORWARD = 8;
      BACKWARD = 9;
      EAST = 10;
      WEST = 11;
      NORTH = 12;
      SOUTH = 13;
      // Left and right are relative to the intended forwards direction of the transport.
      // If this is not known use SIDEWAYS.
      LEFT = 14;
      RIGHT = 15;
      SIDEWAYS = 16;
    }

    enum OperatingMode {
      OPERATING_MODE_UNSPECIFIED = 0;
      NORMAL = 1;
      // The transport is in service or inspection control.
      SERVICE_CONTROL = 2;
      // The transport is under a firefighter transport or firefighting transport mode of control. This usually happens
      // during a fire alarm when firemen are on the site.
      FIREFIGHTER_CONTROL = 3;
      OUT_OF_SERVICE = 4;
      // The transport is being operated by emergency power and may be in limited operation.
      EMERGENCY_POWER = 5;
      // The transport will not respond to any instruction until the VIP has reached their destination.
      VIP_CONTROL = 6;
      EARTHQUAKE_OPERATION = 7;
      FIRE_OPERATION = 8;
      // The transport is being manually operated by an attendant.
      ATTENDANT_CONTROL = 9;
      // The transport is manually or automatically parked at a predefined floor and will not provide
      // any further service. This usually happens in a low traffic condition for the purpose of
      // energy saving.
      PARKING = 10;
      // The transport is returning to its home position, usually the lobby or ground floor.
      HOMING = 11;
      // Control of the transport is performed from a control panel in the control cabinet. The transport is not
      // available for normal operation.
      CABINET_RECALL = 12;
      // The transport is under an occupant evacuation mode of control. This usually happens during a
      // fire alarm when the transport is used for evacuation of occupants.
      OCCUPANT_EVACUATION = 13;
      // The transport is operational but is reserved for the transportation of goods only.
      FREIGHT = 14;
      FAILURE = 15;
      REDUCED_SPEED = 16;
      STORM_OPERATION = 17;
      HIGH_WIND_OPERATION = 18;
    }

    message Alarm {
      enum AlarmState {
        ALARM_STATE_UNSPECIFIED = 0;
        UNACTIVATED = 1;
        ACTIVATED = 2;
      }
      // The state of the alarm button.
      AlarmState state = 1;
      // Optional. The time the alarm entered its current state.
      google.protobuf.Timestamp time = 2;
    }

    enum Active {
      ACTIVE_UNSPECIFIED = 0;
      INACTIVE = 1;
      ACTIVE = 2;
    }

    message Fault {
      enum FaultType {
        FAULT_TYPE_UNSPECIFIED = 0;
        CONTROLLER_FAULT = 1;
        DRIVE_AND_MOTOR_FAULT = 2;
        MECHANICAL_COMPONENT_FAULT = 3;
        OVERSPEED_FAULT = 4;
        POWER_SUPPLY_FAULT = 5;
        SAFETY_DEVICE_FAULT = 6;
        CONTROLLER_SUPPLY_FAULT = 7;
        DRIVE_TEMPERATURE_EXCEEDED = 8;
        // A comb plate safety switch is activated.
        COMB_PLATE_FAULT = 9;
        GENERAL_FAULT = 10;
        DOOR_FAULT = 11;
        LEVELLING_FAULT = 12;
        SAFETY_CIRCUIT_BREAK_FAULT = 13;
        FAIL_TO_START = 14;
        // A fault has been detected with the alarm button. This is not the same as an activated passenger alarm.
        // Use the passenger_alarm field to indicate the alarm button has been activated.
        ALARM_BUTTON = 15;
        DOOR_NOT_CLOSING = 16;
        DOOR_NOT_OPENING = 17;
        GOVERNOR_AND_SAFETY_GEAR_FAULT = 18;
        // The fault is related to a device inside the lift shaft
        LIFT_SHAFT_DEVICE_FAULT = 19;
        CAR_STOPPED_OUTSIDE_LANDING_ZONE = 20;
        CALL_BUTTON_STUCK = 21;
        SELF_TEST_FAILURE = 22;
        // The lift did not reach the expected zone.
        RUNTIME_LIMIT_EXCEEDED = 23;
        POSITION_LOST = 24;
        // The car load measurement system is in a fault condition.
        LOAD_MEASUREMENT_FAULT = 25;
        OVERCAPACITY = 26;
      }
      // The type of fault.
      FaultType fault_type = 1;
      // Optional. The time the fault was detected.
      google.protobuf.Timestamp time = 2;
      // Optional. The description of the fault.
      string description = 3;
    }

    // Journey describes the journey of the transport or payload.
    // It will have a source and one or more destinations.
    message Journey {
      // The starting point of the journey.
      Location start = 1;
      // The destinations of the journey. These must be in chronological order of intended arrival time.
      repeated Location destinations = 2;
      // Optional. The reason for the journey.
      string reason = 3;
      // Optional. The time the journey started.
      google.protobuf.Timestamp start_time = 4;
      // Optional. The time the journey is estimated to arrive.
      google.protobuf.Timestamp estimated_arrival_time = 5;
    }

    message Door {
      enum DoorStatus {
        DOOR_STATUS_UNSPECIFIED = 0;
        CLOSED = 1;
        OPEN = 2;
        OPENING = 3;
        CLOSING = 4;
        // The door is safety locked.
        SAFETY_LOCKED = 5;
        // The door remains in a position that is not fully open or closed.
        LIMITED_OPENED = 6;
      }

      // Title/display name of the door; front, rear, etc.
      string title = 1;
      // If the transport has multiple decks, this is the deck the door is on. 0 is the lowest deck.
      int32 deck = 2;
      // The status of the door.
      DoorStatus status = 3;
    }

    // Location describes a specific location within a site that this transport can stop at.
    message Location {
      // The id of the location. This should be unique within the context of the transport.
      string id = 1;
      // The title of the location. e.g. 'Lobby', 'Floor 1', 'Car Park'.
      string title = 2;
      // Optional. Description of the location.
      string description = 3;
      // Optional. The floor of the location.
      string floor = 4;
    }

    // The actual position the transport. As the transport is moving towards its next destination,
    // this value may be updated with intermediate locations.
    Location actual_position = 1;
    // Optional. The next destination(s) the transport will stop at.
    repeated Location next_destinations = 2;
    // Optional. The primary direction the transport is moving. An escalator technically moves up/down and forwards,
    // but the primary intention is to transport up/down.
    Direction moving_direction = 3;
    // Optional. The total amount of load being carried.
    // The units this is measured in is implementation specific. See TransportSupport
    // A zero value means there is no load, an omitted value means the load is unknown.
    optional float load = 4;
    // Optional. The status of each the door(s) of the transport.
    repeated Door doors = 5;
    // Optional. The operating mode the transport is in.
    OperatingMode operating_mode = 6;
    // Optional. A list of active fault signals being reported.
    repeated Fault faults = 7;
    // Optional. The status of the passenger alarm button.
    Alarm passenger_alarm = 8;
    // Optional. The speed of the transport. Zero represents a stationary transport, omitted means the speed is unknown.
    // This is the current speed of the transport, not the average or maximum speed etc., this value may change rapidly.
    // Use TransportSupport to determine the units of speed.
    optional float speed = 9;
    // Optional. The destinations that are supported by the transport.
    // These should be ordered logically and consistently depending on the transport device.
    // i.e. For a linear transport, the first and last items in this list should be the termini.
    repeated Location supported_destinations = 10;
    // Optional. The active state of the transport. Note this is different to mode,
    // as the transport can be in an active or inactive state in different modes.
    Active active = 11;

    message Payload {
        // The id of the payload. The id must be unique within the transport for the duration of the journey.
        // i.e. there should not be two payloads with the same id in the same transport at the same time.
        string payload_id = 1;
        // The description of the payload.
        string description = 2;
        // The journey the payload is intending to take.
        Journey intended_journey = 3;
        // The actual journey the payload has taken so far.
        // Once the payload leaves the transport, the journey is considered complete.
        // Iff the final destination in intended_journey is the same as the location where the payload leaves the transport,
        // the journey is considered to have been completed successfully.
        Journey actual_journey = 4;

        // IDs holds external identifiers for the payload.
        // For example, a parcel may have an ID assigned by a courier company,
        // a person may have an ID assigned by one or more building access systems,
        // but the transport itself may not know these IDs
        map<string, string> external_ids = 100;
    }

    // Optional. Payloads describes the entities that are currently being transported.
    repeated Payload payloads = 12;
    // Optional. The estimated time the transport will take to arrive at it's next destination.
    google.protobuf.Duration eta_to_next_destination = 13;
}

message TransportSupport {
  // How a named device supports read/write/pull apis
  smartcore.types.ResourceSupport resource_support = 1;
  // The unit associated with the load value, e.g. kg, % of maximum load.
  string load_unit = 2;
  // The maximum load the transport can carry, in kg, if known.
  // This can be used to calculate the current load weight if the load is reported as a percentage of the maximum load.
  int32 max_load = 3;
  // The unit associated with the speed value, e.g. m/s, km/h.
  string speed_unit = 4;
}

// GetTransportRequest is used to request the current state of the transport.
message GetTransportRequest {
  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
}

message DescribeTransportRequest {
  string name = 1;
}

message PullTransportRequest {
  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
  bool updates_only = 3;
}

message PullTransportResponse {
  repeated Change changes = 1;

  message Change {
    string name = 1;
    google.protobuf.Timestamp change_time = 2;
    Transport transport = 3;
  }
}