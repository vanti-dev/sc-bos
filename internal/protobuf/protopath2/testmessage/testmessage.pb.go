// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: testmessage.proto

package testmessage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Test struct {
	state        protoimpl.MessageState  `protogen:"open.v1"`
	Nested       *Test_Nested            `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	Repeats      []*Test                 `protobuf:"bytes,2,rep,name=repeats,proto3" json:"repeats,omitempty"`
	Int32Repeats []int32                 `protobuf:"varint,3,rep,packed,name=int32repeats,proto3" json:"int32repeats,omitempty"`
	Strkeymap    map[string]*Test_Nested `protobuf:"bytes,4,rep,name=strkeymap,proto3" json:"strkeymap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// All integral types are valid map key types
	Boolkeymap    map[bool]*Test   `protobuf:"bytes,5,rep,name=boolkeymap,proto3" json:"boolkeymap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Int32Keymap   map[int32]*Test  `protobuf:"bytes,6,rep,name=int32keymap,proto3" json:"int32keymap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Int64Keymap   map[int64]*Test  `protobuf:"bytes,7,rep,name=int64keymap,proto3" json:"int64keymap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uint32Keymap  map[uint32]*Test `protobuf:"bytes,8,rep,name=uint32keymap,proto3" json:"uint32keymap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uint64Keymap  map[uint64]*Test `protobuf:"bytes,9,rep,name=uint64keymap,proto3" json:"uint64keymap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Test) Reset() {
	*x = Test{}
	mi := &file_testmessage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_testmessage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_testmessage_proto_rawDescGZIP(), []int{0}
}

func (x *Test) GetNested() *Test_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *Test) GetRepeats() []*Test {
	if x != nil {
		return x.Repeats
	}
	return nil
}

func (x *Test) GetInt32Repeats() []int32 {
	if x != nil {
		return x.Int32Repeats
	}
	return nil
}

func (x *Test) GetStrkeymap() map[string]*Test_Nested {
	if x != nil {
		return x.Strkeymap
	}
	return nil
}

func (x *Test) GetBoolkeymap() map[bool]*Test {
	if x != nil {
		return x.Boolkeymap
	}
	return nil
}

func (x *Test) GetInt32Keymap() map[int32]*Test {
	if x != nil {
		return x.Int32Keymap
	}
	return nil
}

func (x *Test) GetInt64Keymap() map[int64]*Test {
	if x != nil {
		return x.Int64Keymap
	}
	return nil
}

func (x *Test) GetUint32Keymap() map[uint32]*Test {
	if x != nil {
		return x.Uint32Keymap
	}
	return nil
}

func (x *Test) GetUint64Keymap() map[uint64]*Test {
	if x != nil {
		return x.Uint64Keymap
	}
	return nil
}

type Test_Nested struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Intfield      int32                  `protobuf:"varint,1,opt,name=intfield,proto3" json:"intfield,omitempty"`
	Stringfield   string                 `protobuf:"bytes,2,opt,name=stringfield,proto3" json:"stringfield,omitempty"`
	Bytesfield    []byte                 `protobuf:"bytes,3,opt,name=bytesfield,proto3" json:"bytesfield,omitempty"`
	Nested        *Test                  `protobuf:"bytes,4,opt,name=nested,proto3" json:"nested,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Test_Nested) Reset() {
	*x = Test_Nested{}
	mi := &file_testmessage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Test_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test_Nested) ProtoMessage() {}

func (x *Test_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_testmessage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test_Nested.ProtoReflect.Descriptor instead.
func (*Test_Nested) Descriptor() ([]byte, []int) {
	return file_testmessage_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Test_Nested) GetIntfield() int32 {
	if x != nil {
		return x.Intfield
	}
	return 0
}

func (x *Test_Nested) GetStringfield() string {
	if x != nil {
		return x.Stringfield
	}
	return ""
}

func (x *Test_Nested) GetBytesfield() []byte {
	if x != nil {
		return x.Bytesfield
	}
	return nil
}

func (x *Test_Nested) GetNested() *Test {
	if x != nil {
		return x.Nested
	}
	return nil
}

var File_testmessage_proto protoreflect.FileDescriptor

const file_testmessage_proto_rawDesc = "" +
	"\n" +
	"\x11testmessage.proto\x12\rtestprotopath\"\xd4\t\n" +
	"\x04Test\x122\n" +
	"\x06nested\x18\x01 \x01(\v2\x1a.testprotopath.Test.NestedR\x06nested\x12-\n" +
	"\arepeats\x18\x02 \x03(\v2\x13.testprotopath.TestR\arepeats\x12\"\n" +
	"\fint32repeats\x18\x03 \x03(\x05R\fint32repeats\x12@\n" +
	"\tstrkeymap\x18\x04 \x03(\v2\".testprotopath.Test.StrkeymapEntryR\tstrkeymap\x12C\n" +
	"\n" +
	"boolkeymap\x18\x05 \x03(\v2#.testprotopath.Test.BoolkeymapEntryR\n" +
	"boolkeymap\x12F\n" +
	"\vint32keymap\x18\x06 \x03(\v2$.testprotopath.Test.Int32keymapEntryR\vint32keymap\x12F\n" +
	"\vint64keymap\x18\a \x03(\v2$.testprotopath.Test.Int64keymapEntryR\vint64keymap\x12I\n" +
	"\fuint32keymap\x18\b \x03(\v2%.testprotopath.Test.Uint32keymapEntryR\fuint32keymap\x12I\n" +
	"\fuint64keymap\x18\t \x03(\v2%.testprotopath.Test.Uint64keymapEntryR\fuint64keymap\x1a\x93\x01\n" +
	"\x06Nested\x12\x1a\n" +
	"\bintfield\x18\x01 \x01(\x05R\bintfield\x12 \n" +
	"\vstringfield\x18\x02 \x01(\tR\vstringfield\x12\x1e\n" +
	"\n" +
	"bytesfield\x18\x03 \x01(\fR\n" +
	"bytesfield\x12+\n" +
	"\x06nested\x18\x04 \x01(\v2\x13.testprotopath.TestR\x06nested\x1aX\n" +
	"\x0eStrkeymapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.testprotopath.Test.NestedR\x05value:\x028\x01\x1aR\n" +
	"\x0fBoolkeymapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.testprotopath.TestR\x05value:\x028\x01\x1aS\n" +
	"\x10Int32keymapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.testprotopath.TestR\x05value:\x028\x01\x1aS\n" +
	"\x10Int64keymapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.testprotopath.TestR\x05value:\x028\x01\x1aT\n" +
	"\x11Uint32keymapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.testprotopath.TestR\x05value:\x028\x01\x1aT\n" +
	"\x11Uint64keymapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.testprotopath.TestR\x05value:\x028\x01BFZDgithub.com/vanti-dev/sc-bos/internal/protobuf/protopath2/testmessageb\x06proto3"

var (
	file_testmessage_proto_rawDescOnce sync.Once
	file_testmessage_proto_rawDescData []byte
)

func file_testmessage_proto_rawDescGZIP() []byte {
	file_testmessage_proto_rawDescOnce.Do(func() {
		file_testmessage_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_testmessage_proto_rawDesc), len(file_testmessage_proto_rawDesc)))
	})
	return file_testmessage_proto_rawDescData
}

var file_testmessage_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_testmessage_proto_goTypes = []any{
	(*Test)(nil),        // 0: testprotopath.Test
	(*Test_Nested)(nil), // 1: testprotopath.Test.Nested
	nil,                 // 2: testprotopath.Test.StrkeymapEntry
	nil,                 // 3: testprotopath.Test.BoolkeymapEntry
	nil,                 // 4: testprotopath.Test.Int32keymapEntry
	nil,                 // 5: testprotopath.Test.Int64keymapEntry
	nil,                 // 6: testprotopath.Test.Uint32keymapEntry
	nil,                 // 7: testprotopath.Test.Uint64keymapEntry
}
var file_testmessage_proto_depIdxs = []int32{
	1,  // 0: testprotopath.Test.nested:type_name -> testprotopath.Test.Nested
	0,  // 1: testprotopath.Test.repeats:type_name -> testprotopath.Test
	2,  // 2: testprotopath.Test.strkeymap:type_name -> testprotopath.Test.StrkeymapEntry
	3,  // 3: testprotopath.Test.boolkeymap:type_name -> testprotopath.Test.BoolkeymapEntry
	4,  // 4: testprotopath.Test.int32keymap:type_name -> testprotopath.Test.Int32keymapEntry
	5,  // 5: testprotopath.Test.int64keymap:type_name -> testprotopath.Test.Int64keymapEntry
	6,  // 6: testprotopath.Test.uint32keymap:type_name -> testprotopath.Test.Uint32keymapEntry
	7,  // 7: testprotopath.Test.uint64keymap:type_name -> testprotopath.Test.Uint64keymapEntry
	0,  // 8: testprotopath.Test.Nested.nested:type_name -> testprotopath.Test
	1,  // 9: testprotopath.Test.StrkeymapEntry.value:type_name -> testprotopath.Test.Nested
	0,  // 10: testprotopath.Test.BoolkeymapEntry.value:type_name -> testprotopath.Test
	0,  // 11: testprotopath.Test.Int32keymapEntry.value:type_name -> testprotopath.Test
	0,  // 12: testprotopath.Test.Int64keymapEntry.value:type_name -> testprotopath.Test
	0,  // 13: testprotopath.Test.Uint32keymapEntry.value:type_name -> testprotopath.Test
	0,  // 14: testprotopath.Test.Uint64keymapEntry.value:type_name -> testprotopath.Test
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_testmessage_proto_init() }
func file_testmessage_proto_init() {
	if File_testmessage_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_testmessage_proto_rawDesc), len(file_testmessage_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_testmessage_proto_goTypes,
		DependencyIndexes: file_testmessage_proto_depIdxs,
		MessageInfos:      file_testmessage_proto_msgTypes,
	}.Build()
	File_testmessage_proto = out.File
	file_testmessage_proto_goTypes = nil
	file_testmessage_proto_depIdxs = nil
}
