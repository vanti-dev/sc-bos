// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
)

const addRolePermission = `-- name: AddRolePermission :exec
INSERT INTO role_permissions (role_id, permission)
VALUES (?1, ?2)
ON CONFLICT (role_id, permission) DO NOTHING
`

type AddRolePermissionParams struct {
	RoleID     int64
	Permission string
}

func (q *Queries) AddRolePermission(ctx context.Context, arg AddRolePermissionParams) error {
	_, err := q.db.ExecContext(ctx, addRolePermission, arg.RoleID, arg.Permission)
	return err
}

const clearRolePermissions = `-- name: ClearRolePermissions :execrows
DELETE FROM role_permissions
WHERE role_id = ?1
`

func (q *Queries) ClearRolePermissions(ctx context.Context, roleID int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, clearRolePermissions, roleID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const countAccounts = `-- name: CountAccounts :one
SELECT COUNT(*) AS count
FROM accounts
`

func (q *Queries) CountAccounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRoleAssignments = `-- name: CountRoleAssignments :one
SELECT COUNT(*)
FROM role_assignments
`

func (q *Queries) CountRoleAssignments(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRoleAssignments)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRoleAssignmentsForAccount = `-- name: CountRoleAssignmentsForAccount :one
SELECT COUNT(*) AS count
FROM role_assignments
WHERE account_id = ?1
`

func (q *Queries) CountRoleAssignmentsForAccount(ctx context.Context, accountID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRoleAssignmentsForAccount, accountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRoleAssignmentsForRole = `-- name: CountRoleAssignmentsForRole :one
SELECT COUNT(*) AS count
FROM role_assignments
WHERE role_id = ?1
`

func (q *Queries) CountRoleAssignmentsForRole(ctx context.Context, roleID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRoleAssignmentsForRole, roleID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRoles = `-- name: CountRoles :one
SELECT COUNT(*) AS count
FROM roles
`

func (q *Queries) CountRoles(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRoles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (display_name, description, type, create_time)
VALUES (?1, ?2, ?3, datetime('now', 'subsec'))
RETURNING id, display_name, description, type, create_time
`

type CreateAccountParams struct {
	DisplayName string
	Description sql.NullString
	Type        string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.DisplayName, arg.Description, arg.Type)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Description,
		&i.Type,
		&i.CreateTime,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (display_name, description)
VALUES (?1, ?2)
RETURNING id, display_name, description
`

type CreateRoleParams struct {
	DisplayName string
	Description sql.NullString
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.DisplayName, arg.Description)
	var i Role
	err := row.Scan(&i.ID, &i.DisplayName, &i.Description)
	return i, err
}

const createRoleAssignment = `-- name: CreateRoleAssignment :one
INSERT INTO role_assignments (account_id, role_id, scope_type, scope_resource)
VALUES (?1, ?2, ?3, ?4)
RETURNING id, account_id, role_id, scope_type, scope_resource
`

type CreateRoleAssignmentParams struct {
	AccountID     int64
	RoleID        int64
	ScopeKind     sql.NullString
	ScopeResource sql.NullString
}

func (q *Queries) CreateRoleAssignment(ctx context.Context, arg CreateRoleAssignmentParams) (RoleAssignment, error) {
	row := q.db.QueryRowContext(ctx, createRoleAssignment,
		arg.AccountID,
		arg.RoleID,
		arg.ScopeKind,
		arg.ScopeResource,
	)
	var i RoleAssignment
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RoleID,
		&i.ScopeType,
		&i.ScopeResource,
	)
	return i, err
}

const createServiceAccount = `-- name: CreateServiceAccount :one
INSERT INTO service_accounts (account_id, primary_secret_hash)
VALUES (?1, ?2)
RETURNING account_id, primary_secret_hash, secondary_secret_hash, secondary_secret_expire_time
`

type CreateServiceAccountParams struct {
	AccountID         int64
	PrimarySecretHash []byte
}

func (q *Queries) CreateServiceAccount(ctx context.Context, arg CreateServiceAccountParams) (ServiceAccount, error) {
	row := q.db.QueryRowContext(ctx, createServiceAccount, arg.AccountID, arg.PrimarySecretHash)
	var i ServiceAccount
	err := row.Scan(
		&i.AccountID,
		&i.PrimarySecretHash,
		&i.SecondarySecretHash,
		&i.SecondarySecretExpireTime,
	)
	return i, err
}

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO user_accounts (account_id, username, password_hash)
VALUES (?1, ?2, ?3)
RETURNING account_id, username, password_hash
`

type CreateUserAccountParams struct {
	AccountID    int64
	Username     string
	PasswordHash []byte
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, createUserAccount, arg.AccountID, arg.Username, arg.PasswordHash)
	var i UserAccount
	err := row.Scan(&i.AccountID, &i.Username, &i.PasswordHash)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :execrows
DELETE FROM accounts
WHERE id = ?1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteAccount, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteRole = `-- name: DeleteRole :execrows
DELETE FROM roles
WHERE id = ?1
`

func (q *Queries) DeleteRole(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteRole, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteRoleAssignment = `-- name: DeleteRoleAssignment :execrows
DELETE FROM role_assignments
WHERE id = ?1
`

func (q *Queries) DeleteRoleAssignment(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteRoleAssignment, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteRolePermission = `-- name: DeleteRolePermission :execrows
DELETE FROM role_permissions
WHERE role_id = ?1 AND permission = ?2
`

type DeleteRolePermissionParams struct {
	RoleID     int64
	Permission string
}

func (q *Queries) DeleteRolePermission(ctx context.Context, arg DeleteRolePermissionParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteRolePermission, arg.RoleID, arg.Permission)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAccount = `-- name: GetAccount :one
SELECT id, display_name, description, type, create_time
FROM accounts
WHERE id = ?1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Description,
		&i.Type,
		&i.CreateTime,
	)
	return i, err
}

const getAccountDetails = `-- name: GetAccountDetails :one
SELECT id, display_name, description, type, create_time, username, password_hash, primary_secret_hash, secondary_secret_hash, secondary_secret_expire_time FROM account_details
WHERE id = ?1
`

func (q *Queries) GetAccountDetails(ctx context.Context, id int64) (AccountDetail, error) {
	row := q.db.QueryRowContext(ctx, getAccountDetails, id)
	var i AccountDetail
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Description,
		&i.Type,
		&i.CreateTime,
		&i.Username,
		&i.PasswordHash,
		&i.PrimarySecretHash,
		&i.SecondarySecretHash,
		&i.SecondarySecretExpireTime,
	)
	return i, err
}

const getRole = `-- name: GetRole :one
SELECT id, display_name, description
FROM roles
WHERE id = ?1
`

func (q *Queries) GetRole(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(&i.ID, &i.DisplayName, &i.Description)
	return i, err
}

const getRoleAssignment = `-- name: GetRoleAssignment :one
SELECT id, account_id, role_id, scope_type, scope_resource
FROM role_assignments
WHERE id = ?1
`

func (q *Queries) GetRoleAssignment(ctx context.Context, id int64) (RoleAssignment, error) {
	row := q.db.QueryRowContext(ctx, getRoleAssignment, id)
	var i RoleAssignment
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RoleID,
		&i.ScopeType,
		&i.ScopeResource,
	)
	return i, err
}

const listAccountDetails = `-- name: ListAccountDetails :many
SELECT id, display_name, description, type, create_time, username, password_hash, primary_secret_hash, secondary_secret_hash, secondary_secret_expire_time FROM account_details
WHERE id > ?1
ORDER BY id
LIMIT ?2
`

type ListAccountDetailsParams struct {
	AfterID int64
	Limit   int64
}

func (q *Queries) ListAccountDetails(ctx context.Context, arg ListAccountDetailsParams) ([]AccountDetail, error) {
	rows, err := q.db.QueryContext(ctx, listAccountDetails, arg.AfterID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountDetail
	for rows.Next() {
		var i AccountDetail
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.Description,
			&i.Type,
			&i.CreateTime,
			&i.Username,
			&i.PasswordHash,
			&i.PrimarySecretHash,
			&i.SecondarySecretHash,
			&i.SecondarySecretExpireTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, display_name, description, type, create_time
FROM accounts
WHERE id > ?1
ORDER BY id
LIMIT ?2
`

type ListAccountsParams struct {
	AfterID int64
	Limit   int64
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.AfterID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.Description,
			&i.Type,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoleAssignments = `-- name: ListRoleAssignments :many
SELECT id, account_id, role_id, scope_type, scope_resource
FROM role_assignments
WHERE id > ?1
ORDER BY id
LIMIT ?2
`

type ListRoleAssignmentsParams struct {
	AfterID int64
	Limit   int64
}

func (q *Queries) ListRoleAssignments(ctx context.Context, arg ListRoleAssignmentsParams) ([]RoleAssignment, error) {
	rows, err := q.db.QueryContext(ctx, listRoleAssignments, arg.AfterID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleAssignment
	for rows.Next() {
		var i RoleAssignment
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.RoleID,
			&i.ScopeType,
			&i.ScopeResource,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoleAssignmentsForAccount = `-- name: ListRoleAssignmentsForAccount :many
SELECT id, account_id, role_id, scope_type, scope_resource
FROM role_assignments
WHERE account_id = ?1
  AND id > ?2
ORDER BY id
LIMIT ?3
`

type ListRoleAssignmentsForAccountParams struct {
	AccountID int64
	AfterID   int64
	Limit     int64
}

func (q *Queries) ListRoleAssignmentsForAccount(ctx context.Context, arg ListRoleAssignmentsForAccountParams) ([]RoleAssignment, error) {
	rows, err := q.db.QueryContext(ctx, listRoleAssignmentsForAccount, arg.AccountID, arg.AfterID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleAssignment
	for rows.Next() {
		var i RoleAssignment
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.RoleID,
			&i.ScopeType,
			&i.ScopeResource,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoleAssignmentsForRole = `-- name: ListRoleAssignmentsForRole :many
SELECT id, account_id, role_id, scope_type, scope_resource
FROM role_assignments
WHERE role_id = ?1
  AND id > ?2
ORDER BY id
LIMIT ?3
`

type ListRoleAssignmentsForRoleParams struct {
	RoleID  int64
	AfterID int64
	Limit   int64
}

func (q *Queries) ListRoleAssignmentsForRole(ctx context.Context, arg ListRoleAssignmentsForRoleParams) ([]RoleAssignment, error) {
	rows, err := q.db.QueryContext(ctx, listRoleAssignmentsForRole, arg.RoleID, arg.AfterID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleAssignment
	for rows.Next() {
		var i RoleAssignment
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.RoleID,
			&i.ScopeType,
			&i.ScopeResource,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolePermissions = `-- name: ListRolePermissions :many
SELECT permission
FROM role_permissions
WHERE role_id = ?1
ORDER BY permission
`

func (q *Queries) ListRolePermissions(ctx context.Context, roleID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listRolePermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var permission string
		if err := rows.Scan(&permission); err != nil {
			return nil, err
		}
		items = append(items, permission)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoles = `-- name: ListRoles :many
SELECT id, display_name, description
FROM roles
WHERE id > ?1
ORDER BY id
LIMIT ?2
`

type ListRolesParams struct {
	AfterID int64
	Limit   int64
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles, arg.AfterID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.DisplayName, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolesAndPermissions = `-- name: ListRolesAndPermissions :many
SELECT roles.id, roles.display_name, roles.description, group_concat(coalesce(role_permissions.permission, ''), ',') AS permissions
FROM roles
LEFT OUTER JOIN role_permissions ON roles.id = role_permissions.role_id
WHERE roles.id > ?1
GROUP BY roles.id
ORDER BY roles.id
LIMIT ?2
`

type ListRolesAndPermissionsParams struct {
	AfterID int64
	Limit   int64
}

type ListRolesAndPermissionsRow struct {
	Role        Role
	Permissions string
}

func (q *Queries) ListRolesAndPermissions(ctx context.Context, arg ListRolesAndPermissionsParams) ([]ListRolesAndPermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listRolesAndPermissions, arg.AfterID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRolesAndPermissionsRow
	for rows.Next() {
		var i ListRolesAndPermissionsRow
		if err := rows.Scan(
			&i.Role.ID,
			&i.Role.DisplayName,
			&i.Role.Description,
			&i.Permissions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rotateServiceAccountSecret = `-- name: RotateServiceAccountSecret :exec
UPDATE service_accounts
SET primary_secret_hash = ?1,
    secondary_secret_hash = CASE
        WHEN ?2 IS NULL THEN NULL
        ELSE primary_secret_hash
    END,
    secondary_secret_expire_time = ?2
WHERE account_id = ?3
`

type RotateServiceAccountSecretParams struct {
	PrimarySecretHash         []byte
	SecondarySecretExpireTime sql.NullTime
	AccountID                 int64
}

func (q *Queries) RotateServiceAccountSecret(ctx context.Context, arg RotateServiceAccountSecretParams) error {
	_, err := q.db.ExecContext(ctx, rotateServiceAccountSecret, arg.PrimarySecretHash, arg.SecondarySecretExpireTime, arg.AccountID)
	return err
}

const updateAccountDescription = `-- name: UpdateAccountDescription :exec
UPDATE accounts
SET description = ?1
WHERE id = ?2
`

type UpdateAccountDescriptionParams struct {
	Description sql.NullString
	ID          int64
}

func (q *Queries) UpdateAccountDescription(ctx context.Context, arg UpdateAccountDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountDescription, arg.Description, arg.ID)
	return err
}

const updateAccountDisplayName = `-- name: UpdateAccountDisplayName :exec
UPDATE accounts
SET display_name = ?1
WHERE id = ?2
`

type UpdateAccountDisplayNameParams struct {
	DisplayName string
	ID          int64
}

func (q *Queries) UpdateAccountDisplayName(ctx context.Context, arg UpdateAccountDisplayNameParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountDisplayName, arg.DisplayName, arg.ID)
	return err
}

const updateAccountPasswordHash = `-- name: UpdateAccountPasswordHash :exec
UPDATE user_accounts
SET password_hash = ?1
WHERE account_id = ?2
`

type UpdateAccountPasswordHashParams struct {
	PasswordHash []byte
	AccountID    int64
}

func (q *Queries) UpdateAccountPasswordHash(ctx context.Context, arg UpdateAccountPasswordHashParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountPasswordHash, arg.PasswordHash, arg.AccountID)
	return err
}

const updateAccountUsername = `-- name: UpdateAccountUsername :exec
UPDATE user_accounts
SET username = ?1
WHERE account_id = ?2
`

type UpdateAccountUsernameParams struct {
	Username  string
	AccountID int64
}

func (q *Queries) UpdateAccountUsername(ctx context.Context, arg UpdateAccountUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountUsername, arg.Username, arg.AccountID)
	return err
}

const updateRoleDescription = `-- name: UpdateRoleDescription :execrows
UPDATE roles
SET description = ?1
WHERE id = ?2
`

type UpdateRoleDescriptionParams struct {
	Description sql.NullString
	ID          int64
}

func (q *Queries) UpdateRoleDescription(ctx context.Context, arg UpdateRoleDescriptionParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateRoleDescription, arg.Description, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateRoleDisplayName = `-- name: UpdateRoleDisplayName :execrows
UPDATE roles
SET display_name = ?1
WHERE id = ?2
`

type UpdateRoleDisplayNameParams struct {
	DisplayName string
	ID          int64
}

func (q *Queries) UpdateRoleDisplayName(ctx context.Context, arg UpdateRoleDisplayNameParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateRoleDisplayName, arg.DisplayName, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
