// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package rpc

import (
	"github.com/smart-core-os/sc-golang/pkg/wrap"
)

// WrapBacnetDriverService	adapts a rpc.BacnetDriverServiceServer	and presents it as a rpc.BacnetDriverServiceClient
func WrapBacnetDriverService(server BacnetDriverServiceServer) BacnetDriverServiceClient {
	conn := wrap.ServerToClient(BacnetDriverService_ServiceDesc, server)
	client := NewBacnetDriverServiceClient(conn)
	return &bacnetDriverServiceWrapper{
		BacnetDriverServiceClient: client,
		server:                    server,
	}
}

type bacnetDriverServiceWrapper struct {
	BacnetDriverServiceClient

	server BacnetDriverServiceServer
}

// compile time check that we implement the interface we need
var _ BacnetDriverServiceClient = (*bacnetDriverServiceWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *bacnetDriverServiceWrapper) UnwrapServer() BacnetDriverServiceServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *bacnetDriverServiceWrapper) Unwrap() any {
	return w.UnwrapServer()
}
