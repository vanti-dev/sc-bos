// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: pkg/driver/bacnet/rpc/bacnet.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ObjectIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Instance uint32 `protobuf:"varint,2,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *ObjectIdentifier) Reset() {
	*x = ObjectIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectIdentifier) ProtoMessage() {}

func (x *ObjectIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectIdentifier.ProtoReflect.Descriptor instead.
func (*ObjectIdentifier) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{0}
}

func (x *ObjectIdentifier) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ObjectIdentifier) GetInstance() uint32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

// Defines which property of the object we should read or write.
// If the property is an array type then also which array index to read or write.
//
// Default to 85 (Present Value) if not specified as part of the read or write request.
type PropertyReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier uint32  `protobuf:"varint,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ArrayIndex *uint32 `protobuf:"varint,2,opt,name=array_index,json=arrayIndex,proto3,oneof" json:"array_index,omitempty"`
}

func (x *PropertyReference) Reset() {
	*x = PropertyReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyReference) ProtoMessage() {}

func (x *PropertyReference) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyReference.ProtoReflect.Descriptor instead.
func (*PropertyReference) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{1}
}

func (x *PropertyReference) GetIdentifier() uint32 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (x *PropertyReference) GetArrayIndex() uint32 {
	if x != nil && x.ArrayIndex != nil {
		return *x.ArrayIndex
	}
	return 0
}

type PropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*PropertyValue_Null
	//	*PropertyValue_Boolean
	//	*PropertyValue_Unsigned32
	//	*PropertyValue_Unsigned64
	//	*PropertyValue_Integer32
	//	*PropertyValue_Integer64
	//	*PropertyValue_Real
	//	*PropertyValue_Double
	//	*PropertyValue_OctetString
	//	*PropertyValue_CharacterString
	//	*PropertyValue_BitString
	//	*PropertyValue_Enumerated
	//	*PropertyValue_Date
	//	*PropertyValue_Time
	//	*PropertyValue_ObjectIdentifier
	Value isPropertyValue_Value `protobuf_oneof:"value"`
}

func (x *PropertyValue) Reset() {
	*x = PropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValue) ProtoMessage() {}

func (x *PropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValue.ProtoReflect.Descriptor instead.
func (*PropertyValue) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{2}
}

func (m *PropertyValue) GetValue() isPropertyValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PropertyValue) GetNull() bool {
	if x, ok := x.GetValue().(*PropertyValue_Null); ok {
		return x.Null
	}
	return false
}

func (x *PropertyValue) GetBoolean() bool {
	if x, ok := x.GetValue().(*PropertyValue_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *PropertyValue) GetUnsigned32() uint32 {
	if x, ok := x.GetValue().(*PropertyValue_Unsigned32); ok {
		return x.Unsigned32
	}
	return 0
}

func (x *PropertyValue) GetUnsigned64() uint64 {
	if x, ok := x.GetValue().(*PropertyValue_Unsigned64); ok {
		return x.Unsigned64
	}
	return 0
}

func (x *PropertyValue) GetInteger32() int32 {
	if x, ok := x.GetValue().(*PropertyValue_Integer32); ok {
		return x.Integer32
	}
	return 0
}

func (x *PropertyValue) GetInteger64() int64 {
	if x, ok := x.GetValue().(*PropertyValue_Integer64); ok {
		return x.Integer64
	}
	return 0
}

func (x *PropertyValue) GetReal() float32 {
	if x, ok := x.GetValue().(*PropertyValue_Real); ok {
		return x.Real
	}
	return 0
}

func (x *PropertyValue) GetDouble() float64 {
	if x, ok := x.GetValue().(*PropertyValue_Double); ok {
		return x.Double
	}
	return 0
}

func (x *PropertyValue) GetOctetString() []byte {
	if x, ok := x.GetValue().(*PropertyValue_OctetString); ok {
		return x.OctetString
	}
	return nil
}

func (x *PropertyValue) GetCharacterString() string {
	if x, ok := x.GetValue().(*PropertyValue_CharacterString); ok {
		return x.CharacterString
	}
	return ""
}

func (x *PropertyValue) GetBitString() *PropertyValue_BitStringValue {
	if x, ok := x.GetValue().(*PropertyValue_BitString); ok {
		return x.BitString
	}
	return nil
}

func (x *PropertyValue) GetEnumerated() uint64 {
	if x, ok := x.GetValue().(*PropertyValue_Enumerated); ok {
		return x.Enumerated
	}
	return 0
}

func (x *PropertyValue) GetDate() *PropertyValue_DateValue {
	if x, ok := x.GetValue().(*PropertyValue_Date); ok {
		return x.Date
	}
	return nil
}

func (x *PropertyValue) GetTime() *PropertyValue_TimeValue {
	if x, ok := x.GetValue().(*PropertyValue_Time); ok {
		return x.Time
	}
	return nil
}

func (x *PropertyValue) GetObjectIdentifier() *ObjectIdentifier {
	if x, ok := x.GetValue().(*PropertyValue_ObjectIdentifier); ok {
		return x.ObjectIdentifier
	}
	return nil
}

type isPropertyValue_Value interface {
	isPropertyValue_Value()
}

type PropertyValue_Null struct {
	Null bool `protobuf:"varint,1,opt,name=null,proto3,oneof"`
}

type PropertyValue_Boolean struct {
	Boolean bool `protobuf:"varint,2,opt,name=boolean,proto3,oneof"`
}

type PropertyValue_Unsigned32 struct {
	Unsigned32 uint32 `protobuf:"varint,3,opt,name=unsigned32,proto3,oneof"`
}

type PropertyValue_Unsigned64 struct {
	Unsigned64 uint64 `protobuf:"varint,4,opt,name=unsigned64,proto3,oneof"`
}

type PropertyValue_Integer32 struct {
	Integer32 int32 `protobuf:"varint,5,opt,name=integer32,proto3,oneof"`
}

type PropertyValue_Integer64 struct {
	Integer64 int64 `protobuf:"varint,6,opt,name=integer64,proto3,oneof"`
}

type PropertyValue_Real struct {
	Real float32 `protobuf:"fixed32,7,opt,name=real,proto3,oneof"`
}

type PropertyValue_Double struct {
	Double float64 `protobuf:"fixed64,8,opt,name=double,proto3,oneof"`
}

type PropertyValue_OctetString struct {
	OctetString []byte `protobuf:"bytes,9,opt,name=octet_string,json=octetString,proto3,oneof"`
}

type PropertyValue_CharacterString struct {
	CharacterString string `protobuf:"bytes,10,opt,name=character_string,json=characterString,proto3,oneof"`
}

type PropertyValue_BitString struct {
	BitString *PropertyValue_BitStringValue `protobuf:"bytes,11,opt,name=bit_string,json=bitString,proto3,oneof"`
}

type PropertyValue_Enumerated struct {
	Enumerated uint64 `protobuf:"varint,12,opt,name=enumerated,proto3,oneof"`
}

type PropertyValue_Date struct {
	Date *PropertyValue_DateValue `protobuf:"bytes,13,opt,name=date,proto3,oneof"`
}

type PropertyValue_Time struct {
	Time *PropertyValue_TimeValue `protobuf:"bytes,14,opt,name=time,proto3,oneof"`
}

type PropertyValue_ObjectIdentifier struct {
	ObjectIdentifier *ObjectIdentifier `protobuf:"bytes,15,opt,name=object_identifier,json=objectIdentifier,proto3,oneof"`
}

func (*PropertyValue_Null) isPropertyValue_Value() {}

func (*PropertyValue_Boolean) isPropertyValue_Value() {}

func (*PropertyValue_Unsigned32) isPropertyValue_Value() {}

func (*PropertyValue_Unsigned64) isPropertyValue_Value() {}

func (*PropertyValue_Integer32) isPropertyValue_Value() {}

func (*PropertyValue_Integer64) isPropertyValue_Value() {}

func (*PropertyValue_Real) isPropertyValue_Value() {}

func (*PropertyValue_Double) isPropertyValue_Value() {}

func (*PropertyValue_OctetString) isPropertyValue_Value() {}

func (*PropertyValue_CharacterString) isPropertyValue_Value() {}

func (*PropertyValue_BitString) isPropertyValue_Value() {}

func (*PropertyValue_Enumerated) isPropertyValue_Value() {}

func (*PropertyValue_Date) isPropertyValue_Value() {}

func (*PropertyValue_Time) isPropertyValue_Value() {}

func (*PropertyValue_ObjectIdentifier) isPropertyValue_Value() {}

type PropertyReadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyReference *PropertyReference `protobuf:"bytes,1,opt,name=property_reference,json=propertyReference,proto3" json:"property_reference,omitempty"`
	Value             *PropertyValue     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PropertyReadResult) Reset() {
	*x = PropertyReadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyReadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyReadResult) ProtoMessage() {}

func (x *PropertyReadResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyReadResult.ProtoReflect.Descriptor instead.
func (*PropertyReadResult) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{3}
}

func (x *PropertyReadResult) GetPropertyReference() *PropertyReference {
	if x != nil {
		return x.PropertyReference
	}
	return nil
}

func (x *PropertyReadResult) GetValue() *PropertyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type PropertyWriteValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyReference *PropertyReference `protobuf:"bytes,1,opt,name=property_reference,json=propertyReference,proto3" json:"property_reference,omitempty"`
	Value             *PropertyValue     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// 1-16, 0 means absent.
	Priority uint32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *PropertyWriteValue) Reset() {
	*x = PropertyWriteValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyWriteValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyWriteValue) ProtoMessage() {}

func (x *PropertyWriteValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyWriteValue.ProtoReflect.Descriptor instead.
func (*PropertyWriteValue) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{4}
}

func (x *PropertyWriteValue) GetPropertyReference() *PropertyReference {
	if x != nil {
		return x.PropertyReference
	}
	return nil
}

func (x *PropertyWriteValue) GetValue() *PropertyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PropertyWriteValue) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type ReadPropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ObjectIdentifier  *ObjectIdentifier  `protobuf:"bytes,2,opt,name=object_identifier,json=objectIdentifier,proto3" json:"object_identifier,omitempty"`
	PropertyReference *PropertyReference `protobuf:"bytes,3,opt,name=property_reference,json=propertyReference,proto3" json:"property_reference,omitempty"`
}

func (x *ReadPropertyRequest) Reset() {
	*x = ReadPropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPropertyRequest) ProtoMessage() {}

func (x *ReadPropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPropertyRequest.ProtoReflect.Descriptor instead.
func (*ReadPropertyRequest) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{5}
}

func (x *ReadPropertyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReadPropertyRequest) GetObjectIdentifier() *ObjectIdentifier {
	if x != nil {
		return x.ObjectIdentifier
	}
	return nil
}

func (x *ReadPropertyRequest) GetPropertyReference() *PropertyReference {
	if x != nil {
		return x.PropertyReference
	}
	return nil
}

type ReadPropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectIdentifier *ObjectIdentifier   `protobuf:"bytes,1,opt,name=object_identifier,json=objectIdentifier,proto3" json:"object_identifier,omitempty"`
	Result           *PropertyReadResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ReadPropertyResponse) Reset() {
	*x = ReadPropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPropertyResponse) ProtoMessage() {}

func (x *ReadPropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPropertyResponse.ProtoReflect.Descriptor instead.
func (*ReadPropertyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{6}
}

func (x *ReadPropertyResponse) GetObjectIdentifier() *ObjectIdentifier {
	if x != nil {
		return x.ObjectIdentifier
	}
	return nil
}

func (x *ReadPropertyResponse) GetResult() *PropertyReadResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ReadPropertyMultipleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadSpecifications []*ReadPropertyMultipleRequest_ReadSpecification `protobuf:"bytes,2,rep,name=read_specifications,json=readSpecifications,proto3" json:"read_specifications,omitempty"`
}

func (x *ReadPropertyMultipleRequest) Reset() {
	*x = ReadPropertyMultipleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPropertyMultipleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPropertyMultipleRequest) ProtoMessage() {}

func (x *ReadPropertyMultipleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPropertyMultipleRequest.ProtoReflect.Descriptor instead.
func (*ReadPropertyMultipleRequest) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{7}
}

func (x *ReadPropertyMultipleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReadPropertyMultipleRequest) GetReadSpecifications() []*ReadPropertyMultipleRequest_ReadSpecification {
	if x != nil {
		return x.ReadSpecifications
	}
	return nil
}

type ReadPropertyMultipleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadResults []*ReadPropertyMultipleResponse_ReadResult `protobuf:"bytes,1,rep,name=read_results,json=readResults,proto3" json:"read_results,omitempty"`
}

func (x *ReadPropertyMultipleResponse) Reset() {
	*x = ReadPropertyMultipleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPropertyMultipleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPropertyMultipleResponse) ProtoMessage() {}

func (x *ReadPropertyMultipleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPropertyMultipleResponse.ProtoReflect.Descriptor instead.
func (*ReadPropertyMultipleResponse) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{8}
}

func (x *ReadPropertyMultipleResponse) GetReadResults() []*ReadPropertyMultipleResponse_ReadResult {
	if x != nil {
		return x.ReadResults
	}
	return nil
}

type WritePropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ObjectIdentifier *ObjectIdentifier   `protobuf:"bytes,2,opt,name=object_identifier,json=objectIdentifier,proto3" json:"object_identifier,omitempty"`
	WriteValue       *PropertyWriteValue `protobuf:"bytes,3,opt,name=write_value,json=writeValue,proto3" json:"write_value,omitempty"`
}

func (x *WritePropertyRequest) Reset() {
	*x = WritePropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritePropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePropertyRequest) ProtoMessage() {}

func (x *WritePropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePropertyRequest.ProtoReflect.Descriptor instead.
func (*WritePropertyRequest) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{9}
}

func (x *WritePropertyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WritePropertyRequest) GetObjectIdentifier() *ObjectIdentifier {
	if x != nil {
		return x.ObjectIdentifier
	}
	return nil
}

func (x *WritePropertyRequest) GetWriteValue() *PropertyWriteValue {
	if x != nil {
		return x.WriteValue
	}
	return nil
}

type WritePropertyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WritePropertyResponse) Reset() {
	*x = WritePropertyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritePropertyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePropertyResponse) ProtoMessage() {}

func (x *WritePropertyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePropertyResponse.ProtoReflect.Descriptor instead.
func (*WritePropertyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{10}
}

type WritePropertyMultipleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                                             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	WriteSpecifications []*WritePropertyMultipleRequest_WriteSpecification `protobuf:"bytes,2,rep,name=write_specifications,json=writeSpecifications,proto3" json:"write_specifications,omitempty"`
}

func (x *WritePropertyMultipleRequest) Reset() {
	*x = WritePropertyMultipleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritePropertyMultipleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePropertyMultipleRequest) ProtoMessage() {}

func (x *WritePropertyMultipleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePropertyMultipleRequest.ProtoReflect.Descriptor instead.
func (*WritePropertyMultipleRequest) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{11}
}

func (x *WritePropertyMultipleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WritePropertyMultipleRequest) GetWriteSpecifications() []*WritePropertyMultipleRequest_WriteSpecification {
	if x != nil {
		return x.WriteSpecifications
	}
	return nil
}

type WritePropertyMultipleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WritePropertyMultipleResponse) Reset() {
	*x = WritePropertyMultipleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritePropertyMultipleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePropertyMultipleResponse) ProtoMessage() {}

func (x *WritePropertyMultipleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePropertyMultipleResponse.ProtoReflect.Descriptor instead.
func (*WritePropertyMultipleResponse) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{12}
}

type ListObjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListObjectsRequest) Reset() {
	*x = ListObjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectsRequest) ProtoMessage() {}

func (x *ListObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectsRequest.ProtoReflect.Descriptor instead.
func (*ListObjectsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{13}
}

func (x *ListObjectsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListObjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*ObjectIdentifier `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *ListObjectsResponse) Reset() {
	*x = ListObjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectsResponse) ProtoMessage() {}

func (x *ListObjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectsResponse.ProtoReflect.Descriptor instead.
func (*ListObjectsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{14}
}

func (x *ListObjectsResponse) GetObjects() []*ObjectIdentifier {
	if x != nil {
		return x.Objects
	}
	return nil
}

// Represents a BACnet Date type.
type PropertyValue_DateValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0 means absent, not year 0.
	Year uint32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	// January = 1
	// 13 means odd months.
	// 14 means even months.
	Month uint32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	// 32 means last day of month.
	// 33 means odd days of month.
	// 34 means even days of month.
	DayOfMonth uint32 `protobuf:"varint,3,opt,name=day_of_month,json=dayOfMonth,proto3" json:"day_of_month,omitempty"`
	// Monday = 1
	DayOfWeek uint32 `protobuf:"varint,4,opt,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"`
}

func (x *PropertyValue_DateValue) Reset() {
	*x = PropertyValue_DateValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValue_DateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValue_DateValue) ProtoMessage() {}

func (x *PropertyValue_DateValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValue_DateValue.ProtoReflect.Descriptor instead.
func (*PropertyValue_DateValue) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PropertyValue_DateValue) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *PropertyValue_DateValue) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *PropertyValue_DateValue) GetDayOfMonth() uint32 {
	if x != nil {
		return x.DayOfMonth
	}
	return 0
}

func (x *PropertyValue_DateValue) GetDayOfWeek() uint32 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

// Represents a BACnet Time type.
type PropertyValue_TimeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 24hr time
	Hour               *uint32 `protobuf:"varint,1,opt,name=hour,proto3,oneof" json:"hour,omitempty"`
	Minute             *uint32 `protobuf:"varint,2,opt,name=minute,proto3,oneof" json:"minute,omitempty"`
	Second             *uint32 `protobuf:"varint,3,opt,name=second,proto3,oneof" json:"second,omitempty"`
	HundredthsOfSecond *uint32 `protobuf:"varint,4,opt,name=hundredths_of_second,json=hundredthsOfSecond,proto3,oneof" json:"hundredths_of_second,omitempty"`
}

func (x *PropertyValue_TimeValue) Reset() {
	*x = PropertyValue_TimeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValue_TimeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValue_TimeValue) ProtoMessage() {}

func (x *PropertyValue_TimeValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValue_TimeValue.ProtoReflect.Descriptor instead.
func (*PropertyValue_TimeValue) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{2, 1}
}

func (x *PropertyValue_TimeValue) GetHour() uint32 {
	if x != nil && x.Hour != nil {
		return *x.Hour
	}
	return 0
}

func (x *PropertyValue_TimeValue) GetMinute() uint32 {
	if x != nil && x.Minute != nil {
		return *x.Minute
	}
	return 0
}

func (x *PropertyValue_TimeValue) GetSecond() uint32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

func (x *PropertyValue_TimeValue) GetHundredthsOfSecond() uint32 {
	if x != nil && x.HundredthsOfSecond != nil {
		return *x.HundredthsOfSecond
	}
	return 0
}

type PropertyValue_BitStringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value              []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	IgnoreTrailingBits uint32 `protobuf:"varint,2,opt,name=ignore_trailing_bits,json=ignoreTrailingBits,proto3" json:"ignore_trailing_bits,omitempty"`
}

func (x *PropertyValue_BitStringValue) Reset() {
	*x = PropertyValue_BitStringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValue_BitStringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValue_BitStringValue) ProtoMessage() {}

func (x *PropertyValue_BitStringValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValue_BitStringValue.ProtoReflect.Descriptor instead.
func (*PropertyValue_BitStringValue) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{2, 2}
}

func (x *PropertyValue_BitStringValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PropertyValue_BitStringValue) GetIgnoreTrailingBits() uint32 {
	if x != nil {
		return x.IgnoreTrailingBits
	}
	return 0
}

type ReadPropertyMultipleRequest_ReadSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectIdentifier   *ObjectIdentifier    `protobuf:"bytes,1,opt,name=object_identifier,json=objectIdentifier,proto3" json:"object_identifier,omitempty"`
	PropertyReferences []*PropertyReference `protobuf:"bytes,2,rep,name=property_references,json=propertyReferences,proto3" json:"property_references,omitempty"`
}

func (x *ReadPropertyMultipleRequest_ReadSpecification) Reset() {
	*x = ReadPropertyMultipleRequest_ReadSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPropertyMultipleRequest_ReadSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPropertyMultipleRequest_ReadSpecification) ProtoMessage() {}

func (x *ReadPropertyMultipleRequest_ReadSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPropertyMultipleRequest_ReadSpecification.ProtoReflect.Descriptor instead.
func (*ReadPropertyMultipleRequest_ReadSpecification) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ReadPropertyMultipleRequest_ReadSpecification) GetObjectIdentifier() *ObjectIdentifier {
	if x != nil {
		return x.ObjectIdentifier
	}
	return nil
}

func (x *ReadPropertyMultipleRequest_ReadSpecification) GetPropertyReferences() []*PropertyReference {
	if x != nil {
		return x.PropertyReferences
	}
	return nil
}

type ReadPropertyMultipleResponse_ReadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectIdentifier *ObjectIdentifier     `protobuf:"bytes,1,opt,name=object_identifier,json=objectIdentifier,proto3" json:"object_identifier,omitempty"`
	Results          []*PropertyReadResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ReadPropertyMultipleResponse_ReadResult) Reset() {
	*x = ReadPropertyMultipleResponse_ReadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPropertyMultipleResponse_ReadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPropertyMultipleResponse_ReadResult) ProtoMessage() {}

func (x *ReadPropertyMultipleResponse_ReadResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPropertyMultipleResponse_ReadResult.ProtoReflect.Descriptor instead.
func (*ReadPropertyMultipleResponse_ReadResult) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ReadPropertyMultipleResponse_ReadResult) GetObjectIdentifier() *ObjectIdentifier {
	if x != nil {
		return x.ObjectIdentifier
	}
	return nil
}

func (x *ReadPropertyMultipleResponse_ReadResult) GetResults() []*PropertyReadResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type WritePropertyMultipleRequest_WriteSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectIdentifier *ObjectIdentifier     `protobuf:"bytes,2,opt,name=object_identifier,json=objectIdentifier,proto3" json:"object_identifier,omitempty"`
	WriteValues      []*PropertyWriteValue `protobuf:"bytes,3,rep,name=write_values,json=writeValues,proto3" json:"write_values,omitempty"`
}

func (x *WritePropertyMultipleRequest_WriteSpecification) Reset() {
	*x = WritePropertyMultipleRequest_WriteSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritePropertyMultipleRequest_WriteSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePropertyMultipleRequest_WriteSpecification) ProtoMessage() {}

func (x *WritePropertyMultipleRequest_WriteSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePropertyMultipleRequest_WriteSpecification.ProtoReflect.Descriptor instead.
func (*WritePropertyMultipleRequest_WriteSpecification) Descriptor() ([]byte, []int) {
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP(), []int{11, 0}
}

func (x *WritePropertyMultipleRequest_WriteSpecification) GetObjectIdentifier() *ObjectIdentifier {
	if x != nil {
		return x.ObjectIdentifier
	}
	return nil
}

func (x *WritePropertyMultipleRequest_WriteSpecification) GetWriteValues() []*PropertyWriteValue {
	if x != nil {
		return x.WriteValues
	}
	return nil
}

var File_pkg_driver_bacnet_rpc_bacnet_proto protoreflect.FileDescriptor

var file_pkg_driver_bacnet_rpc_bacnet_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x62, 0x61, 0x63,
	0x6e, 0x65, 0x74, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65,
	0x74, 0x22, 0x42, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x69, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xe7, 0x08, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0a, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x33, 0x32, 0x12, 0x1e, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0b, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x0a, 0x62, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x5c, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x77,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x79,
	0x4f, 0x66, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f,
	0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x61,
	0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x1a, 0xcd, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x68, 0x75, 0x6e, 0x64,
	0x72, 0x65, 0x64, 0x74, 0x68, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x12, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65,
	0x64, 0x74, 0x68, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x68, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x74, 0x68, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x1a, 0x58, 0x0a, 0x0e, 0x42, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x74,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x5d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6e, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xe4, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5d,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xbb, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x03, 0x0a, 0x1b,
	0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x7b, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xd0, 0x01, 0x0a,
	0x11, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5f,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0xbd, 0x02, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x67, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xb3, 0x01, 0x0a, 0x0a, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65,
	0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6e, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0xd8, 0x01, 0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x11,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xfa, 0x02, 0x0a, 0x1c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x14, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6e, 0x65, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xc4, 0x01, 0x0a, 0x12, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5a, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0c,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x1f, 0x0a, 0x1d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x28, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65,
	0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x32, 0x93, 0x05, 0x0a, 0x13,
	0x42, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x30, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65,
	0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x12, 0x38, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x31, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e,
	0x01, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x62, 0x6f, 0x73, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65,
	0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x70, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2f,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x76, 0x61, 0x6e, 0x74, 0x69, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x63, 0x2d, 0x62, 0x6f, 0x73,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x62, 0x61, 0x63, 0x6e,
	0x65, 0x74, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescOnce sync.Once
	file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescData = file_pkg_driver_bacnet_rpc_bacnet_proto_rawDesc
)

func file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescGZIP() []byte {
	file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescOnce.Do(func() {
		file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescData)
	})
	return file_pkg_driver_bacnet_rpc_bacnet_proto_rawDescData
}

var file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_pkg_driver_bacnet_rpc_bacnet_proto_goTypes = []interface{}{
	(*ObjectIdentifier)(nil),                                // 0: smartcore.bos.driver.bacnet.ObjectIdentifier
	(*PropertyReference)(nil),                               // 1: smartcore.bos.driver.bacnet.PropertyReference
	(*PropertyValue)(nil),                                   // 2: smartcore.bos.driver.bacnet.PropertyValue
	(*PropertyReadResult)(nil),                              // 3: smartcore.bos.driver.bacnet.PropertyReadResult
	(*PropertyWriteValue)(nil),                              // 4: smartcore.bos.driver.bacnet.PropertyWriteValue
	(*ReadPropertyRequest)(nil),                             // 5: smartcore.bos.driver.bacnet.ReadPropertyRequest
	(*ReadPropertyResponse)(nil),                            // 6: smartcore.bos.driver.bacnet.ReadPropertyResponse
	(*ReadPropertyMultipleRequest)(nil),                     // 7: smartcore.bos.driver.bacnet.ReadPropertyMultipleRequest
	(*ReadPropertyMultipleResponse)(nil),                    // 8: smartcore.bos.driver.bacnet.ReadPropertyMultipleResponse
	(*WritePropertyRequest)(nil),                            // 9: smartcore.bos.driver.bacnet.WritePropertyRequest
	(*WritePropertyResponse)(nil),                           // 10: smartcore.bos.driver.bacnet.WritePropertyResponse
	(*WritePropertyMultipleRequest)(nil),                    // 11: smartcore.bos.driver.bacnet.WritePropertyMultipleRequest
	(*WritePropertyMultipleResponse)(nil),                   // 12: smartcore.bos.driver.bacnet.WritePropertyMultipleResponse
	(*ListObjectsRequest)(nil),                              // 13: smartcore.bos.driver.bacnet.ListObjectsRequest
	(*ListObjectsResponse)(nil),                             // 14: smartcore.bos.driver.bacnet.ListObjectsResponse
	(*PropertyValue_DateValue)(nil),                         // 15: smartcore.bos.driver.bacnet.PropertyValue.DateValue
	(*PropertyValue_TimeValue)(nil),                         // 16: smartcore.bos.driver.bacnet.PropertyValue.TimeValue
	(*PropertyValue_BitStringValue)(nil),                    // 17: smartcore.bos.driver.bacnet.PropertyValue.BitStringValue
	(*ReadPropertyMultipleRequest_ReadSpecification)(nil),   // 18: smartcore.bos.driver.bacnet.ReadPropertyMultipleRequest.ReadSpecification
	(*ReadPropertyMultipleResponse_ReadResult)(nil),         // 19: smartcore.bos.driver.bacnet.ReadPropertyMultipleResponse.ReadResult
	(*WritePropertyMultipleRequest_WriteSpecification)(nil), // 20: smartcore.bos.driver.bacnet.WritePropertyMultipleRequest.WriteSpecification
}
var file_pkg_driver_bacnet_rpc_bacnet_proto_depIdxs = []int32{
	17, // 0: smartcore.bos.driver.bacnet.PropertyValue.bit_string:type_name -> smartcore.bos.driver.bacnet.PropertyValue.BitStringValue
	15, // 1: smartcore.bos.driver.bacnet.PropertyValue.date:type_name -> smartcore.bos.driver.bacnet.PropertyValue.DateValue
	16, // 2: smartcore.bos.driver.bacnet.PropertyValue.time:type_name -> smartcore.bos.driver.bacnet.PropertyValue.TimeValue
	0,  // 3: smartcore.bos.driver.bacnet.PropertyValue.object_identifier:type_name -> smartcore.bos.driver.bacnet.ObjectIdentifier
	1,  // 4: smartcore.bos.driver.bacnet.PropertyReadResult.property_reference:type_name -> smartcore.bos.driver.bacnet.PropertyReference
	2,  // 5: smartcore.bos.driver.bacnet.PropertyReadResult.value:type_name -> smartcore.bos.driver.bacnet.PropertyValue
	1,  // 6: smartcore.bos.driver.bacnet.PropertyWriteValue.property_reference:type_name -> smartcore.bos.driver.bacnet.PropertyReference
	2,  // 7: smartcore.bos.driver.bacnet.PropertyWriteValue.value:type_name -> smartcore.bos.driver.bacnet.PropertyValue
	0,  // 8: smartcore.bos.driver.bacnet.ReadPropertyRequest.object_identifier:type_name -> smartcore.bos.driver.bacnet.ObjectIdentifier
	1,  // 9: smartcore.bos.driver.bacnet.ReadPropertyRequest.property_reference:type_name -> smartcore.bos.driver.bacnet.PropertyReference
	0,  // 10: smartcore.bos.driver.bacnet.ReadPropertyResponse.object_identifier:type_name -> smartcore.bos.driver.bacnet.ObjectIdentifier
	3,  // 11: smartcore.bos.driver.bacnet.ReadPropertyResponse.result:type_name -> smartcore.bos.driver.bacnet.PropertyReadResult
	18, // 12: smartcore.bos.driver.bacnet.ReadPropertyMultipleRequest.read_specifications:type_name -> smartcore.bos.driver.bacnet.ReadPropertyMultipleRequest.ReadSpecification
	19, // 13: smartcore.bos.driver.bacnet.ReadPropertyMultipleResponse.read_results:type_name -> smartcore.bos.driver.bacnet.ReadPropertyMultipleResponse.ReadResult
	0,  // 14: smartcore.bos.driver.bacnet.WritePropertyRequest.object_identifier:type_name -> smartcore.bos.driver.bacnet.ObjectIdentifier
	4,  // 15: smartcore.bos.driver.bacnet.WritePropertyRequest.write_value:type_name -> smartcore.bos.driver.bacnet.PropertyWriteValue
	20, // 16: smartcore.bos.driver.bacnet.WritePropertyMultipleRequest.write_specifications:type_name -> smartcore.bos.driver.bacnet.WritePropertyMultipleRequest.WriteSpecification
	0,  // 17: smartcore.bos.driver.bacnet.ListObjectsResponse.objects:type_name -> smartcore.bos.driver.bacnet.ObjectIdentifier
	0,  // 18: smartcore.bos.driver.bacnet.ReadPropertyMultipleRequest.ReadSpecification.object_identifier:type_name -> smartcore.bos.driver.bacnet.ObjectIdentifier
	1,  // 19: smartcore.bos.driver.bacnet.ReadPropertyMultipleRequest.ReadSpecification.property_references:type_name -> smartcore.bos.driver.bacnet.PropertyReference
	0,  // 20: smartcore.bos.driver.bacnet.ReadPropertyMultipleResponse.ReadResult.object_identifier:type_name -> smartcore.bos.driver.bacnet.ObjectIdentifier
	3,  // 21: smartcore.bos.driver.bacnet.ReadPropertyMultipleResponse.ReadResult.results:type_name -> smartcore.bos.driver.bacnet.PropertyReadResult
	0,  // 22: smartcore.bos.driver.bacnet.WritePropertyMultipleRequest.WriteSpecification.object_identifier:type_name -> smartcore.bos.driver.bacnet.ObjectIdentifier
	4,  // 23: smartcore.bos.driver.bacnet.WritePropertyMultipleRequest.WriteSpecification.write_values:type_name -> smartcore.bos.driver.bacnet.PropertyWriteValue
	5,  // 24: smartcore.bos.driver.bacnet.BacnetDriverService.ReadProperty:input_type -> smartcore.bos.driver.bacnet.ReadPropertyRequest
	7,  // 25: smartcore.bos.driver.bacnet.BacnetDriverService.ReadPropertyMultiple:input_type -> smartcore.bos.driver.bacnet.ReadPropertyMultipleRequest
	9,  // 26: smartcore.bos.driver.bacnet.BacnetDriverService.WriteProperty:input_type -> smartcore.bos.driver.bacnet.WritePropertyRequest
	11, // 27: smartcore.bos.driver.bacnet.BacnetDriverService.WritePropertyMultiple:input_type -> smartcore.bos.driver.bacnet.WritePropertyMultipleRequest
	13, // 28: smartcore.bos.driver.bacnet.BacnetDriverService.ListObjects:input_type -> smartcore.bos.driver.bacnet.ListObjectsRequest
	6,  // 29: smartcore.bos.driver.bacnet.BacnetDriverService.ReadProperty:output_type -> smartcore.bos.driver.bacnet.ReadPropertyResponse
	8,  // 30: smartcore.bos.driver.bacnet.BacnetDriverService.ReadPropertyMultiple:output_type -> smartcore.bos.driver.bacnet.ReadPropertyMultipleResponse
	10, // 31: smartcore.bos.driver.bacnet.BacnetDriverService.WriteProperty:output_type -> smartcore.bos.driver.bacnet.WritePropertyResponse
	12, // 32: smartcore.bos.driver.bacnet.BacnetDriverService.WritePropertyMultiple:output_type -> smartcore.bos.driver.bacnet.WritePropertyMultipleResponse
	14, // 33: smartcore.bos.driver.bacnet.BacnetDriverService.ListObjects:output_type -> smartcore.bos.driver.bacnet.ListObjectsResponse
	29, // [29:34] is the sub-list for method output_type
	24, // [24:29] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_pkg_driver_bacnet_rpc_bacnet_proto_init() }
func file_pkg_driver_bacnet_rpc_bacnet_proto_init() {
	if File_pkg_driver_bacnet_rpc_bacnet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyReadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyWriteValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPropertyMultipleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPropertyMultipleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritePropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritePropertyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritePropertyMultipleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritePropertyMultipleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValue_DateValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValue_TimeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValue_BitStringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPropertyMultipleRequest_ReadSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPropertyMultipleResponse_ReadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritePropertyMultipleRequest_WriteSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PropertyValue_Null)(nil),
		(*PropertyValue_Boolean)(nil),
		(*PropertyValue_Unsigned32)(nil),
		(*PropertyValue_Unsigned64)(nil),
		(*PropertyValue_Integer32)(nil),
		(*PropertyValue_Integer64)(nil),
		(*PropertyValue_Real)(nil),
		(*PropertyValue_Double)(nil),
		(*PropertyValue_OctetString)(nil),
		(*PropertyValue_CharacterString)(nil),
		(*PropertyValue_BitString)(nil),
		(*PropertyValue_Enumerated)(nil),
		(*PropertyValue_Date)(nil),
		(*PropertyValue_Time)(nil),
		(*PropertyValue_ObjectIdentifier)(nil),
	}
	file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_driver_bacnet_rpc_bacnet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_driver_bacnet_rpc_bacnet_proto_goTypes,
		DependencyIndexes: file_pkg_driver_bacnet_rpc_bacnet_proto_depIdxs,
		MessageInfos:      file_pkg_driver_bacnet_rpc_bacnet_proto_msgTypes,
	}.Build()
	File_pkg_driver_bacnet_rpc_bacnet_proto = out.File
	file_pkg_driver_bacnet_rpc_bacnet_proto_rawDesc = nil
	file_pkg_driver_bacnet_rpc_bacnet_proto_goTypes = nil
	file_pkg_driver_bacnet_rpc_bacnet_proto_depIdxs = nil
}
