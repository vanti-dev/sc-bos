// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: pkg/driver/bacnet/rpc/bacnet.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BacnetDriverServiceClient is the client API for BacnetDriverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BacnetDriverServiceClient interface {
	ReadProperty(ctx context.Context, in *ReadPropertyRequest, opts ...grpc.CallOption) (*ReadPropertyResponse, error)
	ReadPropertyMultiple(ctx context.Context, in *ReadPropertyMultipleRequest, opts ...grpc.CallOption) (*ReadPropertyMultipleResponse, error)
	WriteProperty(ctx context.Context, in *WritePropertyRequest, opts ...grpc.CallOption) (*WritePropertyResponse, error)
	WritePropertyMultiple(ctx context.Context, in *WritePropertyMultipleRequest, opts ...grpc.CallOption) (*WritePropertyMultipleResponse, error)
	// Returns the objects configured for the configured device, which might be a subset of those actually available.
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error)
}

type bacnetDriverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBacnetDriverServiceClient(cc grpc.ClientConnInterface) BacnetDriverServiceClient {
	return &bacnetDriverServiceClient{cc}
}

func (c *bacnetDriverServiceClient) ReadProperty(ctx context.Context, in *ReadPropertyRequest, opts ...grpc.CallOption) (*ReadPropertyResponse, error) {
	out := new(ReadPropertyResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.driver.bacnet.BacnetDriverService/ReadProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bacnetDriverServiceClient) ReadPropertyMultiple(ctx context.Context, in *ReadPropertyMultipleRequest, opts ...grpc.CallOption) (*ReadPropertyMultipleResponse, error) {
	out := new(ReadPropertyMultipleResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.driver.bacnet.BacnetDriverService/ReadPropertyMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bacnetDriverServiceClient) WriteProperty(ctx context.Context, in *WritePropertyRequest, opts ...grpc.CallOption) (*WritePropertyResponse, error) {
	out := new(WritePropertyResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.driver.bacnet.BacnetDriverService/WriteProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bacnetDriverServiceClient) WritePropertyMultiple(ctx context.Context, in *WritePropertyMultipleRequest, opts ...grpc.CallOption) (*WritePropertyMultipleResponse, error) {
	out := new(WritePropertyMultipleResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.driver.bacnet.BacnetDriverService/WritePropertyMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bacnetDriverServiceClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error) {
	out := new(ListObjectsResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.driver.bacnet.BacnetDriverService/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BacnetDriverServiceServer is the server API for BacnetDriverService service.
// All implementations must embed UnimplementedBacnetDriverServiceServer
// for forward compatibility
type BacnetDriverServiceServer interface {
	ReadProperty(context.Context, *ReadPropertyRequest) (*ReadPropertyResponse, error)
	ReadPropertyMultiple(context.Context, *ReadPropertyMultipleRequest) (*ReadPropertyMultipleResponse, error)
	WriteProperty(context.Context, *WritePropertyRequest) (*WritePropertyResponse, error)
	WritePropertyMultiple(context.Context, *WritePropertyMultipleRequest) (*WritePropertyMultipleResponse, error)
	// Returns the objects configured for the configured device, which might be a subset of those actually available.
	ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error)
	mustEmbedUnimplementedBacnetDriverServiceServer()
}

// UnimplementedBacnetDriverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBacnetDriverServiceServer struct {
}

func (UnimplementedBacnetDriverServiceServer) ReadProperty(context.Context, *ReadPropertyRequest) (*ReadPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProperty not implemented")
}
func (UnimplementedBacnetDriverServiceServer) ReadPropertyMultiple(context.Context, *ReadPropertyMultipleRequest) (*ReadPropertyMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPropertyMultiple not implemented")
}
func (UnimplementedBacnetDriverServiceServer) WriteProperty(context.Context, *WritePropertyRequest) (*WritePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteProperty not implemented")
}
func (UnimplementedBacnetDriverServiceServer) WritePropertyMultiple(context.Context, *WritePropertyMultipleRequest) (*WritePropertyMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WritePropertyMultiple not implemented")
}
func (UnimplementedBacnetDriverServiceServer) ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedBacnetDriverServiceServer) mustEmbedUnimplementedBacnetDriverServiceServer() {}

// UnsafeBacnetDriverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BacnetDriverServiceServer will
// result in compilation errors.
type UnsafeBacnetDriverServiceServer interface {
	mustEmbedUnimplementedBacnetDriverServiceServer()
}

func RegisterBacnetDriverServiceServer(s grpc.ServiceRegistrar, srv BacnetDriverServiceServer) {
	s.RegisterService(&BacnetDriverService_ServiceDesc, srv)
}

func _BacnetDriverService_ReadProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacnetDriverServiceServer).ReadProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.driver.bacnet.BacnetDriverService/ReadProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacnetDriverServiceServer).ReadProperty(ctx, req.(*ReadPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacnetDriverService_ReadPropertyMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPropertyMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacnetDriverServiceServer).ReadPropertyMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.driver.bacnet.BacnetDriverService/ReadPropertyMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacnetDriverServiceServer).ReadPropertyMultiple(ctx, req.(*ReadPropertyMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacnetDriverService_WriteProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WritePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacnetDriverServiceServer).WriteProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.driver.bacnet.BacnetDriverService/WriteProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacnetDriverServiceServer).WriteProperty(ctx, req.(*WritePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacnetDriverService_WritePropertyMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WritePropertyMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacnetDriverServiceServer).WritePropertyMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.driver.bacnet.BacnetDriverService/WritePropertyMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacnetDriverServiceServer).WritePropertyMultiple(ctx, req.(*WritePropertyMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacnetDriverService_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacnetDriverServiceServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.driver.bacnet.BacnetDriverService/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacnetDriverServiceServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BacnetDriverService_ServiceDesc is the grpc.ServiceDesc for BacnetDriverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BacnetDriverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.driver.bacnet.BacnetDriverService",
	HandlerType: (*BacnetDriverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadProperty",
			Handler:    _BacnetDriverService_ReadProperty_Handler,
		},
		{
			MethodName: "ReadPropertyMultiple",
			Handler:    _BacnetDriverService_ReadPropertyMultiple_Handler,
		},
		{
			MethodName: "WriteProperty",
			Handler:    _BacnetDriverService_WriteProperty_Handler,
		},
		{
			MethodName: "WritePropertyMultiple",
			Handler:    _BacnetDriverService_WritePropertyMultiple_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _BacnetDriverService_ListObjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/driver/bacnet/rpc/bacnet.proto",
}
