// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: valve.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ValveApi_GetValve_FullMethodName    = "/smartcore.bos.ValveApi/GetValve"
	ValveApi_PullValve_FullMethodName   = "/smartcore.bos.ValveApi/PullValve"
	ValveApi_UpdateValve_FullMethodName = "/smartcore.bos.ValveApi/UpdateValve"
)

// ValveApiClient is the client API for ValveApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValveApiClient interface {
	GetValve(ctx context.Context, in *GetValveRequest, opts ...grpc.CallOption) (*Valve, error)
	PullValve(ctx context.Context, in *PullValveRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullValveResponse], error)
	UpdateValve(ctx context.Context, in *UpdateValveRequest, opts ...grpc.CallOption) (*Valve, error)
}

type valveApiClient struct {
	cc grpc.ClientConnInterface
}

func NewValveApiClient(cc grpc.ClientConnInterface) ValveApiClient {
	return &valveApiClient{cc}
}

func (c *valveApiClient) GetValve(ctx context.Context, in *GetValveRequest, opts ...grpc.CallOption) (*Valve, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Valve)
	err := c.cc.Invoke(ctx, ValveApi_GetValve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valveApiClient) PullValve(ctx context.Context, in *PullValveRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullValveResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ValveApi_ServiceDesc.Streams[0], ValveApi_PullValve_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullValveRequest, PullValveResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValveApi_PullValveClient = grpc.ServerStreamingClient[PullValveResponse]

func (c *valveApiClient) UpdateValve(ctx context.Context, in *UpdateValveRequest, opts ...grpc.CallOption) (*Valve, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Valve)
	err := c.cc.Invoke(ctx, ValveApi_UpdateValve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValveApiServer is the server API for ValveApi service.
// All implementations must embed UnimplementedValveApiServer
// for forward compatibility.
type ValveApiServer interface {
	GetValve(context.Context, *GetValveRequest) (*Valve, error)
	PullValve(*PullValveRequest, grpc.ServerStreamingServer[PullValveResponse]) error
	UpdateValve(context.Context, *UpdateValveRequest) (*Valve, error)
	mustEmbedUnimplementedValveApiServer()
}

// UnimplementedValveApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedValveApiServer struct{}

func (UnimplementedValveApiServer) GetValve(context.Context, *GetValveRequest) (*Valve, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValve not implemented")
}
func (UnimplementedValveApiServer) PullValve(*PullValveRequest, grpc.ServerStreamingServer[PullValveResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullValve not implemented")
}
func (UnimplementedValveApiServer) UpdateValve(context.Context, *UpdateValveRequest) (*Valve, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValve not implemented")
}
func (UnimplementedValveApiServer) mustEmbedUnimplementedValveApiServer() {}
func (UnimplementedValveApiServer) testEmbeddedByValue()                  {}

// UnsafeValveApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValveApiServer will
// result in compilation errors.
type UnsafeValveApiServer interface {
	mustEmbedUnimplementedValveApiServer()
}

func RegisterValveApiServer(s grpc.ServiceRegistrar, srv ValveApiServer) {
	// If the following call pancis, it indicates UnimplementedValveApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ValveApi_ServiceDesc, srv)
}

func _ValveApi_GetValve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValveApiServer).GetValve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValveApi_GetValve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValveApiServer).GetValve(ctx, req.(*GetValveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValveApi_PullValve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullValveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ValveApiServer).PullValve(m, &grpc.GenericServerStream[PullValveRequest, PullValveResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValveApi_PullValveServer = grpc.ServerStreamingServer[PullValveResponse]

func _ValveApi_UpdateValve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateValveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValveApiServer).UpdateValve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValveApi_UpdateValve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValveApiServer).UpdateValve(ctx, req.(*UpdateValveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValveApi_ServiceDesc is the grpc.ServiceDesc for ValveApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValveApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.ValveApi",
	HandlerType: (*ValveApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValve",
			Handler:    _ValveApi_GetValve_Handler,
		},
		{
			MethodName: "UpdateValve",
			Handler:    _ValveApi_UpdateValve_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullValve",
			Handler:       _ValveApi_PullValve_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "valve.proto",
}
