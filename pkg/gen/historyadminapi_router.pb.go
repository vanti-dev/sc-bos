// Code generated by protoc-gen-router. DO NOT EDIT.

package gen

import (
	context "context"
	fmt "fmt"
	router "github.com/smart-core-os/sc-golang/pkg/router"
	grpc "google.golang.org/grpc"
)

// HistoryAdminApiRouter is a gen.HistoryAdminApiServer that allows routing named requests to specific gen.HistoryAdminApiClient
type HistoryAdminApiRouter struct {
	UnimplementedHistoryAdminApiServer

	router.Router
}

// compile time check that we implement the interface we need
var _ HistoryAdminApiServer = (*HistoryAdminApiRouter)(nil)

func NewHistoryAdminApiRouter(opts ...router.Option) *HistoryAdminApiRouter {
	return &HistoryAdminApiRouter{
		Router: router.NewRouter(opts...),
	}
}

// WithHistoryAdminApiClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithHistoryAdminApiClientFactory(f func(name string) (HistoryAdminApiClient, error)) router.Option {
	return router.WithFactory(func(name string) (any, error) {
		return f(name)
	})
}

func (r *HistoryAdminApiRouter) Register(server grpc.ServiceRegistrar) {
	RegisterHistoryAdminApiServer(server, r)
}

// Add extends Router.Add to panic if client is not of type gen.HistoryAdminApiClient.
func (r *HistoryAdminApiRouter) Add(name string, client any) any {
	if !r.HoldsType(client) {
		panic(fmt.Sprintf("not correct type: client of type %T is not a gen.HistoryAdminApiClient", client))
	}
	return r.Router.Add(name, client)
}

func (r *HistoryAdminApiRouter) HoldsType(client any) bool {
	_, ok := client.(HistoryAdminApiClient)
	return ok
}

func (r *HistoryAdminApiRouter) AddHistoryAdminApiClient(name string, client HistoryAdminApiClient) HistoryAdminApiClient {
	res := r.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(HistoryAdminApiClient)
}

func (r *HistoryAdminApiRouter) RemoveHistoryAdminApiClient(name string) HistoryAdminApiClient {
	res := r.Remove(name)
	if res == nil {
		return nil
	}
	return res.(HistoryAdminApiClient)
}

func (r *HistoryAdminApiRouter) GetHistoryAdminApiClient(name string) (HistoryAdminApiClient, error) {
	res, err := r.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(HistoryAdminApiClient), nil
}

func (r *HistoryAdminApiRouter) CreateHistoryRecord(ctx context.Context, request *CreateHistoryRecordRequest) (*HistoryRecord, error) {
	child, err := r.GetHistoryAdminApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.CreateHistoryRecord(ctx, request)
}

func (r *HistoryAdminApiRouter) ListHistoryRecords(ctx context.Context, request *ListHistoryRecordsRequest) (*ListHistoryRecordsResponse, error) {
	child, err := r.GetHistoryAdminApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ListHistoryRecords(ctx, request)
}
