// Code generated by protoc-gen-router. DO NOT EDIT.

package gen

import (
	context "context"
	fmt "fmt"
	router "github.com/smart-core-os/sc-golang/pkg/router"
	grpc "google.golang.org/grpc"
)

// AccountApiRouter is a AccountApiServer that allows routing named requests to specific AccountApiClient
type AccountApiRouter struct {
	UnimplementedAccountApiServer

	router.Router
}

// compile time check that we implement the interface we need
var _ AccountApiServer = (*AccountApiRouter)(nil)

func NewAccountApiRouter(opts ...router.Option) *AccountApiRouter {
	return &AccountApiRouter{
		Router: router.NewRouter(opts...),
	}
}

// WithAccountApiClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithAccountApiClientFactory(f func(name string) (AccountApiClient, error)) router.Option {
	return router.WithFactory(func(name string) (any, error) {
		return f(name)
	})
}

func (r *AccountApiRouter) Register(server grpc.ServiceRegistrar) {
	RegisterAccountApiServer(server, r)
}

// Add extends Router.Add to panic if client is not of type AccountApiClient.
func (r *AccountApiRouter) Add(name string, client any) any {
	if !r.HoldsType(client) {
		panic(fmt.Sprintf("not correct type: client of type %T is not a AccountApiClient", client))
	}
	return r.Router.Add(name, client)
}

func (r *AccountApiRouter) HoldsType(client any) bool {
	_, ok := client.(AccountApiClient)
	return ok
}

func (r *AccountApiRouter) AddAccountApiClient(name string, client AccountApiClient) AccountApiClient {
	res := r.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(AccountApiClient)
}

func (r *AccountApiRouter) RemoveAccountApiClient(name string) AccountApiClient {
	res := r.Remove(name)
	if res == nil {
		return nil
	}
	return res.(AccountApiClient)
}

func (r *AccountApiRouter) GetAccountApiClient(name string) (AccountApiClient, error) {
	res, err := r.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(AccountApiClient), nil
}

func (r *AccountApiRouter) GetAccount(ctx context.Context, request *GetAccountRequest) (*Account, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.GetAccount(ctx, request)
}

func (r *AccountApiRouter) ListAccounts(ctx context.Context, request *ListAccountsRequest) (*ListAccountsResponse, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ListAccounts(ctx, request)
}

func (r *AccountApiRouter) CreateAccount(ctx context.Context, request *CreateAccountRequest) (*Account, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.CreateAccount(ctx, request)
}

func (r *AccountApiRouter) UpdateAccount(ctx context.Context, request *UpdateAccountRequest) (*Account, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.UpdateAccount(ctx, request)
}

func (r *AccountApiRouter) UpdateAccountPassword(ctx context.Context, request *UpdateAccountPasswordRequest) (*UpdateAccountPasswordResponse, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.UpdateAccountPassword(ctx, request)
}

func (r *AccountApiRouter) DeleteAccount(ctx context.Context, request *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.DeleteAccount(ctx, request)
}

func (r *AccountApiRouter) GetServiceCredential(ctx context.Context, request *GetServiceCredentialRequest) (*ServiceCredential, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.GetServiceCredential(ctx, request)
}

func (r *AccountApiRouter) ListServiceCredentials(ctx context.Context, request *ListServiceCredentialsRequest) (*ListServiceCredentialsResponse, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ListServiceCredentials(ctx, request)
}

func (r *AccountApiRouter) CreateServiceCredential(ctx context.Context, request *CreateServiceCredentialRequest) (*ServiceCredential, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.CreateServiceCredential(ctx, request)
}

func (r *AccountApiRouter) DeleteServiceCredential(ctx context.Context, request *DeleteServiceCredentialRequest) (*DeleteServiceCredentialResponse, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.DeleteServiceCredential(ctx, request)
}

func (r *AccountApiRouter) GetRole(ctx context.Context, request *GetRoleRequest) (*Role, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.GetRole(ctx, request)
}

func (r *AccountApiRouter) ListRoles(ctx context.Context, request *ListRolesRequest) (*ListRolesResponse, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ListRoles(ctx, request)
}

func (r *AccountApiRouter) CreateRole(ctx context.Context, request *CreateRoleRequest) (*Role, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.CreateRole(ctx, request)
}

func (r *AccountApiRouter) UpdateRole(ctx context.Context, request *UpdateRoleRequest) (*Role, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.UpdateRole(ctx, request)
}

func (r *AccountApiRouter) DeleteRole(ctx context.Context, request *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.DeleteRole(ctx, request)
}

func (r *AccountApiRouter) GetRoleAssignment(ctx context.Context, request *GetRoleAssignmentRequest) (*RoleAssignment, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.GetRoleAssignment(ctx, request)
}

func (r *AccountApiRouter) ListRoleAssignments(ctx context.Context, request *ListRoleAssignmentsRequest) (*ListRoleAssignmentsResponse, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ListRoleAssignments(ctx, request)
}

func (r *AccountApiRouter) CreateRoleAssignment(ctx context.Context, request *CreateRoleAssignmentRequest) (*RoleAssignment, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.CreateRoleAssignment(ctx, request)
}

func (r *AccountApiRouter) DeleteRoleAssignment(ctx context.Context, request *DeleteRoleAssignmentRequest) (*DeleteRoleAssignmentResponse, error) {
	child, err := r.GetAccountApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.DeleteRoleAssignment(ctx, request)
}
