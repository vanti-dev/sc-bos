// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
)

// WrapAxiomXaDriverService	adapts a AxiomXaDriverServiceServer	and presents it as a AxiomXaDriverServiceClient
func WrapAxiomXaDriverService(server AxiomXaDriverServiceServer) AxiomXaDriverServiceClient {
	conn := wrap.ServerToClient(AxiomXaDriverService_ServiceDesc, server)
	client := NewAxiomXaDriverServiceClient(conn)
	return &axiomXaDriverServiceWrapper{
		AxiomXaDriverServiceClient: client,
		server:                     server,
	}
}

type axiomXaDriverServiceWrapper struct {
	AxiomXaDriverServiceClient

	server AxiomXaDriverServiceServer
}

// compile time check that we implement the interface we need
var _ AxiomXaDriverServiceClient = (*axiomXaDriverServiceWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *axiomXaDriverServiceWrapper) UnwrapServer() AxiomXaDriverServiceServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *axiomXaDriverServiceWrapper) Unwrap() any {
	return w.UnwrapServer()
}
