// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: security_event.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecurityEventApi_ListSecurityEvents_FullMethodName = "/smartcore.bos.SecurityEventApi/ListSecurityEvents"
	SecurityEventApi_PullSecurityEvents_FullMethodName = "/smartcore.bos.SecurityEventApi/PullSecurityEvents"
)

// SecurityEventApiClient is the client API for SecurityEventApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SecurityEventApi describes the capability to view and manage security events.
// These are typically events from an access control system's API, but could be from any security system.
type SecurityEventApiClient interface {
	ListSecurityEvents(ctx context.Context, in *ListSecurityEventsRequest, opts ...grpc.CallOption) (*ListSecurityEventsResponse, error)
	PullSecurityEvents(ctx context.Context, in *PullSecurityEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullSecurityEventsResponse], error)
}

type securityEventApiClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityEventApiClient(cc grpc.ClientConnInterface) SecurityEventApiClient {
	return &securityEventApiClient{cc}
}

func (c *securityEventApiClient) ListSecurityEvents(ctx context.Context, in *ListSecurityEventsRequest, opts ...grpc.CallOption) (*ListSecurityEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecurityEventsResponse)
	err := c.cc.Invoke(ctx, SecurityEventApi_ListSecurityEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityEventApiClient) PullSecurityEvents(ctx context.Context, in *PullSecurityEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullSecurityEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecurityEventApi_ServiceDesc.Streams[0], SecurityEventApi_PullSecurityEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullSecurityEventsRequest, PullSecurityEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecurityEventApi_PullSecurityEventsClient = grpc.ServerStreamingClient[PullSecurityEventsResponse]

// SecurityEventApiServer is the server API for SecurityEventApi service.
// All implementations must embed UnimplementedSecurityEventApiServer
// for forward compatibility.
//
// SecurityEventApi describes the capability to view and manage security events.
// These are typically events from an access control system's API, but could be from any security system.
type SecurityEventApiServer interface {
	ListSecurityEvents(context.Context, *ListSecurityEventsRequest) (*ListSecurityEventsResponse, error)
	PullSecurityEvents(*PullSecurityEventsRequest, grpc.ServerStreamingServer[PullSecurityEventsResponse]) error
	mustEmbedUnimplementedSecurityEventApiServer()
}

// UnimplementedSecurityEventApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecurityEventApiServer struct{}

func (UnimplementedSecurityEventApiServer) ListSecurityEvents(context.Context, *ListSecurityEventsRequest) (*ListSecurityEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityEvents not implemented")
}
func (UnimplementedSecurityEventApiServer) PullSecurityEvents(*PullSecurityEventsRequest, grpc.ServerStreamingServer[PullSecurityEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullSecurityEvents not implemented")
}
func (UnimplementedSecurityEventApiServer) mustEmbedUnimplementedSecurityEventApiServer() {}
func (UnimplementedSecurityEventApiServer) testEmbeddedByValue()                          {}

// UnsafeSecurityEventApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityEventApiServer will
// result in compilation errors.
type UnsafeSecurityEventApiServer interface {
	mustEmbedUnimplementedSecurityEventApiServer()
}

func RegisterSecurityEventApiServer(s grpc.ServiceRegistrar, srv SecurityEventApiServer) {
	// If the following call pancis, it indicates UnimplementedSecurityEventApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecurityEventApi_ServiceDesc, srv)
}

func _SecurityEventApi_ListSecurityEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityEventApiServer).ListSecurityEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityEventApi_ListSecurityEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityEventApiServer).ListSecurityEvents(ctx, req.(*ListSecurityEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityEventApi_PullSecurityEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullSecurityEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityEventApiServer).PullSecurityEvents(m, &grpc.GenericServerStream[PullSecurityEventsRequest, PullSecurityEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecurityEventApi_PullSecurityEventsServer = grpc.ServerStreamingServer[PullSecurityEventsResponse]

// SecurityEventApi_ServiceDesc is the grpc.ServiceDesc for SecurityEventApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityEventApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.SecurityEventApi",
	HandlerType: (*SecurityEventApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSecurityEvents",
			Handler:    _SecurityEventApi_ListSecurityEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullSecurityEvents",
			Handler:       _SecurityEventApi_PullSecurityEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "security_event.proto",
}
