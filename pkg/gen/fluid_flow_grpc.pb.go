// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: fluid_flow.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FluidFlowApi_GetFluidFlow_FullMethodName    = "/smartcore.bos.FluidFlowApi/GetFluidFlow"
	FluidFlowApi_PullFluidFlow_FullMethodName   = "/smartcore.bos.FluidFlowApi/PullFluidFlow"
	FluidFlowApi_UpdateFluidFlow_FullMethodName = "/smartcore.bos.FluidFlowApi/UpdateFluidFlow"
)

// FluidFlowApiClient is the client API for FluidFlowApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FluidFlow trait is applicable to devices that control the flow of a fluid (liquid or gas)
// by opening or closing a passageway. This includes devices such as water valves,
// gas valves, and other similar control mechanisms used in various industrial and
// commercial applications.
type FluidFlowApiClient interface {
	GetFluidFlow(ctx context.Context, in *GetFluidFlowRequest, opts ...grpc.CallOption) (*FluidFlow, error)
	PullFluidFlow(ctx context.Context, in *PullFluidFlowRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullFluidFlowResponse], error)
	UpdateFluidFlow(ctx context.Context, in *UpdateFluidFlowRequest, opts ...grpc.CallOption) (*FluidFlow, error)
}

type fluidFlowApiClient struct {
	cc grpc.ClientConnInterface
}

func NewFluidFlowApiClient(cc grpc.ClientConnInterface) FluidFlowApiClient {
	return &fluidFlowApiClient{cc}
}

func (c *fluidFlowApiClient) GetFluidFlow(ctx context.Context, in *GetFluidFlowRequest, opts ...grpc.CallOption) (*FluidFlow, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FluidFlow)
	err := c.cc.Invoke(ctx, FluidFlowApi_GetFluidFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluidFlowApiClient) PullFluidFlow(ctx context.Context, in *PullFluidFlowRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullFluidFlowResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FluidFlowApi_ServiceDesc.Streams[0], FluidFlowApi_PullFluidFlow_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullFluidFlowRequest, PullFluidFlowResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FluidFlowApi_PullFluidFlowClient = grpc.ServerStreamingClient[PullFluidFlowResponse]

func (c *fluidFlowApiClient) UpdateFluidFlow(ctx context.Context, in *UpdateFluidFlowRequest, opts ...grpc.CallOption) (*FluidFlow, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FluidFlow)
	err := c.cc.Invoke(ctx, FluidFlowApi_UpdateFluidFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FluidFlowApiServer is the server API for FluidFlowApi service.
// All implementations must embed UnimplementedFluidFlowApiServer
// for forward compatibility.
//
// FluidFlow trait is applicable to devices that control the flow of a fluid (liquid or gas)
// by opening or closing a passageway. This includes devices such as water valves,
// gas valves, and other similar control mechanisms used in various industrial and
// commercial applications.
type FluidFlowApiServer interface {
	GetFluidFlow(context.Context, *GetFluidFlowRequest) (*FluidFlow, error)
	PullFluidFlow(*PullFluidFlowRequest, grpc.ServerStreamingServer[PullFluidFlowResponse]) error
	UpdateFluidFlow(context.Context, *UpdateFluidFlowRequest) (*FluidFlow, error)
	mustEmbedUnimplementedFluidFlowApiServer()
}

// UnimplementedFluidFlowApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFluidFlowApiServer struct{}

func (UnimplementedFluidFlowApiServer) GetFluidFlow(context.Context, *GetFluidFlowRequest) (*FluidFlow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFluidFlow not implemented")
}
func (UnimplementedFluidFlowApiServer) PullFluidFlow(*PullFluidFlowRequest, grpc.ServerStreamingServer[PullFluidFlowResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullFluidFlow not implemented")
}
func (UnimplementedFluidFlowApiServer) UpdateFluidFlow(context.Context, *UpdateFluidFlowRequest) (*FluidFlow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFluidFlow not implemented")
}
func (UnimplementedFluidFlowApiServer) mustEmbedUnimplementedFluidFlowApiServer() {}
func (UnimplementedFluidFlowApiServer) testEmbeddedByValue()                      {}

// UnsafeFluidFlowApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FluidFlowApiServer will
// result in compilation errors.
type UnsafeFluidFlowApiServer interface {
	mustEmbedUnimplementedFluidFlowApiServer()
}

func RegisterFluidFlowApiServer(s grpc.ServiceRegistrar, srv FluidFlowApiServer) {
	// If the following call pancis, it indicates UnimplementedFluidFlowApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FluidFlowApi_ServiceDesc, srv)
}

func _FluidFlowApi_GetFluidFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFluidFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluidFlowApiServer).GetFluidFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluidFlowApi_GetFluidFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluidFlowApiServer).GetFluidFlow(ctx, req.(*GetFluidFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluidFlowApi_PullFluidFlow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullFluidFlowRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FluidFlowApiServer).PullFluidFlow(m, &grpc.GenericServerStream[PullFluidFlowRequest, PullFluidFlowResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FluidFlowApi_PullFluidFlowServer = grpc.ServerStreamingServer[PullFluidFlowResponse]

func _FluidFlowApi_UpdateFluidFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFluidFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluidFlowApiServer).UpdateFluidFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluidFlowApi_UpdateFluidFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluidFlowApiServer).UpdateFluidFlow(ctx, req.(*UpdateFluidFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FluidFlowApi_ServiceDesc is the grpc.ServiceDesc for FluidFlowApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FluidFlowApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.FluidFlowApi",
	HandlerType: (*FluidFlowApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFluidFlow",
			Handler:    _FluidFlowApi_GetFluidFlow_Handler,
		},
		{
			MethodName: "UpdateFluidFlow",
			Handler:    _FluidFlowApi_UpdateFluidFlow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullFluidFlow",
			Handler:       _FluidFlowApi_PullFluidFlow_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fluid_flow.proto",
}

const (
	FluidFlowInfo_DescribeFluidFlow_FullMethodName = "/smartcore.bos.FluidFlowInfo/DescribeFluidFlow"
)

// FluidFlowInfoClient is the client API for FluidFlowInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FluidFlowInfoClient interface {
	DescribeFluidFlow(ctx context.Context, in *DescribeFluidFlowRequest, opts ...grpc.CallOption) (*FluidFlowSupport, error)
}

type fluidFlowInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewFluidFlowInfoClient(cc grpc.ClientConnInterface) FluidFlowInfoClient {
	return &fluidFlowInfoClient{cc}
}

func (c *fluidFlowInfoClient) DescribeFluidFlow(ctx context.Context, in *DescribeFluidFlowRequest, opts ...grpc.CallOption) (*FluidFlowSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FluidFlowSupport)
	err := c.cc.Invoke(ctx, FluidFlowInfo_DescribeFluidFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FluidFlowInfoServer is the server API for FluidFlowInfo service.
// All implementations must embed UnimplementedFluidFlowInfoServer
// for forward compatibility.
type FluidFlowInfoServer interface {
	DescribeFluidFlow(context.Context, *DescribeFluidFlowRequest) (*FluidFlowSupport, error)
	mustEmbedUnimplementedFluidFlowInfoServer()
}

// UnimplementedFluidFlowInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFluidFlowInfoServer struct{}

func (UnimplementedFluidFlowInfoServer) DescribeFluidFlow(context.Context, *DescribeFluidFlowRequest) (*FluidFlowSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFluidFlow not implemented")
}
func (UnimplementedFluidFlowInfoServer) mustEmbedUnimplementedFluidFlowInfoServer() {}
func (UnimplementedFluidFlowInfoServer) testEmbeddedByValue()                       {}

// UnsafeFluidFlowInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FluidFlowInfoServer will
// result in compilation errors.
type UnsafeFluidFlowInfoServer interface {
	mustEmbedUnimplementedFluidFlowInfoServer()
}

func RegisterFluidFlowInfoServer(s grpc.ServiceRegistrar, srv FluidFlowInfoServer) {
	// If the following call pancis, it indicates UnimplementedFluidFlowInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FluidFlowInfo_ServiceDesc, srv)
}

func _FluidFlowInfo_DescribeFluidFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeFluidFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluidFlowInfoServer).DescribeFluidFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluidFlowInfo_DescribeFluidFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluidFlowInfoServer).DescribeFluidFlow(ctx, req.(*DescribeFluidFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FluidFlowInfo_ServiceDesc is the grpc.ServiceDesc for FluidFlowInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FluidFlowInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.FluidFlowInfo",
	HandlerType: (*FluidFlowInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeFluidFlow",
			Handler:    _FluidFlowInfo_DescribeFluidFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fluid_flow.proto",
}
