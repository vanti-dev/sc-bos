// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sound_sensor.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SoundSensorApi_GetSoundLevel_FullMethodName  = "/smartcore.bos.SoundSensorApi/GetSoundLevel"
	SoundSensorApi_PullSoundLevel_FullMethodName = "/smartcore.bos.SoundSensorApi/PullSoundLevel"
)

// SoundSensorApiClient is the client API for SoundSensorApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Trait for devices that measure sound/noise levels.
type SoundSensorApiClient interface {
	GetSoundLevel(ctx context.Context, in *GetSoundLevelRequest, opts ...grpc.CallOption) (*SoundLevel, error)
	PullSoundLevel(ctx context.Context, in *PullSoundLevelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullSoundLevelResponse], error)
}

type soundSensorApiClient struct {
	cc grpc.ClientConnInterface
}

func NewSoundSensorApiClient(cc grpc.ClientConnInterface) SoundSensorApiClient {
	return &soundSensorApiClient{cc}
}

func (c *soundSensorApiClient) GetSoundLevel(ctx context.Context, in *GetSoundLevelRequest, opts ...grpc.CallOption) (*SoundLevel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SoundLevel)
	err := c.cc.Invoke(ctx, SoundSensorApi_GetSoundLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundSensorApiClient) PullSoundLevel(ctx context.Context, in *PullSoundLevelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullSoundLevelResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SoundSensorApi_ServiceDesc.Streams[0], SoundSensorApi_PullSoundLevel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullSoundLevelRequest, PullSoundLevelResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SoundSensorApi_PullSoundLevelClient = grpc.ServerStreamingClient[PullSoundLevelResponse]

// SoundSensorApiServer is the server API for SoundSensorApi service.
// All implementations must embed UnimplementedSoundSensorApiServer
// for forward compatibility.
//
// Trait for devices that measure sound/noise levels.
type SoundSensorApiServer interface {
	GetSoundLevel(context.Context, *GetSoundLevelRequest) (*SoundLevel, error)
	PullSoundLevel(*PullSoundLevelRequest, grpc.ServerStreamingServer[PullSoundLevelResponse]) error
	mustEmbedUnimplementedSoundSensorApiServer()
}

// UnimplementedSoundSensorApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSoundSensorApiServer struct{}

func (UnimplementedSoundSensorApiServer) GetSoundLevel(context.Context, *GetSoundLevelRequest) (*SoundLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoundLevel not implemented")
}
func (UnimplementedSoundSensorApiServer) PullSoundLevel(*PullSoundLevelRequest, grpc.ServerStreamingServer[PullSoundLevelResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullSoundLevel not implemented")
}
func (UnimplementedSoundSensorApiServer) mustEmbedUnimplementedSoundSensorApiServer() {}
func (UnimplementedSoundSensorApiServer) testEmbeddedByValue()                        {}

// UnsafeSoundSensorApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoundSensorApiServer will
// result in compilation errors.
type UnsafeSoundSensorApiServer interface {
	mustEmbedUnimplementedSoundSensorApiServer()
}

func RegisterSoundSensorApiServer(s grpc.ServiceRegistrar, srv SoundSensorApiServer) {
	// If the following call pancis, it indicates UnimplementedSoundSensorApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SoundSensorApi_ServiceDesc, srv)
}

func _SoundSensorApi_GetSoundLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoundLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundSensorApiServer).GetSoundLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoundSensorApi_GetSoundLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundSensorApiServer).GetSoundLevel(ctx, req.(*GetSoundLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoundSensorApi_PullSoundLevel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullSoundLevelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SoundSensorApiServer).PullSoundLevel(m, &grpc.GenericServerStream[PullSoundLevelRequest, PullSoundLevelResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SoundSensorApi_PullSoundLevelServer = grpc.ServerStreamingServer[PullSoundLevelResponse]

// SoundSensorApi_ServiceDesc is the grpc.ServiceDesc for SoundSensorApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoundSensorApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.SoundSensorApi",
	HandlerType: (*SoundSensorApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSoundLevel",
			Handler:    _SoundSensorApi_GetSoundLevel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullSoundLevel",
			Handler:       _SoundSensorApi_PullSoundLevel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sound_sensor.proto",
}

const (
	SoundSensorInfo_DescribeSoundLevel_FullMethodName = "/smartcore.bos.SoundSensorInfo/DescribeSoundLevel"
)

// SoundSensorInfoClient is the client API for SoundSensorInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoundSensorInfoClient interface {
	DescribeSoundLevel(ctx context.Context, in *DescribeSoundLevelRequest, opts ...grpc.CallOption) (*SoundLevelSupport, error)
}

type soundSensorInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewSoundSensorInfoClient(cc grpc.ClientConnInterface) SoundSensorInfoClient {
	return &soundSensorInfoClient{cc}
}

func (c *soundSensorInfoClient) DescribeSoundLevel(ctx context.Context, in *DescribeSoundLevelRequest, opts ...grpc.CallOption) (*SoundLevelSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SoundLevelSupport)
	err := c.cc.Invoke(ctx, SoundSensorInfo_DescribeSoundLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoundSensorInfoServer is the server API for SoundSensorInfo service.
// All implementations must embed UnimplementedSoundSensorInfoServer
// for forward compatibility.
type SoundSensorInfoServer interface {
	DescribeSoundLevel(context.Context, *DescribeSoundLevelRequest) (*SoundLevelSupport, error)
	mustEmbedUnimplementedSoundSensorInfoServer()
}

// UnimplementedSoundSensorInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSoundSensorInfoServer struct{}

func (UnimplementedSoundSensorInfoServer) DescribeSoundLevel(context.Context, *DescribeSoundLevelRequest) (*SoundLevelSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSoundLevel not implemented")
}
func (UnimplementedSoundSensorInfoServer) mustEmbedUnimplementedSoundSensorInfoServer() {}
func (UnimplementedSoundSensorInfoServer) testEmbeddedByValue()                         {}

// UnsafeSoundSensorInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoundSensorInfoServer will
// result in compilation errors.
type UnsafeSoundSensorInfoServer interface {
	mustEmbedUnimplementedSoundSensorInfoServer()
}

func RegisterSoundSensorInfoServer(s grpc.ServiceRegistrar, srv SoundSensorInfoServer) {
	// If the following call pancis, it indicates UnimplementedSoundSensorInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SoundSensorInfo_ServiceDesc, srv)
}

func _SoundSensorInfo_DescribeSoundLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSoundLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundSensorInfoServer).DescribeSoundLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoundSensorInfo_DescribeSoundLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundSensorInfoServer).DescribeSoundLevel(ctx, req.(*DescribeSoundLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SoundSensorInfo_ServiceDesc is the grpc.ServiceDesc for SoundSensorInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoundSensorInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.SoundSensorInfo",
	HandlerType: (*SoundSensorInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeSoundLevel",
			Handler:    _SoundSensorInfo_DescribeSoundLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sound_sensor.proto",
}
