// Code generated by protoc-gen-router. DO NOT EDIT.

package gen

import (
	context "context"
	fmt "fmt"
	router "github.com/smart-core-os/sc-golang/pkg/router"
	grpc "google.golang.org/grpc"
)

// EnterLeaveHistoryRouter is a EnterLeaveHistoryServer that allows routing named requests to specific EnterLeaveHistoryClient
type EnterLeaveHistoryRouter struct {
	UnimplementedEnterLeaveHistoryServer

	router.Router
}

// compile time check that we implement the interface we need
var _ EnterLeaveHistoryServer = (*EnterLeaveHistoryRouter)(nil)

func NewEnterLeaveHistoryRouter(opts ...router.Option) *EnterLeaveHistoryRouter {
	return &EnterLeaveHistoryRouter{
		Router: router.NewRouter(opts...),
	}
}

// WithEnterLeaveHistoryClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithEnterLeaveHistoryClientFactory(f func(name string) (EnterLeaveHistoryClient, error)) router.Option {
	return router.WithFactory(func(name string) (any, error) {
		return f(name)
	})
}

func (r *EnterLeaveHistoryRouter) Register(server grpc.ServiceRegistrar) {
	RegisterEnterLeaveHistoryServer(server, r)
}

// Add extends Router.Add to panic if client is not of type EnterLeaveHistoryClient.
func (r *EnterLeaveHistoryRouter) Add(name string, client any) any {
	if !r.HoldsType(client) {
		panic(fmt.Sprintf("not correct type: client of type %T is not a EnterLeaveHistoryClient", client))
	}
	return r.Router.Add(name, client)
}

func (r *EnterLeaveHistoryRouter) HoldsType(client any) bool {
	_, ok := client.(EnterLeaveHistoryClient)
	return ok
}

func (r *EnterLeaveHistoryRouter) AddEnterLeaveHistoryClient(name string, client EnterLeaveHistoryClient) EnterLeaveHistoryClient {
	res := r.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(EnterLeaveHistoryClient)
}

func (r *EnterLeaveHistoryRouter) RemoveEnterLeaveHistoryClient(name string) EnterLeaveHistoryClient {
	res := r.Remove(name)
	if res == nil {
		return nil
	}
	return res.(EnterLeaveHistoryClient)
}

func (r *EnterLeaveHistoryRouter) GetEnterLeaveHistoryClient(name string) (EnterLeaveHistoryClient, error) {
	res, err := r.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(EnterLeaveHistoryClient), nil
}

func (r *EnterLeaveHistoryRouter) ListEnterLeaveSensorHistory(ctx context.Context, request *ListEnterLeaveHistoryRequest) (*ListEnterLeaveHistoryResponse, error) {
	child, err := r.GetEnterLeaveHistoryClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ListEnterLeaveSensorHistory(ctx, request)
}
