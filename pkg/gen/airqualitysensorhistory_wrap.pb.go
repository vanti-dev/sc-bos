// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// WrapAirQualitySensorHistory	adapts a AirQualitySensorHistoryServer	and presents it as a AirQualitySensorHistoryClient
func WrapAirQualitySensorHistory(server AirQualitySensorHistoryServer) AirQualitySensorHistoryClient {
	return &airQualitySensorHistoryWrapper{server}
}

type airQualitySensorHistoryWrapper struct {
	server AirQualitySensorHistoryServer
}

// compile time check that we implement the interface we need
var _ AirQualitySensorHistoryClient = (*airQualitySensorHistoryWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *airQualitySensorHistoryWrapper) UnwrapServer() AirQualitySensorHistoryServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *airQualitySensorHistoryWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *airQualitySensorHistoryWrapper) ListAirQualityHistory(ctx context.Context, req *ListAirQualityHistoryRequest, _ ...grpc.CallOption) (*ListAirQualityHistoryResponse, error) {
	return w.server.ListAirQualityHistory(ctx, req)
}
