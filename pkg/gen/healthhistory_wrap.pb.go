// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// WrapHealthHistory	adapts a HealthHistoryServer	and presents it as a HealthHistoryClient
func WrapHealthHistory(server HealthHistoryServer) *HealthHistoryWrapper {
	conn := wrap.ServerToClient(HealthHistory_ServiceDesc, server)
	client := NewHealthHistoryClient(conn)
	return &HealthHistoryWrapper{
		HealthHistoryClient: client,
		server:              server,
		conn:                conn,
		desc:                HealthHistory_ServiceDesc,
	}
}

type HealthHistoryWrapper struct {
	HealthHistoryClient

	server HealthHistoryServer
	conn   grpc.ClientConnInterface
	desc   grpc.ServiceDesc
}

// UnwrapServer returns the underlying server instance.
func (w *HealthHistoryWrapper) UnwrapServer() HealthHistoryServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *HealthHistoryWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *HealthHistoryWrapper) UnwrapService() (grpc.ClientConnInterface, grpc.ServiceDesc) {
	return w.conn, w.desc
}
