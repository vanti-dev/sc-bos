// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.1
// source: transport.proto

package gen

import (
	types "github.com/smart-core-os/sc-api/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransportState_Direction int32

const (
	TransportState_DIRECTION_UNKNOWN TransportState_Direction = 0
	TransportState_NO_DIRECTION      TransportState_Direction = 1
	TransportState_UP                TransportState_Direction = 2
	TransportState_DOWN              TransportState_Direction = 3
	// the transport is moving horizontally, with horizontal strictly meaning parallel to the plane of the horizon.
	TransportState_HORIZONTAL TransportState_Direction = 4
)

// Enum value maps for TransportState_Direction.
var (
	TransportState_Direction_name = map[int32]string{
		0: "DIRECTION_UNKNOWN",
		1: "NO_DIRECTION",
		2: "UP",
		3: "DOWN",
		4: "HORIZONTAL",
	}
	TransportState_Direction_value = map[string]int32{
		"DIRECTION_UNKNOWN": 0,
		"NO_DIRECTION":      1,
		"UP":                2,
		"DOWN":              3,
		"HORIZONTAL":        4,
	}
)

func (x TransportState_Direction) Enum() *TransportState_Direction {
	p := new(TransportState_Direction)
	*p = x
	return p
}

func (x TransportState_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportState_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[0].Descriptor()
}

func (TransportState_Direction) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[0]
}

func (x TransportState_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportState_Direction.Descriptor instead.
func (TransportState_Direction) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0, 0}
}

type TransportState_DoorStatus int32

const (
	TransportState_DOOR_STATUS_UNKNOWN TransportState_DoorStatus = 0
	TransportState_CLOSED              TransportState_DoorStatus = 1
	TransportState_OPEN                TransportState_DoorStatus = 2
	TransportState_OPENING             TransportState_DoorStatus = 3
	TransportState_CLOSING             TransportState_DoorStatus = 4
	// The door is safety locked.
	TransportState_SAFETY_LOCKED TransportState_DoorStatus = 5
	// The door remains in a position that is not fully open or closed.
	TransportState_LIMITED_OPENED TransportState_DoorStatus = 6
)

// Enum value maps for TransportState_DoorStatus.
var (
	TransportState_DoorStatus_name = map[int32]string{
		0: "DOOR_STATUS_UNKNOWN",
		1: "CLOSED",
		2: "OPEN",
		3: "OPENING",
		4: "CLOSING",
		5: "SAFETY_LOCKED",
		6: "LIMITED_OPENED",
	}
	TransportState_DoorStatus_value = map[string]int32{
		"DOOR_STATUS_UNKNOWN": 0,
		"CLOSED":              1,
		"OPEN":                2,
		"OPENING":             3,
		"CLOSING":             4,
		"SAFETY_LOCKED":       5,
		"LIMITED_OPENED":      6,
	}
)

func (x TransportState_DoorStatus) Enum() *TransportState_DoorStatus {
	p := new(TransportState_DoorStatus)
	*p = x
	return p
}

func (x TransportState_DoorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportState_DoorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[1].Descriptor()
}

func (TransportState_DoorStatus) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[1]
}

func (x TransportState_DoorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportState_DoorStatus.Descriptor instead.
func (TransportState_DoorStatus) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0, 1}
}

type TransportState_Mode int32

const (
	TransportState_MODE_UNKNOWN TransportState_Mode = 0
	TransportState_NORMAL       TransportState_Mode = 1
	// The transport is in service or inspection control.
	TransportState_SERVICE_CONTROL TransportState_Mode = 2
	// The transport is under a firefighter transport or firefighting transport mode of control. This usually happens
	// during a fire alarm when firemen are on the site.
	TransportState_FIREFIGHTER_CONTROL TransportState_Mode = 3
	TransportState_OUT_OF_SERVICE      TransportState_Mode = 4
	// The transport is being operated by emergency power and may be in limited operation.
	TransportState_EMERGENCY_POWER TransportState_Mode = 5
	// The transport will not respond to any instruction until the VIP has reached their destination.
	TransportState_VIP_CONTROL          TransportState_Mode = 6
	TransportState_EARTHQUAKE_OPERATION TransportState_Mode = 7
	TransportState_FIRE_OPERATION       TransportState_Mode = 8
	// The transport is being manually operated by an attendant.
	TransportState_ATTENDANT_CONTROL TransportState_Mode = 9
	// The transport is manually or automatically parked at a predefined floor and will not provide
	// any further service. This usually happens in a low traffic condition for the purpose of
	// energy saving.
	TransportState_PARKING TransportState_Mode = 10
	// The transport is returning to its home position, usually the lobby or ground floor.
	TransportState_HOMING TransportState_Mode = 11
	// Control of the transport is performed from a control panel in the control cabinet. The transport is not
	// available for normal operation.
	TransportState_CABINET_RECALL TransportState_Mode = 12
	// The transport is under an occupant evacuation mode of control. This usually happens during a
	// fire alarm when the transport is used for evacuation of occupants.
	TransportState_OCCUPANT_EVACUATION TransportState_Mode = 13
	// The transport is operational but is reserved for the transportation of goods only.
	TransportState_FREIGHT             TransportState_Mode = 14
	TransportState_FAILURE             TransportState_Mode = 15
	TransportState_REDUCED_SPEED       TransportState_Mode = 16
	TransportState_STORM_OPERATION     TransportState_Mode = 17
	TransportState_HIGH_WIND_OPERATION TransportState_Mode = 18
)

// Enum value maps for TransportState_Mode.
var (
	TransportState_Mode_name = map[int32]string{
		0:  "MODE_UNKNOWN",
		1:  "NORMAL",
		2:  "SERVICE_CONTROL",
		3:  "FIREFIGHTER_CONTROL",
		4:  "OUT_OF_SERVICE",
		5:  "EMERGENCY_POWER",
		6:  "VIP_CONTROL",
		7:  "EARTHQUAKE_OPERATION",
		8:  "FIRE_OPERATION",
		9:  "ATTENDANT_CONTROL",
		10: "PARKING",
		11: "HOMING",
		12: "CABINET_RECALL",
		13: "OCCUPANT_EVACUATION",
		14: "FREIGHT",
		15: "FAILURE",
		16: "REDUCED_SPEED",
		17: "STORM_OPERATION",
		18: "HIGH_WIND_OPERATION",
	}
	TransportState_Mode_value = map[string]int32{
		"MODE_UNKNOWN":         0,
		"NORMAL":               1,
		"SERVICE_CONTROL":      2,
		"FIREFIGHTER_CONTROL":  3,
		"OUT_OF_SERVICE":       4,
		"EMERGENCY_POWER":      5,
		"VIP_CONTROL":          6,
		"EARTHQUAKE_OPERATION": 7,
		"FIRE_OPERATION":       8,
		"ATTENDANT_CONTROL":    9,
		"PARKING":              10,
		"HOMING":               11,
		"CABINET_RECALL":       12,
		"OCCUPANT_EVACUATION":  13,
		"FREIGHT":              14,
		"FAILURE":              15,
		"REDUCED_SPEED":        16,
		"STORM_OPERATION":      17,
		"HIGH_WIND_OPERATION":  18,
	}
)

func (x TransportState_Mode) Enum() *TransportState_Mode {
	p := new(TransportState_Mode)
	*p = x
	return p
}

func (x TransportState_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportState_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[2].Descriptor()
}

func (TransportState_Mode) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[2]
}

func (x TransportState_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportState_Mode.Descriptor instead.
func (TransportState_Mode) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0, 2}
}

type TransportState_Fault int32

const (
	TransportState_FAULT_UNKNOWN              TransportState_Fault = 0
	TransportState_CONTROLLER_FAULT           TransportState_Fault = 1
	TransportState_DRIVE_AND_MOTOR_FAULT      TransportState_Fault = 2
	TransportState_MECHANICAL_COMPONENT_FAULT TransportState_Fault = 3
	TransportState_OVERSPEED_FAULT            TransportState_Fault = 4
	TransportState_POWER_SUPPLY_FAULT         TransportState_Fault = 5
	TransportState_SAFETY_DEVICE_FAULT        TransportState_Fault = 6
	TransportState_CONTROLLER_SUPPLY_FAULT    TransportState_Fault = 7
	TransportState_DRIVE_TEMPERATURE_EXCEEDED TransportState_Fault = 8
	// A comb plate safety switch is activated.
	TransportState_COMB_PLATE_FAULT           TransportState_Fault = 9
	TransportState_GENERAL_FAULT              TransportState_Fault = 10
	TransportState_DOOR_FAULT                 TransportState_Fault = 11
	TransportState_LEVELLING_FAULT            TransportState_Fault = 12
	TransportState_SAFETY_CIRCUIT_BREAK_FAULT TransportState_Fault = 13
	TransportState_FAIL_TO_START              TransportState_Fault = 14
	TransportState_ALARM_BUTTON               TransportState_Fault = 15
	TransportState_DOOR_NOT_CLOSING           TransportState_Fault = 16
)

// Enum value maps for TransportState_Fault.
var (
	TransportState_Fault_name = map[int32]string{
		0:  "FAULT_UNKNOWN",
		1:  "CONTROLLER_FAULT",
		2:  "DRIVE_AND_MOTOR_FAULT",
		3:  "MECHANICAL_COMPONENT_FAULT",
		4:  "OVERSPEED_FAULT",
		5:  "POWER_SUPPLY_FAULT",
		6:  "SAFETY_DEVICE_FAULT",
		7:  "CONTROLLER_SUPPLY_FAULT",
		8:  "DRIVE_TEMPERATURE_EXCEEDED",
		9:  "COMB_PLATE_FAULT",
		10: "GENERAL_FAULT",
		11: "DOOR_FAULT",
		12: "LEVELLING_FAULT",
		13: "SAFETY_CIRCUIT_BREAK_FAULT",
		14: "FAIL_TO_START",
		15: "ALARM_BUTTON",
		16: "DOOR_NOT_CLOSING",
	}
	TransportState_Fault_value = map[string]int32{
		"FAULT_UNKNOWN":              0,
		"CONTROLLER_FAULT":           1,
		"DRIVE_AND_MOTOR_FAULT":      2,
		"MECHANICAL_COMPONENT_FAULT": 3,
		"OVERSPEED_FAULT":            4,
		"POWER_SUPPLY_FAULT":         5,
		"SAFETY_DEVICE_FAULT":        6,
		"CONTROLLER_SUPPLY_FAULT":    7,
		"DRIVE_TEMPERATURE_EXCEEDED": 8,
		"COMB_PLATE_FAULT":           9,
		"GENERAL_FAULT":              10,
		"DOOR_FAULT":                 11,
		"LEVELLING_FAULT":            12,
		"SAFETY_CIRCUIT_BREAK_FAULT": 13,
		"FAIL_TO_START":              14,
		"ALARM_BUTTON":               15,
		"DOOR_NOT_CLOSING":           16,
	}
)

func (x TransportState_Fault) Enum() *TransportState_Fault {
	p := new(TransportState_Fault)
	*p = x
	return p
}

func (x TransportState_Fault) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportState_Fault) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[3].Descriptor()
}

func (TransportState_Fault) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[3]
}

func (x TransportState_Fault) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportState_Fault.Descriptor instead.
func (TransportState_Fault) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0, 3}
}

// TransportState describes the current state of the transport.
type TransportState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The current location of the transport.
	CurrentLocation string `protobuf:"bytes,1,opt,name=current_location,json=currentLocation,proto3" json:"current_location,omitempty"`
	// Optional. The next destination the transport will stop at.
	NextDestination string `protobuf:"bytes,2,opt,name=next_destination,json=nextDestination,proto3" json:"next_destination,omitempty"`
	// Optional. The direction the transport is moving.
	MovingDirection TransportState_Direction `protobuf:"varint,3,opt,name=moving_direction,json=movingDirection,proto3,enum=smartcore.bos.TransportState_Direction" json:"moving_direction,omitempty"`
	// Optional. The amount of load being carried. The units this is measured in is implementation specific. See TransportSupport
	Load float32 `protobuf:"fixed32,4,opt,name=load,proto3" json:"load,omitempty"`
	// Optional. The status of each the door(s) of the transport. For multiple doors, use TransportSupport to identify multiple doors.
	DoorStatus []TransportState_DoorStatus `protobuf:"varint,5,rep,packed,name=door_status,json=doorStatus,proto3,enum=smartcore.bos.TransportState_DoorStatus" json:"door_status,omitempty"`
	// Optional. The mode the transport is in.
	Mode TransportState_Mode `protobuf:"varint,6,opt,name=mode,proto3,enum=smartcore.bos.TransportState_Mode" json:"mode,omitempty"`
	// Optional. A list of active fault signals being reported.
	Faults []TransportState_Fault `protobuf:"varint,7,rep,packed,name=faults,proto3,enum=smartcore.bos.TransportState_Fault" json:"faults,omitempty"`
	// Optional. True if the passenger alarm has been activated.
	PassengerAlarm bool `protobuf:"varint,8,opt,name=passenger_alarm,json=passengerAlarm,proto3" json:"passenger_alarm,omitempty"`
	// Optional. The speed of the transport.
	Speed float32 `protobuf:"fixed32,9,opt,name=speed,proto3" json:"speed,omitempty"`
	// Optional. The destinations that are supported by the transport.
	SupportedDestinations []int32 `protobuf:"varint,10,rep,packed,name=supported_destinations,json=supportedDestinations,proto3" json:"supported_destinations,omitempty"`
	// Optional. True if the transport is currently active. Note this is different to mode,
	// as the transport can be in an active or idle state in different modes.
	Active bool `protobuf:"varint,11,opt,name=active,proto3" json:"active,omitempty"`
	// Optional. The actor describes an entity that is using the transport.
	Actor *Actor `protobuf:"bytes,12,opt,name=actor,proto3" json:"actor,omitempty"`
}

func (x *TransportState) Reset() {
	*x = TransportState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportState) ProtoMessage() {}

func (x *TransportState) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportState.ProtoReflect.Descriptor instead.
func (*TransportState) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0}
}

func (x *TransportState) GetCurrentLocation() string {
	if x != nil {
		return x.CurrentLocation
	}
	return ""
}

func (x *TransportState) GetNextDestination() string {
	if x != nil {
		return x.NextDestination
	}
	return ""
}

func (x *TransportState) GetMovingDirection() TransportState_Direction {
	if x != nil {
		return x.MovingDirection
	}
	return TransportState_DIRECTION_UNKNOWN
}

func (x *TransportState) GetLoad() float32 {
	if x != nil {
		return x.Load
	}
	return 0
}

func (x *TransportState) GetDoorStatus() []TransportState_DoorStatus {
	if x != nil {
		return x.DoorStatus
	}
	return nil
}

func (x *TransportState) GetMode() TransportState_Mode {
	if x != nil {
		return x.Mode
	}
	return TransportState_MODE_UNKNOWN
}

func (x *TransportState) GetFaults() []TransportState_Fault {
	if x != nil {
		return x.Faults
	}
	return nil
}

func (x *TransportState) GetPassengerAlarm() bool {
	if x != nil {
		return x.PassengerAlarm
	}
	return false
}

func (x *TransportState) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *TransportState) GetSupportedDestinations() []int32 {
	if x != nil {
		return x.SupportedDestinations
	}
	return nil
}

func (x *TransportState) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *TransportState) GetActor() *Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

type TransportSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How a named device supports read/write/pull apis
	ResourceSupport *types.ResourceSupport `protobuf:"bytes,1,opt,name=resource_support,json=resourceSupport,proto3" json:"resource_support,omitempty"`
	// The unit associated with the load value, e.g. kg, % of maximum load.
	LoadUnit string `protobuf:"bytes,2,opt,name=load_unit,json=loadUnit,proto3" json:"load_unit,omitempty"`
	// Describes the doors of the transport, if any.
	Doors []*TransportSupport_DoorInfo `protobuf:"bytes,3,rep,name=doors,proto3" json:"doors,omitempty"`
	// The maximum load the transport can carry, in kg, if known.
	// This can be used to calculate the current load weight if the load is reported as a percentage of the maximum load.
	MaxLoad int32 `protobuf:"varint,4,opt,name=max_load,json=maxLoad,proto3" json:"max_load,omitempty"`
	// The unit associated with the speed value, e.g. m/s, km/h.
	SpeedUnit string `protobuf:"bytes,5,opt,name=speed_unit,json=speedUnit,proto3" json:"speed_unit,omitempty"`
}

func (x *TransportSupport) Reset() {
	*x = TransportSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportSupport) ProtoMessage() {}

func (x *TransportSupport) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportSupport.ProtoReflect.Descriptor instead.
func (*TransportSupport) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{1}
}

func (x *TransportSupport) GetResourceSupport() *types.ResourceSupport {
	if x != nil {
		return x.ResourceSupport
	}
	return nil
}

func (x *TransportSupport) GetLoadUnit() string {
	if x != nil {
		return x.LoadUnit
	}
	return ""
}

func (x *TransportSupport) GetDoors() []*TransportSupport_DoorInfo {
	if x != nil {
		return x.Doors
	}
	return nil
}

func (x *TransportSupport) GetMaxLoad() int32 {
	if x != nil {
		return x.MaxLoad
	}
	return 0
}

func (x *TransportSupport) GetSpeedUnit() string {
	if x != nil {
		return x.SpeedUnit
	}
	return ""
}

// GetTransportStateRequest is used to request the current state of the transport.
type GetTransportStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetTransportStateRequest) Reset() {
	*x = GetTransportStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransportStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportStateRequest) ProtoMessage() {}

func (x *GetTransportStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportStateRequest.ProtoReflect.Descriptor instead.
func (*GetTransportStateRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{2}
}

func (x *GetTransportStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTransportStateRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type DescribeTransportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DescribeTransportRequest) Reset() {
	*x = DescribeTransportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTransportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTransportRequest) ProtoMessage() {}

func (x *DescribeTransportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTransportRequest.ProtoReflect.Descriptor instead.
func (*DescribeTransportRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeTransportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PullTransportStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	UpdatesOnly bool                   `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullTransportStateRequest) Reset() {
	*x = PullTransportStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullTransportStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullTransportStateRequest) ProtoMessage() {}

func (x *PullTransportStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullTransportStateRequest.ProtoReflect.Descriptor instead.
func (*PullTransportStateRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{4}
}

func (x *PullTransportStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullTransportStateRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullTransportStateRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullTransportStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*PullTransportStateResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullTransportStateResponse) Reset() {
	*x = PullTransportStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullTransportStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullTransportStateResponse) ProtoMessage() {}

func (x *PullTransportStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullTransportStateResponse.ProtoReflect.Descriptor instead.
func (*PullTransportStateResponse) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{5}
}

func (x *PullTransportStateResponse) GetChanges() []*PullTransportStateResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type TransportSupport_DoorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the door. This is used as the id of the door in door_status.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Description of the door; front, rear, etc.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// If the transport has multiple decks, this is the deck the door is on. 0 is the lowest deck.
	Deck int32 `protobuf:"varint,3,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *TransportSupport_DoorInfo) Reset() {
	*x = TransportSupport_DoorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportSupport_DoorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportSupport_DoorInfo) ProtoMessage() {}

func (x *TransportSupport_DoorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportSupport_DoorInfo.ProtoReflect.Descriptor instead.
func (*TransportSupport_DoorInfo) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TransportSupport_DoorInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransportSupport_DoorInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TransportSupport_DoorInfo) GetDeck() int32 {
	if x != nil {
		return x.Deck
	}
	return 0
}

type PullTransportStateResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ChangeTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	TransportState *TransportState        `protobuf:"bytes,3,opt,name=transport_state,json=transportState,proto3" json:"transport_state,omitempty"`
}

func (x *PullTransportStateResponse_Change) Reset() {
	*x = PullTransportStateResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullTransportStateResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullTransportStateResponse_Change) ProtoMessage() {}

func (x *PullTransportStateResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullTransportStateResponse_Change.ProtoReflect.Descriptor instead.
func (*PullTransportStateResponse_Change) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PullTransportStateResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullTransportStateResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullTransportStateResponse_Change) GetTransportState() *TransportState {
	if x != nil {
		return x.TransportState
	}
	return nil
}

var File_transport_proto protoreflect.FileDescriptor

var file_transport_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xad, 0x0c, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x6d,
	0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x49, 0x0a, 0x0b, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x64, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72,
	0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x56, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e,
	0x54, 0x41, 0x4c, 0x10, 0x04, 0x22, 0x7c, 0x0a, 0x0a, 0x44, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x45,
	0x44, 0x10, 0x06, 0x22, 0xf2, 0x02, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x49, 0x52, 0x45, 0x46, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41, 0x52, 0x54, 0x48, 0x51, 0x55, 0x41, 0x4b, 0x45,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e,
	0x46, 0x49, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x0b,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x42, 0x49, 0x4e, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x41,
	0x4c, 0x4c, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x54,
	0x5f, 0x45, 0x56, 0x41, 0x43, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x52, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x44, 0x55, 0x43,
	0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54,
	0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12,
	0x17, 0x0a, 0x13, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x22, 0x97, 0x03, 0x0a, 0x05, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x4c, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44,
	0x52, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x5f, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x50,
	0x45, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c,
	0x59, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x52, 0x49,
	0x56, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d,
	0x42, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x09, 0x12,
	0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x41, 0x46, 0x45, 0x54,
	0x59, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x49, 0x4c, 0x5f,
	0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c,
	0x41, 0x52, 0x4d, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10,
	0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x10, 0x22, 0xc8, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x3e, 0x0a, 0x05, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x64, 0x6f, 0x6f, 0x72,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x1a, 0x50, 0x0a, 0x08, 0x44,
	0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x22, 0x67, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x50, 0x75, 0x6c, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x8c, 0x02, 0x0a, 0x1a, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a,
	0xa1, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x32, 0xd8, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x70, 0x69, 0x12, 0x5b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x6b, 0x0a, 0x12, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x73,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x62, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x76, 0x61, 0x6e, 0x74, 0x69, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x63, 0x2d, 0x62,
	0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_transport_proto_rawDescOnce sync.Once
	file_transport_proto_rawDescData = file_transport_proto_rawDesc
)

func file_transport_proto_rawDescGZIP() []byte {
	file_transport_proto_rawDescOnce.Do(func() {
		file_transport_proto_rawDescData = protoimpl.X.CompressGZIP(file_transport_proto_rawDescData)
	})
	return file_transport_proto_rawDescData
}

var file_transport_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_transport_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_transport_proto_goTypes = []any{
	(TransportState_Direction)(0),             // 0: smartcore.bos.TransportState.Direction
	(TransportState_DoorStatus)(0),            // 1: smartcore.bos.TransportState.DoorStatus
	(TransportState_Mode)(0),                  // 2: smartcore.bos.TransportState.Mode
	(TransportState_Fault)(0),                 // 3: smartcore.bos.TransportState.Fault
	(*TransportState)(nil),                    // 4: smartcore.bos.TransportState
	(*TransportSupport)(nil),                  // 5: smartcore.bos.TransportSupport
	(*GetTransportStateRequest)(nil),          // 6: smartcore.bos.GetTransportStateRequest
	(*DescribeTransportRequest)(nil),          // 7: smartcore.bos.DescribeTransportRequest
	(*PullTransportStateRequest)(nil),         // 8: smartcore.bos.PullTransportStateRequest
	(*PullTransportStateResponse)(nil),        // 9: smartcore.bos.PullTransportStateResponse
	(*TransportSupport_DoorInfo)(nil),         // 10: smartcore.bos.TransportSupport.DoorInfo
	(*PullTransportStateResponse_Change)(nil), // 11: smartcore.bos.PullTransportStateResponse.Change
	(*Actor)(nil),                             // 12: smartcore.bos.Actor
	(*types.ResourceSupport)(nil),             // 13: smartcore.types.ResourceSupport
	(*fieldmaskpb.FieldMask)(nil),             // 14: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),             // 15: google.protobuf.Timestamp
}
var file_transport_proto_depIdxs = []int32{
	0,  // 0: smartcore.bos.TransportState.moving_direction:type_name -> smartcore.bos.TransportState.Direction
	1,  // 1: smartcore.bos.TransportState.door_status:type_name -> smartcore.bos.TransportState.DoorStatus
	2,  // 2: smartcore.bos.TransportState.mode:type_name -> smartcore.bos.TransportState.Mode
	3,  // 3: smartcore.bos.TransportState.faults:type_name -> smartcore.bos.TransportState.Fault
	12, // 4: smartcore.bos.TransportState.actor:type_name -> smartcore.bos.Actor
	13, // 5: smartcore.bos.TransportSupport.resource_support:type_name -> smartcore.types.ResourceSupport
	10, // 6: smartcore.bos.TransportSupport.doors:type_name -> smartcore.bos.TransportSupport.DoorInfo
	14, // 7: smartcore.bos.GetTransportStateRequest.read_mask:type_name -> google.protobuf.FieldMask
	14, // 8: smartcore.bos.PullTransportStateRequest.read_mask:type_name -> google.protobuf.FieldMask
	11, // 9: smartcore.bos.PullTransportStateResponse.changes:type_name -> smartcore.bos.PullTransportStateResponse.Change
	15, // 10: smartcore.bos.PullTransportStateResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	4,  // 11: smartcore.bos.PullTransportStateResponse.Change.transport_state:type_name -> smartcore.bos.TransportState
	6,  // 12: smartcore.bos.TransportApi.GetTransportState:input_type -> smartcore.bos.GetTransportStateRequest
	8,  // 13: smartcore.bos.TransportApi.PullTransportState:input_type -> smartcore.bos.PullTransportStateRequest
	7,  // 14: smartcore.bos.TransportInfo.DescribeTransportState:input_type -> smartcore.bos.DescribeTransportRequest
	4,  // 15: smartcore.bos.TransportApi.GetTransportState:output_type -> smartcore.bos.TransportState
	9,  // 16: smartcore.bos.TransportApi.PullTransportState:output_type -> smartcore.bos.PullTransportStateResponse
	5,  // 17: smartcore.bos.TransportInfo.DescribeTransportState:output_type -> smartcore.bos.TransportSupport
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_transport_proto_init() }
func file_transport_proto_init() {
	if File_transport_proto != nil {
		return
	}
	file_actor_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_transport_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TransportState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TransportSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransportStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeTransportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PullTransportStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PullTransportStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TransportSupport_DoorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PullTransportStateResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transport_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_transport_proto_goTypes,
		DependencyIndexes: file_transport_proto_depIdxs,
		EnumInfos:         file_transport_proto_enumTypes,
		MessageInfos:      file_transport_proto_msgTypes,
	}.Build()
	File_transport_proto = out.File
	file_transport_proto_rawDesc = nil
	file_transport_proto_goTypes = nil
	file_transport_proto_depIdxs = nil
}
