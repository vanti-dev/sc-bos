// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.1
// source: transport.proto

package gen

import (
	types "github.com/smart-core-os/sc-api/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Transport_Direction int32

const (
	Transport_DIRECTION_UNSPECIFIED Transport_Direction = 0
	// i.e. the device is stationary and not moving in any direction.
	Transport_NO_DIRECTION  Transport_Direction = 1
	Transport_UP            Transport_Direction = 2
	Transport_DOWN          Transport_Direction = 3
	Transport_IN            Transport_Direction = 4
	Transport_OUT           Transport_Direction = 5
	Transport_CLOCKWISE     Transport_Direction = 6
	Transport_ANTICLOCKWISE Transport_Direction = 7
	Transport_FORWARD       Transport_Direction = 8
	Transport_BACKWARD      Transport_Direction = 9
	Transport_EAST          Transport_Direction = 10
	Transport_WEST          Transport_Direction = 11
	Transport_NORTH         Transport_Direction = 12
	Transport_SOUTH         Transport_Direction = 13
	// Left and right are relative to the intended forwards direction of the transport.
	// If this is not known use SIDEWAYS.
	Transport_LEFT     Transport_Direction = 14
	Transport_RIGHT    Transport_Direction = 15
	Transport_SIDEWAYS Transport_Direction = 16
)

// Enum value maps for Transport_Direction.
var (
	Transport_Direction_name = map[int32]string{
		0:  "DIRECTION_UNSPECIFIED",
		1:  "NO_DIRECTION",
		2:  "UP",
		3:  "DOWN",
		4:  "IN",
		5:  "OUT",
		6:  "CLOCKWISE",
		7:  "ANTICLOCKWISE",
		8:  "FORWARD",
		9:  "BACKWARD",
		10: "EAST",
		11: "WEST",
		12: "NORTH",
		13: "SOUTH",
		14: "LEFT",
		15: "RIGHT",
		16: "SIDEWAYS",
	}
	Transport_Direction_value = map[string]int32{
		"DIRECTION_UNSPECIFIED": 0,
		"NO_DIRECTION":          1,
		"UP":                    2,
		"DOWN":                  3,
		"IN":                    4,
		"OUT":                   5,
		"CLOCKWISE":             6,
		"ANTICLOCKWISE":         7,
		"FORWARD":               8,
		"BACKWARD":              9,
		"EAST":                  10,
		"WEST":                  11,
		"NORTH":                 12,
		"SOUTH":                 13,
		"LEFT":                  14,
		"RIGHT":                 15,
		"SIDEWAYS":              16,
	}
)

func (x Transport_Direction) Enum() *Transport_Direction {
	p := new(Transport_Direction)
	*p = x
	return p
}

func (x Transport_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transport_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[0].Descriptor()
}

func (Transport_Direction) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[0]
}

func (x Transport_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transport_Direction.Descriptor instead.
func (Transport_Direction) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0, 0}
}

type Transport_DoorStatus int32

const (
	Transport_DOOR_STATUS_UNSPECIFIED Transport_DoorStatus = 0
	Transport_CLOSED                  Transport_DoorStatus = 1
	Transport_OPEN                    Transport_DoorStatus = 2
	Transport_OPENING                 Transport_DoorStatus = 3
	Transport_CLOSING                 Transport_DoorStatus = 4
	// The door is safety locked.
	Transport_SAFETY_LOCKED Transport_DoorStatus = 5
	// The door remains in a position that is not fully open or closed.
	Transport_LIMITED_OPENED Transport_DoorStatus = 6
)

// Enum value maps for Transport_DoorStatus.
var (
	Transport_DoorStatus_name = map[int32]string{
		0: "DOOR_STATUS_UNSPECIFIED",
		1: "CLOSED",
		2: "OPEN",
		3: "OPENING",
		4: "CLOSING",
		5: "SAFETY_LOCKED",
		6: "LIMITED_OPENED",
	}
	Transport_DoorStatus_value = map[string]int32{
		"DOOR_STATUS_UNSPECIFIED": 0,
		"CLOSED":                  1,
		"OPEN":                    2,
		"OPENING":                 3,
		"CLOSING":                 4,
		"SAFETY_LOCKED":           5,
		"LIMITED_OPENED":          6,
	}
)

func (x Transport_DoorStatus) Enum() *Transport_DoorStatus {
	p := new(Transport_DoorStatus)
	*p = x
	return p
}

func (x Transport_DoorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transport_DoorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[1].Descriptor()
}

func (Transport_DoorStatus) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[1]
}

func (x Transport_DoorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transport_DoorStatus.Descriptor instead.
func (Transport_DoorStatus) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0, 1}
}

type Transport_Mode int32

const (
	Transport_MODE_UNSPECIFIED Transport_Mode = 0
	Transport_NORMAL           Transport_Mode = 1
	// The transport is in service or inspection control.
	Transport_SERVICE_CONTROL Transport_Mode = 2
	// The transport is under a firefighter transport or firefighting transport mode of control. This usually happens
	// during a fire alarm when firemen are on the site.
	Transport_FIREFIGHTER_CONTROL Transport_Mode = 3
	Transport_OUT_OF_SERVICE      Transport_Mode = 4
	// The transport is being operated by emergency power and may be in limited operation.
	Transport_EMERGENCY_POWER Transport_Mode = 5
	// The transport will not respond to any instruction until the VIP has reached their destination.
	Transport_VIP_CONTROL          Transport_Mode = 6
	Transport_EARTHQUAKE_OPERATION Transport_Mode = 7
	Transport_FIRE_OPERATION       Transport_Mode = 8
	// The transport is being manually operated by an attendant.
	Transport_ATTENDANT_CONTROL Transport_Mode = 9
	// The transport is manually or automatically parked at a predefined floor and will not provide
	// any further service. This usually happens in a low traffic condition for the purpose of
	// energy saving.
	Transport_PARKING Transport_Mode = 10
	// The transport is returning to its home position, usually the lobby or ground floor.
	Transport_HOMING Transport_Mode = 11
	// Control of the transport is performed from a control panel in the control cabinet. The transport is not
	// available for normal operation.
	Transport_CABINET_RECALL Transport_Mode = 12
	// The transport is under an occupant evacuation mode of control. This usually happens during a
	// fire alarm when the transport is used for evacuation of occupants.
	Transport_OCCUPANT_EVACUATION Transport_Mode = 13
	// The transport is operational but is reserved for the transportation of goods only.
	Transport_FREIGHT             Transport_Mode = 14
	Transport_FAILURE             Transport_Mode = 15
	Transport_REDUCED_SPEED       Transport_Mode = 16
	Transport_STORM_OPERATION     Transport_Mode = 17
	Transport_HIGH_WIND_OPERATION Transport_Mode = 18
)

// Enum value maps for Transport_Mode.
var (
	Transport_Mode_name = map[int32]string{
		0:  "MODE_UNSPECIFIED",
		1:  "NORMAL",
		2:  "SERVICE_CONTROL",
		3:  "FIREFIGHTER_CONTROL",
		4:  "OUT_OF_SERVICE",
		5:  "EMERGENCY_POWER",
		6:  "VIP_CONTROL",
		7:  "EARTHQUAKE_OPERATION",
		8:  "FIRE_OPERATION",
		9:  "ATTENDANT_CONTROL",
		10: "PARKING",
		11: "HOMING",
		12: "CABINET_RECALL",
		13: "OCCUPANT_EVACUATION",
		14: "FREIGHT",
		15: "FAILURE",
		16: "REDUCED_SPEED",
		17: "STORM_OPERATION",
		18: "HIGH_WIND_OPERATION",
	}
	Transport_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED":     0,
		"NORMAL":               1,
		"SERVICE_CONTROL":      2,
		"FIREFIGHTER_CONTROL":  3,
		"OUT_OF_SERVICE":       4,
		"EMERGENCY_POWER":      5,
		"VIP_CONTROL":          6,
		"EARTHQUAKE_OPERATION": 7,
		"FIRE_OPERATION":       8,
		"ATTENDANT_CONTROL":    9,
		"PARKING":              10,
		"HOMING":               11,
		"CABINET_RECALL":       12,
		"OCCUPANT_EVACUATION":  13,
		"FREIGHT":              14,
		"FAILURE":              15,
		"REDUCED_SPEED":        16,
		"STORM_OPERATION":      17,
		"HIGH_WIND_OPERATION":  18,
	}
)

func (x Transport_Mode) Enum() *Transport_Mode {
	p := new(Transport_Mode)
	*p = x
	return p
}

func (x Transport_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transport_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[2].Descriptor()
}

func (Transport_Mode) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[2]
}

func (x Transport_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transport_Mode.Descriptor instead.
func (Transport_Mode) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0, 2}
}

type Transport_Fault int32

const (
	Transport_FAULT_UNSPECIFIED          Transport_Fault = 0
	Transport_CONTROLLER_FAULT           Transport_Fault = 1
	Transport_DRIVE_AND_MOTOR_FAULT      Transport_Fault = 2
	Transport_MECHANICAL_COMPONENT_FAULT Transport_Fault = 3
	Transport_OVERSPEED_FAULT            Transport_Fault = 4
	Transport_POWER_SUPPLY_FAULT         Transport_Fault = 5
	Transport_SAFETY_DEVICE_FAULT        Transport_Fault = 6
	Transport_CONTROLLER_SUPPLY_FAULT    Transport_Fault = 7
	Transport_DRIVE_TEMPERATURE_EXCEEDED Transport_Fault = 8
	// A comb plate safety switch is activated.
	Transport_COMB_PLATE_FAULT           Transport_Fault = 9
	Transport_GENERAL_FAULT              Transport_Fault = 10
	Transport_DOOR_FAULT                 Transport_Fault = 11
	Transport_LEVELLING_FAULT            Transport_Fault = 12
	Transport_SAFETY_CIRCUIT_BREAK_FAULT Transport_Fault = 13
	Transport_FAIL_TO_START              Transport_Fault = 14
	Transport_ALARM_BUTTON               Transport_Fault = 15
	Transport_DOOR_NOT_CLOSING           Transport_Fault = 16
)

// Enum value maps for Transport_Fault.
var (
	Transport_Fault_name = map[int32]string{
		0:  "FAULT_UNSPECIFIED",
		1:  "CONTROLLER_FAULT",
		2:  "DRIVE_AND_MOTOR_FAULT",
		3:  "MECHANICAL_COMPONENT_FAULT",
		4:  "OVERSPEED_FAULT",
		5:  "POWER_SUPPLY_FAULT",
		6:  "SAFETY_DEVICE_FAULT",
		7:  "CONTROLLER_SUPPLY_FAULT",
		8:  "DRIVE_TEMPERATURE_EXCEEDED",
		9:  "COMB_PLATE_FAULT",
		10: "GENERAL_FAULT",
		11: "DOOR_FAULT",
		12: "LEVELLING_FAULT",
		13: "SAFETY_CIRCUIT_BREAK_FAULT",
		14: "FAIL_TO_START",
		15: "ALARM_BUTTON",
		16: "DOOR_NOT_CLOSING",
	}
	Transport_Fault_value = map[string]int32{
		"FAULT_UNSPECIFIED":          0,
		"CONTROLLER_FAULT":           1,
		"DRIVE_AND_MOTOR_FAULT":      2,
		"MECHANICAL_COMPONENT_FAULT": 3,
		"OVERSPEED_FAULT":            4,
		"POWER_SUPPLY_FAULT":         5,
		"SAFETY_DEVICE_FAULT":        6,
		"CONTROLLER_SUPPLY_FAULT":    7,
		"DRIVE_TEMPERATURE_EXCEEDED": 8,
		"COMB_PLATE_FAULT":           9,
		"GENERAL_FAULT":              10,
		"DOOR_FAULT":                 11,
		"LEVELLING_FAULT":            12,
		"SAFETY_CIRCUIT_BREAK_FAULT": 13,
		"FAIL_TO_START":              14,
		"ALARM_BUTTON":               15,
		"DOOR_NOT_CLOSING":           16,
	}
)

func (x Transport_Fault) Enum() *Transport_Fault {
	p := new(Transport_Fault)
	*p = x
	return p
}

func (x Transport_Fault) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transport_Fault) Descriptor() protoreflect.EnumDescriptor {
	return file_transport_proto_enumTypes[3].Descriptor()
}

func (Transport_Fault) Type() protoreflect.EnumType {
	return &file_transport_proto_enumTypes[3]
}

func (x Transport_Fault) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transport_Fault.Descriptor instead.
func (Transport_Fault) EnumDescriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0, 3}
}

// Transport describes the current state of the transport.
type Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current location of the transport.
	CurrentLocation *Transport_Location `protobuf:"bytes,1,opt,name=current_location,json=currentLocation,proto3" json:"current_location,omitempty"`
	// Optional. The next destination(s) the transport will stop at.
	NextDestinations []*Transport_Location `protobuf:"bytes,2,rep,name=next_destinations,json=nextDestinations,proto3" json:"next_destinations,omitempty"`
	// Optional. The primary direction the transport is moving. An escalator technically moves up/down and forwards,
	// but the primary intention is to transport up/down.
	MovingDirection Transport_Direction `protobuf:"varint,3,opt,name=moving_direction,json=movingDirection,proto3,enum=smartcore.bos.Transport_Direction" json:"moving_direction,omitempty"`
	// Optional. The total amount of load being carried.
	// The units this is measured in is implementation specific. See TransportSupport
	Load float32 `protobuf:"fixed32,4,opt,name=load,proto3" json:"load,omitempty"`
	// Optional. The status of each the door(s) of the transport. For multiple doors, use TransportSupport to identify multiple doors.
	DoorStatus []Transport_DoorStatus `protobuf:"varint,5,rep,packed,name=door_status,json=doorStatus,proto3,enum=smartcore.bos.Transport_DoorStatus" json:"door_status,omitempty"`
	// Optional. The mode the transport is in.
	Mode Transport_Mode `protobuf:"varint,6,opt,name=mode,proto3,enum=smartcore.bos.Transport_Mode" json:"mode,omitempty"`
	// Optional. A list of active fault signals being reported.
	Faults []Transport_Fault `protobuf:"varint,7,rep,packed,name=faults,proto3,enum=smartcore.bos.Transport_Fault" json:"faults,omitempty"`
	// Optional. True if the passenger alarm has been activated.
	PassengerAlarm bool `protobuf:"varint,8,opt,name=passenger_alarm,json=passengerAlarm,proto3" json:"passenger_alarm,omitempty"`
	// Optional. The speed of the transport.
	Speed float32 `protobuf:"fixed32,9,opt,name=speed,proto3" json:"speed,omitempty"`
	// Optional. The destinations that are supported by the transport.
	SupportedDestinations []*Transport_Location `protobuf:"bytes,10,rep,name=supported_destinations,json=supportedDestinations,proto3" json:"supported_destinations,omitempty"`
	// Optional. True if the transport is currently active. Note this is different to mode,
	// as the transport can be in an active or idle state in different modes.
	Active bool `protobuf:"varint,11,opt,name=active,proto3" json:"active,omitempty"`
	// Optional. Payloads describes the entities that are currently being transported.
	Payloads []*Transport_Payload `protobuf:"bytes,12,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (x *Transport) Reset() {
	*x = Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transport) ProtoMessage() {}

func (x *Transport) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transport.ProtoReflect.Descriptor instead.
func (*Transport) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0}
}

func (x *Transport) GetCurrentLocation() *Transport_Location {
	if x != nil {
		return x.CurrentLocation
	}
	return nil
}

func (x *Transport) GetNextDestinations() []*Transport_Location {
	if x != nil {
		return x.NextDestinations
	}
	return nil
}

func (x *Transport) GetMovingDirection() Transport_Direction {
	if x != nil {
		return x.MovingDirection
	}
	return Transport_DIRECTION_UNSPECIFIED
}

func (x *Transport) GetLoad() float32 {
	if x != nil {
		return x.Load
	}
	return 0
}

func (x *Transport) GetDoorStatus() []Transport_DoorStatus {
	if x != nil {
		return x.DoorStatus
	}
	return nil
}

func (x *Transport) GetMode() Transport_Mode {
	if x != nil {
		return x.Mode
	}
	return Transport_MODE_UNSPECIFIED
}

func (x *Transport) GetFaults() []Transport_Fault {
	if x != nil {
		return x.Faults
	}
	return nil
}

func (x *Transport) GetPassengerAlarm() bool {
	if x != nil {
		return x.PassengerAlarm
	}
	return false
}

func (x *Transport) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Transport) GetSupportedDestinations() []*Transport_Location {
	if x != nil {
		return x.SupportedDestinations
	}
	return nil
}

func (x *Transport) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Transport) GetPayloads() []*Transport_Payload {
	if x != nil {
		return x.Payloads
	}
	return nil
}

type TransportSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How a named device supports read/write/pull apis
	ResourceSupport *types.ResourceSupport `protobuf:"bytes,1,opt,name=resource_support,json=resourceSupport,proto3" json:"resource_support,omitempty"`
	// The unit associated with the load value, e.g. kg, % of maximum load.
	LoadUnit string `protobuf:"bytes,2,opt,name=load_unit,json=loadUnit,proto3" json:"load_unit,omitempty"`
	// Describes the doors of the transport, if any.
	Doors []*TransportSupport_DoorInfo `protobuf:"bytes,3,rep,name=doors,proto3" json:"doors,omitempty"`
	// The maximum load the transport can carry, in kg, if known.
	// This can be used to calculate the current load weight if the load is reported as a percentage of the maximum load.
	MaxLoad int32 `protobuf:"varint,4,opt,name=max_load,json=maxLoad,proto3" json:"max_load,omitempty"`
	// The unit associated with the speed value, e.g. m/s, km/h.
	SpeedUnit string `protobuf:"bytes,5,opt,name=speed_unit,json=speedUnit,proto3" json:"speed_unit,omitempty"`
}

func (x *TransportSupport) Reset() {
	*x = TransportSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportSupport) ProtoMessage() {}

func (x *TransportSupport) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportSupport.ProtoReflect.Descriptor instead.
func (*TransportSupport) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{1}
}

func (x *TransportSupport) GetResourceSupport() *types.ResourceSupport {
	if x != nil {
		return x.ResourceSupport
	}
	return nil
}

func (x *TransportSupport) GetLoadUnit() string {
	if x != nil {
		return x.LoadUnit
	}
	return ""
}

func (x *TransportSupport) GetDoors() []*TransportSupport_DoorInfo {
	if x != nil {
		return x.Doors
	}
	return nil
}

func (x *TransportSupport) GetMaxLoad() int32 {
	if x != nil {
		return x.MaxLoad
	}
	return 0
}

func (x *TransportSupport) GetSpeedUnit() string {
	if x != nil {
		return x.SpeedUnit
	}
	return ""
}

// GetTransportRequest is used to request the current state of the transport.
type GetTransportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetTransportRequest) Reset() {
	*x = GetTransportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransportRequest) ProtoMessage() {}

func (x *GetTransportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransportRequest.ProtoReflect.Descriptor instead.
func (*GetTransportRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{2}
}

func (x *GetTransportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTransportRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type DescribeTransportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DescribeTransportRequest) Reset() {
	*x = DescribeTransportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTransportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTransportRequest) ProtoMessage() {}

func (x *DescribeTransportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTransportRequest.ProtoReflect.Descriptor instead.
func (*DescribeTransportRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeTransportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PullTransportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	UpdatesOnly bool                   `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullTransportRequest) Reset() {
	*x = PullTransportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullTransportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullTransportRequest) ProtoMessage() {}

func (x *PullTransportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullTransportRequest.ProtoReflect.Descriptor instead.
func (*PullTransportRequest) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{4}
}

func (x *PullTransportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullTransportRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullTransportRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullTransportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*PullTransportResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullTransportResponse) Reset() {
	*x = PullTransportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullTransportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullTransportResponse) ProtoMessage() {}

func (x *PullTransportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullTransportResponse.ProtoReflect.Descriptor instead.
func (*PullTransportResponse) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{5}
}

func (x *PullTransportResponse) GetChanges() []*PullTransportResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

// Location describes a place that the transport can stop at.
type Transport_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the location.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the location. e.g. 'Lobby', 'Floor 1', 'Car Park'.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Description of the location.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. The floor number of the location.
	Floor int32 `protobuf:"varint,4,opt,name=floor,proto3" json:"floor,omitempty"`
	// Optional. The attributes of the location.
	Attributes []string `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Transport_Location) Reset() {
	*x = Transport_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transport_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transport_Location) ProtoMessage() {}

func (x *Transport_Location) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transport_Location.ProtoReflect.Descriptor instead.
func (*Transport_Location) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Transport_Location) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transport_Location) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transport_Location) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Transport_Location) GetFloor() int32 {
	if x != nil {
		return x.Floor
	}
	return 0
}

func (x *Transport_Location) GetAttributes() []string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Journey describes the journey of the transport or payload.
// It will have a source and one or more destinations.
type Transport_Journey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The starting point of the journey.
	Start *Transport_Location `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// The destinations of the journey.
	Destinations []*Transport_Location `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// Optional. The reason for the journey.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Transport_Journey) Reset() {
	*x = Transport_Journey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transport_Journey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transport_Journey) ProtoMessage() {}

func (x *Transport_Journey) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transport_Journey.ProtoReflect.Descriptor instead.
func (*Transport_Journey) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Transport_Journey) GetStart() *Transport_Location {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Transport_Journey) GetDestinations() []*Transport_Location {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *Transport_Journey) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Transport_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the payload.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The description of the payload.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The journey the payload is intending to take.
	IntendedJourney *Transport_Journey `protobuf:"bytes,3,opt,name=intended_journey,json=intendedJourney,proto3" json:"intended_journey,omitempty"`
	// The actual journey the payload has taken.
	ActualJourney *Transport_Journey `protobuf:"bytes,4,opt,name=actual_journey,json=actualJourney,proto3" json:"actual_journey,omitempty"`
}

func (x *Transport_Payload) Reset() {
	*x = Transport_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transport_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transport_Payload) ProtoMessage() {}

func (x *Transport_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transport_Payload.ProtoReflect.Descriptor instead.
func (*Transport_Payload) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Transport_Payload) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transport_Payload) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Transport_Payload) GetIntendedJourney() *Transport_Journey {
	if x != nil {
		return x.IntendedJourney
	}
	return nil
}

func (x *Transport_Payload) GetActualJourney() *Transport_Journey {
	if x != nil {
		return x.ActualJourney
	}
	return nil
}

type TransportSupport_DoorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the door. This is used as the id of the door in door_status.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Description of the door; front, rear, etc.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// If the transport has multiple decks, this is the deck the door is on. 0 is the lowest deck.
	Deck int32 `protobuf:"varint,3,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *TransportSupport_DoorInfo) Reset() {
	*x = TransportSupport_DoorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportSupport_DoorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportSupport_DoorInfo) ProtoMessage() {}

func (x *TransportSupport_DoorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportSupport_DoorInfo.ProtoReflect.Descriptor instead.
func (*TransportSupport_DoorInfo) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TransportSupport_DoorInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransportSupport_DoorInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TransportSupport_DoorInfo) GetDeck() int32 {
	if x != nil {
		return x.Deck
	}
	return 0
}

type PullTransportResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ChangeTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	TransportState *Transport             `protobuf:"bytes,3,opt,name=transport_state,json=transportState,proto3" json:"transport_state,omitempty"`
}

func (x *PullTransportResponse_Change) Reset() {
	*x = PullTransportResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullTransportResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullTransportResponse_Change) ProtoMessage() {}

func (x *PullTransportResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_transport_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullTransportResponse_Change.ProtoReflect.Descriptor instead.
func (*PullTransportResponse_Change) Descriptor() ([]byte, []int) {
	return file_transport_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PullTransportResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullTransportResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullTransportResponse_Change) GetTransportState() *Transport {
	if x != nil {
		return x.TransportState
	}
	return nil
}

var File_transport_proto protoreflect.FileDescriptor

var file_transport_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x12, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4e, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4d, 0x0a, 0x10, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a,
	0x64, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67,
	0x65, 0x72, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x1a, 0x86, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xa1, 0x01,
	0x0a, 0x07, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x1a, 0xd1, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x0e,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x22, 0xe5, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55,
	0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x57, 0x49, 0x53, 0x45,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x57,
	0x49, 0x53, 0x45, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x10, 0x09,
	0x12, 0x08, 0x0a, 0x04, 0x45, 0x41, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45,
	0x53, 0x54, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x52, 0x54, 0x48, 0x10, 0x0c, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45,
	0x46, 0x54, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0f, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44, 0x45, 0x57, 0x41, 0x59, 0x53, 0x10, 0x10, 0x22, 0x80, 0x01,
	0x0a, 0x0a, 0x44, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x41, 0x46,
	0x45, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x06,
	0x22, 0xf6, 0x02, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x52, 0x45, 0x46, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x55, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41, 0x52, 0x54, 0x48, 0x51, 0x55, 0x41, 0x4b,
	0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x08, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x41, 0x4e, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x4b,
	0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10,
	0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x42, 0x49, 0x4e, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x41, 0x4c, 0x4c, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e,
	0x54, 0x5f, 0x45, 0x56, 0x41, 0x43, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x52, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x44, 0x55,
	0x43, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11,
	0x12, 0x17, 0x0a, 0x13, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x22, 0x9b, 0x03, 0x0a, 0x05, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x4f,
	0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4d,
	0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f,
	0x56, 0x45, 0x52, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59,
	0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x41, 0x46, 0x45,
	0x54, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x06, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x07, 0x12, 0x1e,
	0x0a, 0x1a, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x08, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x42, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x4f, 0x52, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x42,
	0x52, 0x45, 0x41, 0x4b, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d,
	0x46, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0e, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10,
	0x0f, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x22, 0xc8, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x61,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74,
	0x1a, 0x50, 0x0a, 0x08, 0x44, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x65,
	0x63, 0x6b, 0x22, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x2e, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x6c, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0xfd, 0x01, 0x0a, 0x15, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x1a, 0x9c, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x32,
	0xba, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x69,
	0x12, 0x4c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5c,
	0x0a, 0x0d, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x23, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x6e, 0x0a, 0x0d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a,
	0x11, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x25, 0x5a, 0x23,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6e, 0x74, 0x69,
	0x2d, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x63, 0x2d, 0x62, 0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transport_proto_rawDescOnce sync.Once
	file_transport_proto_rawDescData = file_transport_proto_rawDesc
)

func file_transport_proto_rawDescGZIP() []byte {
	file_transport_proto_rawDescOnce.Do(func() {
		file_transport_proto_rawDescData = protoimpl.X.CompressGZIP(file_transport_proto_rawDescData)
	})
	return file_transport_proto_rawDescData
}

var file_transport_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_transport_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_transport_proto_goTypes = []any{
	(Transport_Direction)(0),             // 0: smartcore.bos.Transport.Direction
	(Transport_DoorStatus)(0),            // 1: smartcore.bos.Transport.DoorStatus
	(Transport_Mode)(0),                  // 2: smartcore.bos.Transport.Mode
	(Transport_Fault)(0),                 // 3: smartcore.bos.Transport.Fault
	(*Transport)(nil),                    // 4: smartcore.bos.Transport
	(*TransportSupport)(nil),             // 5: smartcore.bos.TransportSupport
	(*GetTransportRequest)(nil),          // 6: smartcore.bos.GetTransportRequest
	(*DescribeTransportRequest)(nil),     // 7: smartcore.bos.DescribeTransportRequest
	(*PullTransportRequest)(nil),         // 8: smartcore.bos.PullTransportRequest
	(*PullTransportResponse)(nil),        // 9: smartcore.bos.PullTransportResponse
	(*Transport_Location)(nil),           // 10: smartcore.bos.Transport.Location
	(*Transport_Journey)(nil),            // 11: smartcore.bos.Transport.Journey
	(*Transport_Payload)(nil),            // 12: smartcore.bos.Transport.Payload
	(*TransportSupport_DoorInfo)(nil),    // 13: smartcore.bos.TransportSupport.DoorInfo
	(*PullTransportResponse_Change)(nil), // 14: smartcore.bos.PullTransportResponse.Change
	(*types.ResourceSupport)(nil),        // 15: smartcore.types.ResourceSupport
	(*fieldmaskpb.FieldMask)(nil),        // 16: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),        // 17: google.protobuf.Timestamp
}
var file_transport_proto_depIdxs = []int32{
	10, // 0: smartcore.bos.Transport.current_location:type_name -> smartcore.bos.Transport.Location
	10, // 1: smartcore.bos.Transport.next_destinations:type_name -> smartcore.bos.Transport.Location
	0,  // 2: smartcore.bos.Transport.moving_direction:type_name -> smartcore.bos.Transport.Direction
	1,  // 3: smartcore.bos.Transport.door_status:type_name -> smartcore.bos.Transport.DoorStatus
	2,  // 4: smartcore.bos.Transport.mode:type_name -> smartcore.bos.Transport.Mode
	3,  // 5: smartcore.bos.Transport.faults:type_name -> smartcore.bos.Transport.Fault
	10, // 6: smartcore.bos.Transport.supported_destinations:type_name -> smartcore.bos.Transport.Location
	12, // 7: smartcore.bos.Transport.payloads:type_name -> smartcore.bos.Transport.Payload
	15, // 8: smartcore.bos.TransportSupport.resource_support:type_name -> smartcore.types.ResourceSupport
	13, // 9: smartcore.bos.TransportSupport.doors:type_name -> smartcore.bos.TransportSupport.DoorInfo
	16, // 10: smartcore.bos.GetTransportRequest.read_mask:type_name -> google.protobuf.FieldMask
	16, // 11: smartcore.bos.PullTransportRequest.read_mask:type_name -> google.protobuf.FieldMask
	14, // 12: smartcore.bos.PullTransportResponse.changes:type_name -> smartcore.bos.PullTransportResponse.Change
	10, // 13: smartcore.bos.Transport.Journey.start:type_name -> smartcore.bos.Transport.Location
	10, // 14: smartcore.bos.Transport.Journey.destinations:type_name -> smartcore.bos.Transport.Location
	11, // 15: smartcore.bos.Transport.Payload.intended_journey:type_name -> smartcore.bos.Transport.Journey
	11, // 16: smartcore.bos.Transport.Payload.actual_journey:type_name -> smartcore.bos.Transport.Journey
	17, // 17: smartcore.bos.PullTransportResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	4,  // 18: smartcore.bos.PullTransportResponse.Change.transport_state:type_name -> smartcore.bos.Transport
	6,  // 19: smartcore.bos.TransportApi.GetTransport:input_type -> smartcore.bos.GetTransportRequest
	8,  // 20: smartcore.bos.TransportApi.PullTransport:input_type -> smartcore.bos.PullTransportRequest
	7,  // 21: smartcore.bos.TransportInfo.DescribeTransport:input_type -> smartcore.bos.DescribeTransportRequest
	4,  // 22: smartcore.bos.TransportApi.GetTransport:output_type -> smartcore.bos.Transport
	9,  // 23: smartcore.bos.TransportApi.PullTransport:output_type -> smartcore.bos.PullTransportResponse
	5,  // 24: smartcore.bos.TransportInfo.DescribeTransport:output_type -> smartcore.bos.TransportSupport
	22, // [22:25] is the sub-list for method output_type
	19, // [19:22] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_transport_proto_init() }
func file_transport_proto_init() {
	if File_transport_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transport_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TransportSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeTransportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PullTransportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PullTransportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Transport_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Transport_Journey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Transport_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TransportSupport_DoorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PullTransportResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transport_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_transport_proto_goTypes,
		DependencyIndexes: file_transport_proto_depIdxs,
		EnumInfos:         file_transport_proto_enumTypes,
		MessageInfos:      file_transport_proto_msgTypes,
	}.Build()
	File_transport_proto = out.File
	file_transport_proto_rawDesc = nil
	file_transport_proto_goTypes = nil
	file_transport_proto_depIdxs = nil
}
