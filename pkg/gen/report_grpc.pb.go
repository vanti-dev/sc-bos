// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: report.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReportApi_ListReports_FullMethodName          = "/smartcore.bos.ReportApi/ListReports"
	ReportApi_GetDownloadReportUrl_FullMethodName = "/smartcore.bos.ReportApi/GetDownloadReportUrl"
)

// ReportApiClient is the client API for ReportApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ReportApi provides methods to manage and retrieve reports. Reports are typically created by automations, such as
// monthly metering reports, monthly fault reports etc. This API allows automations to provide these reports on demand.
type ReportApiClient interface {
	ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error)
	GetDownloadReportUrl(ctx context.Context, in *GetDownloadReportUrlRequest, opts ...grpc.CallOption) (*DownloadReportUrl, error)
}

type reportApiClient struct {
	cc grpc.ClientConnInterface
}

func NewReportApiClient(cc grpc.ClientConnInterface) ReportApiClient {
	return &reportApiClient{cc}
}

func (c *reportApiClient) ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReportsResponse)
	err := c.cc.Invoke(ctx, ReportApi_ListReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportApiClient) GetDownloadReportUrl(ctx context.Context, in *GetDownloadReportUrlRequest, opts ...grpc.CallOption) (*DownloadReportUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadReportUrl)
	err := c.cc.Invoke(ctx, ReportApi_GetDownloadReportUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportApiServer is the server API for ReportApi service.
// All implementations must embed UnimplementedReportApiServer
// for forward compatibility.
//
// ReportApi provides methods to manage and retrieve reports. Reports are typically created by automations, such as
// monthly metering reports, monthly fault reports etc. This API allows automations to provide these reports on demand.
type ReportApiServer interface {
	ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error)
	GetDownloadReportUrl(context.Context, *GetDownloadReportUrlRequest) (*DownloadReportUrl, error)
	mustEmbedUnimplementedReportApiServer()
}

// UnimplementedReportApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportApiServer struct{}

func (UnimplementedReportApiServer) ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReports not implemented")
}
func (UnimplementedReportApiServer) GetDownloadReportUrl(context.Context, *GetDownloadReportUrlRequest) (*DownloadReportUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadReportUrl not implemented")
}
func (UnimplementedReportApiServer) mustEmbedUnimplementedReportApiServer() {}
func (UnimplementedReportApiServer) testEmbeddedByValue()                   {}

// UnsafeReportApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportApiServer will
// result in compilation errors.
type UnsafeReportApiServer interface {
	mustEmbedUnimplementedReportApiServer()
}

func RegisterReportApiServer(s grpc.ServiceRegistrar, srv ReportApiServer) {
	// If the following call pancis, it indicates UnimplementedReportApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportApi_ServiceDesc, srv)
}

func _ReportApi_ListReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportApiServer).ListReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportApi_ListReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportApiServer).ListReports(ctx, req.(*ListReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportApi_GetDownloadReportUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadReportUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportApiServer).GetDownloadReportUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportApi_GetDownloadReportUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportApiServer).GetDownloadReportUrl(ctx, req.(*GetDownloadReportUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportApi_ServiceDesc is the grpc.ServiceDesc for ReportApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.ReportApi",
	HandlerType: (*ReportApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReports",
			Handler:    _ReportApi_ListReports_Handler,
		},
		{
			MethodName: "GetDownloadReportUrl",
			Handler:    _ReportApi_GetDownloadReportUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report.proto",
}
