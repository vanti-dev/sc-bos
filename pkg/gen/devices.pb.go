// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.1
// source: devices.proto

package gen

import (
	traits "github.com/smart-core-os/sc-api/go/traits"
	types "github.com/smart-core-os/sc-api/go/types"
	time "github.com/smart-core-os/sc-api/go/types/time"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Device struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Name     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Metadata *traits.Metadata       `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// A list of health checks associated with the device
	HealthChecks  []*HealthCheck `protobuf:"bytes,3,rep,name=health_checks,json=healthChecks,proto3" json:"health_checks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_devices_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{0}
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetMetadata() *traits.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Device) GetHealthChecks() []*HealthCheck {
	if x != nil {
		return x.HealthChecks
	}
	return nil
}

type DevicesMetadata struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TotalCount int32                  `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Field counts contain how many devices exist with specific field values.
	// For example if there are 7 devices that have "metadata.membership.group" of "Lighting" then there will exist a
	// field_counts entry that looks like `{field: "metadata.membership.group", counts: {"Lighting": 7}}`.
	FieldCounts   []*DevicesMetadata_StringFieldCount `protobuf:"bytes,2,rep,name=field_counts,json=fieldCounts,proto3" json:"field_counts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DevicesMetadata) Reset() {
	*x = DevicesMetadata{}
	mi := &file_devices_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevicesMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesMetadata) ProtoMessage() {}

func (x *DevicesMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesMetadata.ProtoReflect.Descriptor instead.
func (*DevicesMetadata) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{1}
}

func (x *DevicesMetadata) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DevicesMetadata) GetFieldCounts() []*DevicesMetadata_StringFieldCount {
	if x != nil {
		return x.FieldCounts
	}
	return nil
}

type ListDevicesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields to fetch relative to the Device type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of devices to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListDevicesResponse` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A query for filtering the devices that will be returned
	Query         *Device_Query `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDevicesRequest) Reset() {
	*x = ListDevicesRequest{}
	mi := &file_devices_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesRequest) ProtoMessage() {}

func (x *ListDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesRequest.ProtoReflect.Descriptor instead.
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{2}
}

func (x *ListDevicesRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListDevicesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDevicesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDevicesRequest) GetQuery() *Device_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type ListDevicesResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Devices []*Device              `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of devices.
	// This may be an estimate.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDevicesResponse) Reset() {
	*x = ListDevicesResponse{}
	mi := &file_devices_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDevicesResponse) ProtoMessage() {}

func (x *ListDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDevicesResponse.ProtoReflect.Descriptor instead.
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{3}
}

func (x *ListDevicesResponse) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *ListDevicesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListDevicesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type PullDevicesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields to fetch relative to the Device type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
	// A query for filtering the devices that will be returned
	Query         *Device_Query `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullDevicesRequest) Reset() {
	*x = PullDevicesRequest{}
	mi := &file_devices_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullDevicesRequest) ProtoMessage() {}

func (x *PullDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullDevicesRequest.ProtoReflect.Descriptor instead.
func (*PullDevicesRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{4}
}

func (x *PullDevicesRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullDevicesRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

func (x *PullDevicesRequest) GetQuery() *Device_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type PullDevicesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of changes which have occurred
	Changes       []*PullDevicesResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullDevicesResponse) Reset() {
	*x = PullDevicesResponse{}
	mi := &file_devices_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullDevicesResponse) ProtoMessage() {}

func (x *PullDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullDevicesResponse.ProtoReflect.Descriptor instead.
func (*PullDevicesResponse) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{5}
}

func (x *PullDevicesResponse) GetChanges() []*PullDevicesResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type GetDevicesMetadataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields to fetch relative to the DeviceMetadata type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// Which fields to include in the metadata calculations.
	// If absent DeviceMetadata.field_counts will be empty.
	Includes *DevicesMetadata_Include `protobuf:"bytes,3,opt,name=includes,proto3" json:"includes,omitempty"`
	// A query for filtering the devices that will be included in the metadata calculations.
	Query         *Device_Query `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDevicesMetadataRequest) Reset() {
	*x = GetDevicesMetadataRequest{}
	mi := &file_devices_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDevicesMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicesMetadataRequest) ProtoMessage() {}

func (x *GetDevicesMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicesMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetDevicesMetadataRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{6}
}

func (x *GetDevicesMetadataRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *GetDevicesMetadataRequest) GetIncludes() *DevicesMetadata_Include {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *GetDevicesMetadataRequest) GetQuery() *Device_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type PullDevicesMetadataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields to fetch relative to the DeviceMetadata type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// Which fields to include in the metadata calculations.
	// If absent DeviceMetadata.field_counts will be empty.
	Includes *DevicesMetadata_Include `protobuf:"bytes,3,opt,name=includes,proto3" json:"includes,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,4,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
	// A query for filtering the devices that will be included in the metadata calculations.
	Query         *Device_Query `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullDevicesMetadataRequest) Reset() {
	*x = PullDevicesMetadataRequest{}
	mi := &file_devices_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullDevicesMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullDevicesMetadataRequest) ProtoMessage() {}

func (x *PullDevicesMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullDevicesMetadataRequest.ProtoReflect.Descriptor instead.
func (*PullDevicesMetadataRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{7}
}

func (x *PullDevicesMetadataRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullDevicesMetadataRequest) GetIncludes() *DevicesMetadata_Include {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *PullDevicesMetadataRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

func (x *PullDevicesMetadataRequest) GetQuery() *Device_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type PullDevicesMetadataResponse struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Changes       []*PullDevicesMetadataResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullDevicesMetadataResponse) Reset() {
	*x = PullDevicesMetadataResponse{}
	mi := &file_devices_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullDevicesMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullDevicesMetadataResponse) ProtoMessage() {}

func (x *PullDevicesMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullDevicesMetadataResponse.ProtoReflect.Descriptor instead.
func (*PullDevicesMetadataResponse) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{8}
}

func (x *PullDevicesMetadataResponse) GetChanges() []*PullDevicesMetadataResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type GetDownloadDevicesUrlRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A query for filtering the devices that will be returned
	Query *Device_Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Specifies the media type (or MIME type) of the file to be downloaded.
	// Defaults to text/csv.
	// Supported values are text/csv.
	MediaType string `protobuf:"bytes,2,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	// A query for historical records for matched devices.
	// When present, GETting the url will return rows for each historical record for each device matched by query.
	History *time.Period `protobuf:"bytes,3,opt,name=history,proto3" json:"history,omitempty"`
	// For tabular media types, configure how the table should be formatted.
	Table *GetDownloadDevicesUrlRequest_Table `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
	// A filename to suggest for the downloaded file.
	// Typically placed into the Content-Disposition header.
	// A long filename may be result in an error response from the server.
	Filename      string `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDownloadDevicesUrlRequest) Reset() {
	*x = GetDownloadDevicesUrlRequest{}
	mi := &file_devices_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDownloadDevicesUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadDevicesUrlRequest) ProtoMessage() {}

func (x *GetDownloadDevicesUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadDevicesUrlRequest.ProtoReflect.Descriptor instead.
func (*GetDownloadDevicesUrlRequest) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{9}
}

func (x *GetDownloadDevicesUrlRequest) GetQuery() *Device_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetDownloadDevicesUrlRequest) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *GetDownloadDevicesUrlRequest) GetHistory() *time.Period {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *GetDownloadDevicesUrlRequest) GetTable() *GetDownloadDevicesUrlRequest_Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GetDownloadDevicesUrlRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type DownloadDevicesUrl struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Url      string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Filename string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	// The negotiated media type.
	MediaType string `protobuf:"bytes,3,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	// The latest time the url will be valid for, you will not be able to use the url after this time.
	ExpireAfterTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expire_after_time,json=expireAfterTime,proto3" json:"expire_after_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DownloadDevicesUrl) Reset() {
	*x = DownloadDevicesUrl{}
	mi := &file_devices_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadDevicesUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadDevicesUrl) ProtoMessage() {}

func (x *DownloadDevicesUrl) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadDevicesUrl.ProtoReflect.Descriptor instead.
func (*DownloadDevicesUrl) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadDevicesUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DownloadDevicesUrl) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DownloadDevicesUrl) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *DownloadDevicesUrl) GetExpireAfterTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireAfterTime
	}
	return nil
}

type Device_Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Conditions that must match for the device to be included in the results.
	// Each condition is applied as an AND operation.
	Conditions    []*Device_Query_Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device_Query) Reset() {
	*x = Device_Query{}
	mi := &file_devices_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Query) ProtoMessage() {}

func (x *Device_Query) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Query.ProtoReflect.Descriptor instead.
func (*Device_Query) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Device_Query) GetConditions() []*Device_Query_Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type Device_Query_Condition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of a field relative to Device using '.' as a path separator.
	// For example "metadata.membership.group".
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are valid to be assigned to Value:
	//
	//	*Device_Query_Condition_StringEqual
	//	*Device_Query_Condition_StringEqualFold
	//	*Device_Query_Condition_StringContains
	//	*Device_Query_Condition_StringContainsFold
	//	*Device_Query_Condition_StringIn
	//	*Device_Query_Condition_StringInFold
	//	*Device_Query_Condition_TimestampEqual
	//	*Device_Query_Condition_TimestampGt
	//	*Device_Query_Condition_TimestampGte
	//	*Device_Query_Condition_TimestampLt
	//	*Device_Query_Condition_TimestampLte
	//	*Device_Query_Condition_NameDescendant
	//	*Device_Query_Condition_NameDescendantInc
	//	*Device_Query_Condition_NameDescendantIn
	//	*Device_Query_Condition_NameDescendantIncIn
	//	*Device_Query_Condition_Present
	Value         isDevice_Query_Condition_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device_Query_Condition) Reset() {
	*x = Device_Query_Condition{}
	mi := &file_devices_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device_Query_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Query_Condition) ProtoMessage() {}

func (x *Device_Query_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Query_Condition.ProtoReflect.Descriptor instead.
func (*Device_Query_Condition) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Device_Query_Condition) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Device_Query_Condition) GetValue() isDevice_Query_Condition_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Device_Query_Condition) GetStringEqual() string {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_StringEqual); ok {
			return x.StringEqual
		}
	}
	return ""
}

func (x *Device_Query_Condition) GetStringEqualFold() string {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_StringEqualFold); ok {
			return x.StringEqualFold
		}
	}
	return ""
}

func (x *Device_Query_Condition) GetStringContains() string {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_StringContains); ok {
			return x.StringContains
		}
	}
	return ""
}

func (x *Device_Query_Condition) GetStringContainsFold() string {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_StringContainsFold); ok {
			return x.StringContainsFold
		}
	}
	return ""
}

func (x *Device_Query_Condition) GetStringIn() *Device_Query_StringList {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_StringIn); ok {
			return x.StringIn
		}
	}
	return nil
}

func (x *Device_Query_Condition) GetStringInFold() *Device_Query_StringList {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_StringInFold); ok {
			return x.StringInFold
		}
	}
	return nil
}

func (x *Device_Query_Condition) GetTimestampEqual() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_TimestampEqual); ok {
			return x.TimestampEqual
		}
	}
	return nil
}

func (x *Device_Query_Condition) GetTimestampGt() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_TimestampGt); ok {
			return x.TimestampGt
		}
	}
	return nil
}

func (x *Device_Query_Condition) GetTimestampGte() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_TimestampGte); ok {
			return x.TimestampGte
		}
	}
	return nil
}

func (x *Device_Query_Condition) GetTimestampLt() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_TimestampLt); ok {
			return x.TimestampLt
		}
	}
	return nil
}

func (x *Device_Query_Condition) GetTimestampLte() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_TimestampLte); ok {
			return x.TimestampLte
		}
	}
	return nil
}

func (x *Device_Query_Condition) GetNameDescendant() string {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_NameDescendant); ok {
			return x.NameDescendant
		}
	}
	return ""
}

func (x *Device_Query_Condition) GetNameDescendantInc() string {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_NameDescendantInc); ok {
			return x.NameDescendantInc
		}
	}
	return ""
}

func (x *Device_Query_Condition) GetNameDescendantIn() *Device_Query_StringList {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_NameDescendantIn); ok {
			return x.NameDescendantIn
		}
	}
	return nil
}

func (x *Device_Query_Condition) GetNameDescendantIncIn() *Device_Query_StringList {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_NameDescendantIncIn); ok {
			return x.NameDescendantIncIn
		}
	}
	return nil
}

func (x *Device_Query_Condition) GetPresent() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Value.(*Device_Query_Condition_Present); ok {
			return x.Present
		}
	}
	return nil
}

type isDevice_Query_Condition_Value interface {
	isDevice_Query_Condition_Value()
}

type Device_Query_Condition_StringEqual struct {
	// Compare the field to this string using a case sensitive comparison
	StringEqual string `protobuf:"bytes,2,opt,name=string_equal,json=stringEqual,proto3,oneof"`
}

type Device_Query_Condition_StringEqualFold struct {
	// Compare the field to this string using a simple unicode case folding comparison.
	// See the go package strings.EqualFold.
	StringEqualFold string `protobuf:"bytes,3,opt,name=string_equal_fold,json=stringEqualFold,proto3,oneof"`
}

type Device_Query_Condition_StringContains struct {
	// Compare the field using case sensitive contains.
	StringContains string `protobuf:"bytes,4,opt,name=string_contains,json=stringContains,proto3,oneof"`
}

type Device_Query_Condition_StringContainsFold struct {
	// Compare the field using contains in a case insensitive manner.
	StringContainsFold string `protobuf:"bytes,5,opt,name=string_contains_fold,json=stringContainsFold,proto3,oneof"`
}

type Device_Query_Condition_StringIn struct {
	// Compare the field to any of these strings using case sensitive comparison.
	// The server may have limits on the number of strings that can be compared.
	StringIn *Device_Query_StringList `protobuf:"bytes,6,opt,name=string_in,json=stringIn,proto3,oneof"`
}

type Device_Query_Condition_StringInFold struct {
	// Compare the field to any of these strings using a simple unicode case folding comparison.
	// The server may have limits on the number of strings that can be compared.
	StringInFold *Device_Query_StringList `protobuf:"bytes,7,opt,name=string_in_fold,json=stringInFold,proto3,oneof"`
}

type Device_Query_Condition_TimestampEqual struct {
	// The condition matches if the field is equal to this timestamp.
	TimestampEqual *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=timestamp_equal,json=timestampEqual,proto3,oneof"`
}

type Device_Query_Condition_TimestampGt struct {
	// The condition matches if the field is greater than this timestamp.
	TimestampGt *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=timestamp_gt,json=timestampGt,proto3,oneof"`
}

type Device_Query_Condition_TimestampGte struct {
	// The condition matches if the field is greater than or equal to this timestamp.
	TimestampGte *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=timestamp_gte,json=timestampGte,proto3,oneof"`
}

type Device_Query_Condition_TimestampLt struct {
	// The condition matches if the field is less than this timestamp.
	TimestampLt *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=timestamp_lt,json=timestampLt,proto3,oneof"`
}

type Device_Query_Condition_TimestampLte struct {
	// The condition matches if the field is less than or equal to this timestamp.
	TimestampLte *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=timestamp_lte,json=timestampLte,proto3,oneof"`
}

type Device_Query_Condition_NameDescendant struct {
	// The condition matches if the field is a descendant of this name.
	// For example "a/b" would match "a/b/c" but not "a/bc".
	//
	// Names are used to identify resources: devices, services, etc.
	// Names are usually comprised of '/' separated path segments indicating a hierarchy,
	// for example "a/b/c" is a child of "a/b".
	// Some of the authorization claims use this hierarchy to grant access to collections of resources.
	NameDescendant string `protobuf:"bytes,30,opt,name=name_descendant,json=nameDescendant,proto3,oneof"`
}

type Device_Query_Condition_NameDescendantInc struct {
	// The condition matches if the field is equal to or a descendant of this name.
	// For example "a/b" would match "a/b" and "a/b/c" but not "a/bc".
	NameDescendantInc string `protobuf:"bytes,31,opt,name=name_descendant_inc,json=nameDescendantInc,proto3,oneof"`
}

type Device_Query_Condition_NameDescendantIn struct {
	// The condition matches if the field is a descendant of any of these names.
	// The server may have limits on the number of names that can be compared.
	// See the name_descendant description for details of how descendant matching works.
	NameDescendantIn *Device_Query_StringList `protobuf:"bytes,32,opt,name=name_descendant_in,json=nameDescendantIn,proto3,oneof"`
}

type Device_Query_Condition_NameDescendantIncIn struct {
	// The condition matches if the field is equal to or a descendant of any of these names.
	// The server may have limits on the number of names that can be compared.
	// See the name_descendant_inc description for details of how descendant matching works.
	NameDescendantIncIn *Device_Query_StringList `protobuf:"bytes,33,opt,name=name_descendant_inc_in,json=nameDescendantIncIn,proto3,oneof"`
}

type Device_Query_Condition_Present struct {
	// The condition matches if the field is present.
	// Default values are not present unless explicit presences is tracked for the field.
	Present *emptypb.Empty `protobuf:"bytes,40,opt,name=present,proto3,oneof"`
}

func (*Device_Query_Condition_StringEqual) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_StringEqualFold) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_StringContains) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_StringContainsFold) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_StringIn) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_StringInFold) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_TimestampEqual) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_TimestampGt) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_TimestampGte) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_TimestampLt) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_TimestampLte) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_NameDescendant) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_NameDescendantInc) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_NameDescendantIn) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_NameDescendantIncIn) isDevice_Query_Condition_Value() {}

func (*Device_Query_Condition_Present) isDevice_Query_Condition_Value() {}

// A list of strings, because oneof can't be repeated.
type Device_Query_StringList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Strings       []string               `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device_Query_StringList) Reset() {
	*x = Device_Query_StringList{}
	mi := &file_devices_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device_Query_StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Query_StringList) ProtoMessage() {}

func (x *Device_Query_StringList) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Query_StringList.ProtoReflect.Descriptor instead.
func (*Device_Query_StringList) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Device_Query_StringList) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type DevicesMetadata_StringFieldCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Counts        map[string]uint32      `protobuf:"bytes,2,rep,name=counts,proto3" json:"counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DevicesMetadata_StringFieldCount) Reset() {
	*x = DevicesMetadata_StringFieldCount{}
	mi := &file_devices_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevicesMetadata_StringFieldCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesMetadata_StringFieldCount) ProtoMessage() {}

func (x *DevicesMetadata_StringFieldCount) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesMetadata_StringFieldCount.ProtoReflect.Descriptor instead.
func (*DevicesMetadata_StringFieldCount) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{1, 0}
}

func (x *DevicesMetadata_StringFieldCount) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *DevicesMetadata_StringFieldCount) GetCounts() map[string]uint32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type DevicesMetadata_Include struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields contains all the device fields that metadata should be computed for.
	Fields        []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DevicesMetadata_Include) Reset() {
	*x = DevicesMetadata_Include{}
	mi := &file_devices_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DevicesMetadata_Include) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesMetadata_Include) ProtoMessage() {}

func (x *DevicesMetadata_Include) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesMetadata_Include.ProtoReflect.Descriptor instead.
func (*DevicesMetadata_Include) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{1, 1}
}

func (x *DevicesMetadata_Include) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type PullDevicesResponse_Change struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the device that emitted this change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of change (e.g. ADD, UPDATE, etc...)
	Type types.ChangeType `protobuf:"varint,2,opt,name=type,proto3,enum=smartcore.types.ChangeType" json:"type,omitempty"`
	// The new value to use for ADD|UPDATE changes
	NewValue *Device `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	// The old value to use for UPDATE|REMOVE changes
	OldValue *Device `protobuf:"bytes,4,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	// When the change occurred
	ChangeTime    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullDevicesResponse_Change) Reset() {
	*x = PullDevicesResponse_Change{}
	mi := &file_devices_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullDevicesResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullDevicesResponse_Change) ProtoMessage() {}

func (x *PullDevicesResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullDevicesResponse_Change.ProtoReflect.Descriptor instead.
func (*PullDevicesResponse_Change) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PullDevicesResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullDevicesResponse_Change) GetType() types.ChangeType {
	if x != nil {
		return x.Type
	}
	return types.ChangeType(0)
}

func (x *PullDevicesResponse_Change) GetNewValue() *Device {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *PullDevicesResponse_Change) GetOldValue() *Device {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *PullDevicesResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

type PullDevicesMetadataResponse_Change struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the device that emitted this change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // not currently used
	// The updated devices metadata value.
	DevicesMetadata *DevicesMetadata `protobuf:"bytes,2,opt,name=devices_metadata,json=devicesMetadata,proto3" json:"devices_metadata,omitempty"`
	// When the change occurred
	ChangeTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullDevicesMetadataResponse_Change) Reset() {
	*x = PullDevicesMetadataResponse_Change{}
	mi := &file_devices_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullDevicesMetadataResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullDevicesMetadataResponse_Change) ProtoMessage() {}

func (x *PullDevicesMetadataResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullDevicesMetadataResponse_Change.ProtoReflect.Descriptor instead.
func (*PullDevicesMetadataResponse_Change) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PullDevicesMetadataResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullDevicesMetadataResponse_Change) GetDevicesMetadata() *DevicesMetadata {
	if x != nil {
		return x.DevicesMetadata
	}
	return nil
}

func (x *PullDevicesMetadataResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

// Table configures how tabular file formats are generated.
type GetDownloadDevicesUrlRequest_Table struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Columns that should be included.
	// If columns have a title then this will replace the qualified header.
	IncludeCols []*GetDownloadDevicesUrlRequest_Table_Column `protobuf:"bytes,1,rep,name=include_cols,json=includeCols,proto3" json:"include_cols,omitempty"`
	// Columns that should be excluded.
	// Titles are ignored.
	ExcludeCols   []*GetDownloadDevicesUrlRequest_Table_Column `protobuf:"bytes,2,rep,name=exclude_cols,json=excludeCols,proto3" json:"exclude_cols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDownloadDevicesUrlRequest_Table) Reset() {
	*x = GetDownloadDevicesUrlRequest_Table{}
	mi := &file_devices_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDownloadDevicesUrlRequest_Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadDevicesUrlRequest_Table) ProtoMessage() {}

func (x *GetDownloadDevicesUrlRequest_Table) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadDevicesUrlRequest_Table.ProtoReflect.Descriptor instead.
func (*GetDownloadDevicesUrlRequest_Table) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetDownloadDevicesUrlRequest_Table) GetIncludeCols() []*GetDownloadDevicesUrlRequest_Table_Column {
	if x != nil {
		return x.IncludeCols
	}
	return nil
}

func (x *GetDownloadDevicesUrlRequest_Table) GetExcludeCols() []*GetDownloadDevicesUrlRequest_Table_Column {
	if x != nil {
		return x.ExcludeCols
	}
	return nil
}

type GetDownloadDevicesUrlRequest_Table_Column struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The qualified name of the column, the column heading you get by default.
	// For example: "md.name" or "iaq.co2".
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDownloadDevicesUrlRequest_Table_Column) Reset() {
	*x = GetDownloadDevicesUrlRequest_Table_Column{}
	mi := &file_devices_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDownloadDevicesUrlRequest_Table_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadDevicesUrlRequest_Table_Column) ProtoMessage() {}

func (x *GetDownloadDevicesUrlRequest_Table_Column) ProtoReflect() protoreflect.Message {
	mi := &file_devices_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadDevicesUrlRequest_Table_Column.ProtoReflect.Descriptor instead.
func (*GetDownloadDevicesUrlRequest_Table_Column) Descriptor() ([]byte, []int) {
	return file_devices_proto_rawDescGZIP(), []int{9, 0, 0}
}

func (x *GetDownloadDevicesUrlRequest_Table_Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDownloadDevicesUrlRequest_Table_Column) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_devices_proto protoreflect.FileDescriptor

const file_devices_proto_rawDesc = "" +
	"\n" +
	"\rdevices.proto\x12\rsmartcore.bos\x1a\x1bgoogle/protobuf/empty.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x15traits/metadata.proto\x1a\x12types/change.proto\x1a\x17types/time/period.proto\x1a\fhealth.proto\"\x9b\n" +
	"\n" +
	"\x06Device\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x126\n" +
	"\bmetadata\x18\x02 \x01(\v2\x1a.smartcore.traits.MetadataR\bmetadata\x12?\n" +
	"\rhealth_checks\x18\x03 \x03(\v2\x1a.smartcore.bos.HealthCheckR\fhealthChecks\x1a\x83\t\n" +
	"\x05Query\x12E\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2%.smartcore.bos.Device.Query.ConditionR\n" +
	"conditions\x1a\x8a\b\n" +
	"\tCondition\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x12#\n" +
	"\fstring_equal\x18\x02 \x01(\tH\x00R\vstringEqual\x12,\n" +
	"\x11string_equal_fold\x18\x03 \x01(\tH\x00R\x0fstringEqualFold\x12)\n" +
	"\x0fstring_contains\x18\x04 \x01(\tH\x00R\x0estringContains\x122\n" +
	"\x14string_contains_fold\x18\x05 \x01(\tH\x00R\x12stringContainsFold\x12E\n" +
	"\tstring_in\x18\x06 \x01(\v2&.smartcore.bos.Device.Query.StringListH\x00R\bstringIn\x12N\n" +
	"\x0estring_in_fold\x18\a \x01(\v2&.smartcore.bos.Device.Query.StringListH\x00R\fstringInFold\x12E\n" +
	"\x0ftimestamp_equal\x18\x14 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x0etimestampEqual\x12?\n" +
	"\ftimestamp_gt\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\vtimestampGt\x12A\n" +
	"\rtimestamp_gte\x18\x16 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\ftimestampGte\x12?\n" +
	"\ftimestamp_lt\x18\x17 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\vtimestampLt\x12A\n" +
	"\rtimestamp_lte\x18\x18 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\ftimestampLte\x12)\n" +
	"\x0fname_descendant\x18\x1e \x01(\tH\x00R\x0enameDescendant\x120\n" +
	"\x13name_descendant_inc\x18\x1f \x01(\tH\x00R\x11nameDescendantInc\x12V\n" +
	"\x12name_descendant_in\x18  \x01(\v2&.smartcore.bos.Device.Query.StringListH\x00R\x10nameDescendantIn\x12]\n" +
	"\x16name_descendant_inc_in\x18! \x01(\v2&.smartcore.bos.Device.Query.StringListH\x00R\x13nameDescendantIncIn\x122\n" +
	"\apresent\x18( \x01(\v2\x16.google.protobuf.EmptyH\x00R\apresentB\a\n" +
	"\x05value\x1a&\n" +
	"\n" +
	"StringList\x12\x18\n" +
	"\astrings\x18\x01 \x03(\tR\astrings\"\xe4\x02\n" +
	"\x0fDevicesMetadata\x12\x1f\n" +
	"\vtotal_count\x18\x01 \x01(\x05R\n" +
	"totalCount\x12R\n" +
	"\ffield_counts\x18\x02 \x03(\v2/.smartcore.bos.DevicesMetadata.StringFieldCountR\vfieldCounts\x1a\xb8\x01\n" +
	"\x10StringFieldCount\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x12S\n" +
	"\x06counts\x18\x02 \x03(\v2;.smartcore.bos.DevicesMetadata.StringFieldCount.CountsEntryR\x06counts\x1a9\n" +
	"\vCountsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a!\n" +
	"\aInclude\x12\x16\n" +
	"\x06fields\x18\x01 \x03(\tR\x06fields\"\xbc\x01\n" +
	"\x12ListDevicesRequest\x127\n" +
	"\tread_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x04 \x01(\tR\tpageToken\x121\n" +
	"\x05query\x18\x05 \x01(\v2\x1b.smartcore.bos.Device.QueryR\x05query\"\x8d\x01\n" +
	"\x13ListDevicesResponse\x12/\n" +
	"\adevices\x18\x01 \x03(\v2\x15.smartcore.bos.DeviceR\adevices\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize\"\xa3\x01\n" +
	"\x12PullDevicesRequest\x127\n" +
	"\tread_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12!\n" +
	"\fupdates_only\x18\x03 \x01(\bR\vupdatesOnly\x121\n" +
	"\x05query\x18\x04 \x01(\v2\x1b.smartcore.bos.Device.QueryR\x05query\"\xcf\x02\n" +
	"\x13PullDevicesResponse\x12C\n" +
	"\achanges\x18\x01 \x03(\v2).smartcore.bos.PullDevicesResponse.ChangeR\achanges\x1a\xf2\x01\n" +
	"\x06Change\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12/\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1b.smartcore.types.ChangeTypeR\x04type\x122\n" +
	"\tnew_value\x18\x03 \x01(\v2\x15.smartcore.bos.DeviceR\bnewValue\x122\n" +
	"\told_value\x18\x04 \x01(\v2\x15.smartcore.bos.DeviceR\boldValue\x12;\n" +
	"\vchange_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"changeTime\"\xcb\x01\n" +
	"\x19GetDevicesMetadataRequest\x127\n" +
	"\tread_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12B\n" +
	"\bincludes\x18\x03 \x01(\v2&.smartcore.bos.DevicesMetadata.IncludeR\bincludes\x121\n" +
	"\x05query\x18\x04 \x01(\v2\x1b.smartcore.bos.Device.QueryR\x05query\"\xef\x01\n" +
	"\x1aPullDevicesMetadataRequest\x127\n" +
	"\tread_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12B\n" +
	"\bincludes\x18\x03 \x01(\v2&.smartcore.bos.DevicesMetadata.IncludeR\bincludes\x12!\n" +
	"\fupdates_only\x18\x04 \x01(\bR\vupdatesOnly\x121\n" +
	"\x05query\x18\x05 \x01(\v2\x1b.smartcore.bos.Device.QueryR\x05query\"\x91\x02\n" +
	"\x1bPullDevicesMetadataResponse\x12K\n" +
	"\achanges\x18\x01 \x03(\v21.smartcore.bos.PullDevicesMetadataResponse.ChangeR\achanges\x1a\xa4\x01\n" +
	"\x06Change\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12I\n" +
	"\x10devices_metadata\x18\x02 \x01(\v2\x1e.smartcore.bos.DevicesMetadataR\x0fdevicesMetadata\x12;\n" +
	"\vchange_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"changeTime\"\x85\x04\n" +
	"\x1cGetDownloadDevicesUrlRequest\x121\n" +
	"\x05query\x18\x01 \x01(\v2\x1b.smartcore.bos.Device.QueryR\x05query\x12\x1d\n" +
	"\n" +
	"media_type\x18\x02 \x01(\tR\tmediaType\x126\n" +
	"\ahistory\x18\x03 \x01(\v2\x1c.smartcore.types.time.PeriodR\ahistory\x12G\n" +
	"\x05table\x18\x04 \x01(\v21.smartcore.bos.GetDownloadDevicesUrlRequest.TableR\x05table\x12\x1a\n" +
	"\bfilename\x18\x05 \x01(\tR\bfilename\x1a\xf5\x01\n" +
	"\x05Table\x12[\n" +
	"\finclude_cols\x18\x01 \x03(\v28.smartcore.bos.GetDownloadDevicesUrlRequest.Table.ColumnR\vincludeCols\x12[\n" +
	"\fexclude_cols\x18\x02 \x03(\v28.smartcore.bos.GetDownloadDevicesUrlRequest.Table.ColumnR\vexcludeCols\x1a2\n" +
	"\x06Column\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\"\xa9\x01\n" +
	"\x12DownloadDevicesUrl\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x1d\n" +
	"\n" +
	"media_type\x18\x03 \x01(\tR\tmediaType\x12F\n" +
	"\x11expire_after_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x0fexpireAfterTime2\xf3\x03\n" +
	"\n" +
	"DevicesApi\x12T\n" +
	"\vListDevices\x12!.smartcore.bos.ListDevicesRequest\x1a\".smartcore.bos.ListDevicesResponse\x12V\n" +
	"\vPullDevices\x12!.smartcore.bos.PullDevicesRequest\x1a\".smartcore.bos.PullDevicesResponse0\x01\x12^\n" +
	"\x12GetDevicesMetadata\x12(.smartcore.bos.GetDevicesMetadataRequest\x1a\x1e.smartcore.bos.DevicesMetadata\x12n\n" +
	"\x13PullDevicesMetadata\x12).smartcore.bos.PullDevicesMetadataRequest\x1a*.smartcore.bos.PullDevicesMetadataResponse0\x01\x12g\n" +
	"\x15GetDownloadDevicesUrl\x12+.smartcore.bos.GetDownloadDevicesUrlRequest\x1a!.smartcore.bos.DownloadDevicesUrlB%Z#github.com/vanti-dev/sc-bos/pkg/genb\x06proto3"

var (
	file_devices_proto_rawDescOnce sync.Once
	file_devices_proto_rawDescData []byte
)

func file_devices_proto_rawDescGZIP() []byte {
	file_devices_proto_rawDescOnce.Do(func() {
		file_devices_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_devices_proto_rawDesc), len(file_devices_proto_rawDesc)))
	})
	return file_devices_proto_rawDescData
}

var file_devices_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_devices_proto_goTypes = []any{
	(*Device)(nil),                                    // 0: smartcore.bos.Device
	(*DevicesMetadata)(nil),                           // 1: smartcore.bos.DevicesMetadata
	(*ListDevicesRequest)(nil),                        // 2: smartcore.bos.ListDevicesRequest
	(*ListDevicesResponse)(nil),                       // 3: smartcore.bos.ListDevicesResponse
	(*PullDevicesRequest)(nil),                        // 4: smartcore.bos.PullDevicesRequest
	(*PullDevicesResponse)(nil),                       // 5: smartcore.bos.PullDevicesResponse
	(*GetDevicesMetadataRequest)(nil),                 // 6: smartcore.bos.GetDevicesMetadataRequest
	(*PullDevicesMetadataRequest)(nil),                // 7: smartcore.bos.PullDevicesMetadataRequest
	(*PullDevicesMetadataResponse)(nil),               // 8: smartcore.bos.PullDevicesMetadataResponse
	(*GetDownloadDevicesUrlRequest)(nil),              // 9: smartcore.bos.GetDownloadDevicesUrlRequest
	(*DownloadDevicesUrl)(nil),                        // 10: smartcore.bos.DownloadDevicesUrl
	(*Device_Query)(nil),                              // 11: smartcore.bos.Device.Query
	(*Device_Query_Condition)(nil),                    // 12: smartcore.bos.Device.Query.Condition
	(*Device_Query_StringList)(nil),                   // 13: smartcore.bos.Device.Query.StringList
	(*DevicesMetadata_StringFieldCount)(nil),          // 14: smartcore.bos.DevicesMetadata.StringFieldCount
	(*DevicesMetadata_Include)(nil),                   // 15: smartcore.bos.DevicesMetadata.Include
	nil,                                               // 16: smartcore.bos.DevicesMetadata.StringFieldCount.CountsEntry
	(*PullDevicesResponse_Change)(nil),                // 17: smartcore.bos.PullDevicesResponse.Change
	(*PullDevicesMetadataResponse_Change)(nil),        // 18: smartcore.bos.PullDevicesMetadataResponse.Change
	(*GetDownloadDevicesUrlRequest_Table)(nil),        // 19: smartcore.bos.GetDownloadDevicesUrlRequest.Table
	(*GetDownloadDevicesUrlRequest_Table_Column)(nil), // 20: smartcore.bos.GetDownloadDevicesUrlRequest.Table.Column
	(*traits.Metadata)(nil),                           // 21: smartcore.traits.Metadata
	(*HealthCheck)(nil),                               // 22: smartcore.bos.HealthCheck
	(*fieldmaskpb.FieldMask)(nil),                     // 23: google.protobuf.FieldMask
	(*time.Period)(nil),                               // 24: smartcore.types.time.Period
	(*timestamppb.Timestamp)(nil),                     // 25: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                             // 26: google.protobuf.Empty
	(types.ChangeType)(0),                             // 27: smartcore.types.ChangeType
}
var file_devices_proto_depIdxs = []int32{
	21, // 0: smartcore.bos.Device.metadata:type_name -> smartcore.traits.Metadata
	22, // 1: smartcore.bos.Device.health_checks:type_name -> smartcore.bos.HealthCheck
	14, // 2: smartcore.bos.DevicesMetadata.field_counts:type_name -> smartcore.bos.DevicesMetadata.StringFieldCount
	23, // 3: smartcore.bos.ListDevicesRequest.read_mask:type_name -> google.protobuf.FieldMask
	11, // 4: smartcore.bos.ListDevicesRequest.query:type_name -> smartcore.bos.Device.Query
	0,  // 5: smartcore.bos.ListDevicesResponse.devices:type_name -> smartcore.bos.Device
	23, // 6: smartcore.bos.PullDevicesRequest.read_mask:type_name -> google.protobuf.FieldMask
	11, // 7: smartcore.bos.PullDevicesRequest.query:type_name -> smartcore.bos.Device.Query
	17, // 8: smartcore.bos.PullDevicesResponse.changes:type_name -> smartcore.bos.PullDevicesResponse.Change
	23, // 9: smartcore.bos.GetDevicesMetadataRequest.read_mask:type_name -> google.protobuf.FieldMask
	15, // 10: smartcore.bos.GetDevicesMetadataRequest.includes:type_name -> smartcore.bos.DevicesMetadata.Include
	11, // 11: smartcore.bos.GetDevicesMetadataRequest.query:type_name -> smartcore.bos.Device.Query
	23, // 12: smartcore.bos.PullDevicesMetadataRequest.read_mask:type_name -> google.protobuf.FieldMask
	15, // 13: smartcore.bos.PullDevicesMetadataRequest.includes:type_name -> smartcore.bos.DevicesMetadata.Include
	11, // 14: smartcore.bos.PullDevicesMetadataRequest.query:type_name -> smartcore.bos.Device.Query
	18, // 15: smartcore.bos.PullDevicesMetadataResponse.changes:type_name -> smartcore.bos.PullDevicesMetadataResponse.Change
	11, // 16: smartcore.bos.GetDownloadDevicesUrlRequest.query:type_name -> smartcore.bos.Device.Query
	24, // 17: smartcore.bos.GetDownloadDevicesUrlRequest.history:type_name -> smartcore.types.time.Period
	19, // 18: smartcore.bos.GetDownloadDevicesUrlRequest.table:type_name -> smartcore.bos.GetDownloadDevicesUrlRequest.Table
	25, // 19: smartcore.bos.DownloadDevicesUrl.expire_after_time:type_name -> google.protobuf.Timestamp
	12, // 20: smartcore.bos.Device.Query.conditions:type_name -> smartcore.bos.Device.Query.Condition
	13, // 21: smartcore.bos.Device.Query.Condition.string_in:type_name -> smartcore.bos.Device.Query.StringList
	13, // 22: smartcore.bos.Device.Query.Condition.string_in_fold:type_name -> smartcore.bos.Device.Query.StringList
	25, // 23: smartcore.bos.Device.Query.Condition.timestamp_equal:type_name -> google.protobuf.Timestamp
	25, // 24: smartcore.bos.Device.Query.Condition.timestamp_gt:type_name -> google.protobuf.Timestamp
	25, // 25: smartcore.bos.Device.Query.Condition.timestamp_gte:type_name -> google.protobuf.Timestamp
	25, // 26: smartcore.bos.Device.Query.Condition.timestamp_lt:type_name -> google.protobuf.Timestamp
	25, // 27: smartcore.bos.Device.Query.Condition.timestamp_lte:type_name -> google.protobuf.Timestamp
	13, // 28: smartcore.bos.Device.Query.Condition.name_descendant_in:type_name -> smartcore.bos.Device.Query.StringList
	13, // 29: smartcore.bos.Device.Query.Condition.name_descendant_inc_in:type_name -> smartcore.bos.Device.Query.StringList
	26, // 30: smartcore.bos.Device.Query.Condition.present:type_name -> google.protobuf.Empty
	16, // 31: smartcore.bos.DevicesMetadata.StringFieldCount.counts:type_name -> smartcore.bos.DevicesMetadata.StringFieldCount.CountsEntry
	27, // 32: smartcore.bos.PullDevicesResponse.Change.type:type_name -> smartcore.types.ChangeType
	0,  // 33: smartcore.bos.PullDevicesResponse.Change.new_value:type_name -> smartcore.bos.Device
	0,  // 34: smartcore.bos.PullDevicesResponse.Change.old_value:type_name -> smartcore.bos.Device
	25, // 35: smartcore.bos.PullDevicesResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	1,  // 36: smartcore.bos.PullDevicesMetadataResponse.Change.devices_metadata:type_name -> smartcore.bos.DevicesMetadata
	25, // 37: smartcore.bos.PullDevicesMetadataResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	20, // 38: smartcore.bos.GetDownloadDevicesUrlRequest.Table.include_cols:type_name -> smartcore.bos.GetDownloadDevicesUrlRequest.Table.Column
	20, // 39: smartcore.bos.GetDownloadDevicesUrlRequest.Table.exclude_cols:type_name -> smartcore.bos.GetDownloadDevicesUrlRequest.Table.Column
	2,  // 40: smartcore.bos.DevicesApi.ListDevices:input_type -> smartcore.bos.ListDevicesRequest
	4,  // 41: smartcore.bos.DevicesApi.PullDevices:input_type -> smartcore.bos.PullDevicesRequest
	6,  // 42: smartcore.bos.DevicesApi.GetDevicesMetadata:input_type -> smartcore.bos.GetDevicesMetadataRequest
	7,  // 43: smartcore.bos.DevicesApi.PullDevicesMetadata:input_type -> smartcore.bos.PullDevicesMetadataRequest
	9,  // 44: smartcore.bos.DevicesApi.GetDownloadDevicesUrl:input_type -> smartcore.bos.GetDownloadDevicesUrlRequest
	3,  // 45: smartcore.bos.DevicesApi.ListDevices:output_type -> smartcore.bos.ListDevicesResponse
	5,  // 46: smartcore.bos.DevicesApi.PullDevices:output_type -> smartcore.bos.PullDevicesResponse
	1,  // 47: smartcore.bos.DevicesApi.GetDevicesMetadata:output_type -> smartcore.bos.DevicesMetadata
	8,  // 48: smartcore.bos.DevicesApi.PullDevicesMetadata:output_type -> smartcore.bos.PullDevicesMetadataResponse
	10, // 49: smartcore.bos.DevicesApi.GetDownloadDevicesUrl:output_type -> smartcore.bos.DownloadDevicesUrl
	45, // [45:50] is the sub-list for method output_type
	40, // [40:45] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_devices_proto_init() }
func file_devices_proto_init() {
	if File_devices_proto != nil {
		return
	}
	file_health_proto_init()
	file_devices_proto_msgTypes[12].OneofWrappers = []any{
		(*Device_Query_Condition_StringEqual)(nil),
		(*Device_Query_Condition_StringEqualFold)(nil),
		(*Device_Query_Condition_StringContains)(nil),
		(*Device_Query_Condition_StringContainsFold)(nil),
		(*Device_Query_Condition_StringIn)(nil),
		(*Device_Query_Condition_StringInFold)(nil),
		(*Device_Query_Condition_TimestampEqual)(nil),
		(*Device_Query_Condition_TimestampGt)(nil),
		(*Device_Query_Condition_TimestampGte)(nil),
		(*Device_Query_Condition_TimestampLt)(nil),
		(*Device_Query_Condition_TimestampLte)(nil),
		(*Device_Query_Condition_NameDescendant)(nil),
		(*Device_Query_Condition_NameDescendantInc)(nil),
		(*Device_Query_Condition_NameDescendantIn)(nil),
		(*Device_Query_Condition_NameDescendantIncIn)(nil),
		(*Device_Query_Condition_Present)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_devices_proto_rawDesc), len(file_devices_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_devices_proto_goTypes,
		DependencyIndexes: file_devices_proto_depIdxs,
		MessageInfos:      file_devices_proto_msgTypes,
	}.Build()
	File_devices_proto = out.File
	file_devices_proto_goTypes = nil
	file_devices_proto_depIdxs = nil
}
