// Code generated by protoc-gen-router. DO NOT EDIT.

package gen

import (
	context "context"
	fmt "fmt"
	router "github.com/smart-core-os/sc-golang/pkg/router"
	grpc "google.golang.org/grpc"
)

// ServiceTicketApiRouter is a ServiceTicketApiServer that allows routing named requests to specific ServiceTicketApiClient
type ServiceTicketApiRouter struct {
	UnimplementedServiceTicketApiServer

	router.Router
}

// compile time check that we implement the interface we need
var _ ServiceTicketApiServer = (*ServiceTicketApiRouter)(nil)

func NewServiceTicketApiRouter(opts ...router.Option) *ServiceTicketApiRouter {
	return &ServiceTicketApiRouter{
		Router: router.NewRouter(opts...),
	}
}

// WithServiceTicketApiClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithServiceTicketApiClientFactory(f func(name string) (ServiceTicketApiClient, error)) router.Option {
	return router.WithFactory(func(name string) (any, error) {
		return f(name)
	})
}

func (r *ServiceTicketApiRouter) Register(server grpc.ServiceRegistrar) {
	RegisterServiceTicketApiServer(server, r)
}

// Add extends Router.Add to panic if client is not of type ServiceTicketApiClient.
func (r *ServiceTicketApiRouter) Add(name string, client any) any {
	if !r.HoldsType(client) {
		panic(fmt.Sprintf("not correct type: client of type %T is not a ServiceTicketApiClient", client))
	}
	return r.Router.Add(name, client)
}

func (r *ServiceTicketApiRouter) HoldsType(client any) bool {
	_, ok := client.(ServiceTicketApiClient)
	return ok
}

func (r *ServiceTicketApiRouter) AddServiceTicketApiClient(name string, client ServiceTicketApiClient) ServiceTicketApiClient {
	res := r.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(ServiceTicketApiClient)
}

func (r *ServiceTicketApiRouter) RemoveServiceTicketApiClient(name string) ServiceTicketApiClient {
	res := r.Remove(name)
	if res == nil {
		return nil
	}
	return res.(ServiceTicketApiClient)
}

func (r *ServiceTicketApiRouter) GetServiceTicketApiClient(name string) (ServiceTicketApiClient, error) {
	res, err := r.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(ServiceTicketApiClient), nil
}

func (r *ServiceTicketApiRouter) CreateTicket(ctx context.Context, request *CreateTicketRequest) (*Ticket, error) {
	child, err := r.GetServiceTicketApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.CreateTicket(ctx, request)
}

func (r *ServiceTicketApiRouter) UpdateTicket(ctx context.Context, request *UpdateTicketRequest) (*Ticket, error) {
	child, err := r.GetServiceTicketApiClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.UpdateTicket(ctx, request)
}
