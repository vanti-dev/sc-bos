// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: account.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccountApi_GetAccount_FullMethodName                = "/smartcore.bos.AccountApi/GetAccount"
	AccountApi_ListAccounts_FullMethodName              = "/smartcore.bos.AccountApi/ListAccounts"
	AccountApi_CreateAccount_FullMethodName             = "/smartcore.bos.AccountApi/CreateAccount"
	AccountApi_UpdateAccount_FullMethodName             = "/smartcore.bos.AccountApi/UpdateAccount"
	AccountApi_UpdateAccountPassword_FullMethodName     = "/smartcore.bos.AccountApi/UpdateAccountPassword"
	AccountApi_RotateAccountClientSecret_FullMethodName = "/smartcore.bos.AccountApi/RotateAccountClientSecret"
	AccountApi_DeleteAccount_FullMethodName             = "/smartcore.bos.AccountApi/DeleteAccount"
	AccountApi_GetRole_FullMethodName                   = "/smartcore.bos.AccountApi/GetRole"
	AccountApi_ListRoles_FullMethodName                 = "/smartcore.bos.AccountApi/ListRoles"
	AccountApi_CreateRole_FullMethodName                = "/smartcore.bos.AccountApi/CreateRole"
	AccountApi_UpdateRole_FullMethodName                = "/smartcore.bos.AccountApi/UpdateRole"
	AccountApi_DeleteRole_FullMethodName                = "/smartcore.bos.AccountApi/DeleteRole"
	AccountApi_GetRoleAssignment_FullMethodName         = "/smartcore.bos.AccountApi/GetRoleAssignment"
	AccountApi_ListRoleAssignments_FullMethodName       = "/smartcore.bos.AccountApi/ListRoleAssignments"
	AccountApi_CreateRoleAssignment_FullMethodName      = "/smartcore.bos.AccountApi/CreateRoleAssignment"
	AccountApi_DeleteRoleAssignment_FullMethodName      = "/smartcore.bos.AccountApi/DeleteRoleAssignment"
)

// AccountApiClient is the client API for AccountApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountApiClient interface {
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error)
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	// Updates the password for a user account.
	// If the new_password does not comply with the password policy, the request will fail with INVALID_ARGUMENT.
	// If the old_password is supplied and does not match the current password, the request will fail with FAILED_PRECONDITION.
	UpdateAccountPassword(ctx context.Context, in *UpdateAccountPasswordRequest, opts ...grpc.CallOption) (*UpdateAccountPasswordResponse, error)
	RotateAccountClientSecret(ctx context.Context, in *RotateAccountClientSecretRequest, opts ...grpc.CallOption) (*RotateAccountClientSecretResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	GetRoleAssignment(ctx context.Context, in *GetRoleAssignmentRequest, opts ...grpc.CallOption) (*RoleAssignment, error)
	ListRoleAssignments(ctx context.Context, in *ListRoleAssignmentsRequest, opts ...grpc.CallOption) (*ListRoleAssignmentsResponse, error)
	CreateRoleAssignment(ctx context.Context, in *CreateRoleAssignmentRequest, opts ...grpc.CallOption) (*RoleAssignment, error)
	DeleteRoleAssignment(ctx context.Context, in *DeleteRoleAssignmentRequest, opts ...grpc.CallOption) (*DeleteRoleAssignmentResponse, error)
}

type accountApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountApiClient(cc grpc.ClientConnInterface) AccountApiClient {
	return &accountApiClient{cc}
}

func (c *accountApiClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountApi_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, AccountApi_ListAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountApi_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, AccountApi_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) UpdateAccountPassword(ctx context.Context, in *UpdateAccountPasswordRequest, opts ...grpc.CallOption) (*UpdateAccountPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountPasswordResponse)
	err := c.cc.Invoke(ctx, AccountApi_UpdateAccountPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) RotateAccountClientSecret(ctx context.Context, in *RotateAccountClientSecretRequest, opts ...grpc.CallOption) (*RotateAccountClientSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotateAccountClientSecretResponse)
	err := c.cc.Invoke(ctx, AccountApi_RotateAccountClientSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, AccountApi_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, AccountApi_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, AccountApi_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, AccountApi_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Role)
	err := c.cc.Invoke(ctx, AccountApi_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, AccountApi_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) GetRoleAssignment(ctx context.Context, in *GetRoleAssignmentRequest, opts ...grpc.CallOption) (*RoleAssignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleAssignment)
	err := c.cc.Invoke(ctx, AccountApi_GetRoleAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) ListRoleAssignments(ctx context.Context, in *ListRoleAssignmentsRequest, opts ...grpc.CallOption) (*ListRoleAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoleAssignmentsResponse)
	err := c.cc.Invoke(ctx, AccountApi_ListRoleAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) CreateRoleAssignment(ctx context.Context, in *CreateRoleAssignmentRequest, opts ...grpc.CallOption) (*RoleAssignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoleAssignment)
	err := c.cc.Invoke(ctx, AccountApi_CreateRoleAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountApiClient) DeleteRoleAssignment(ctx context.Context, in *DeleteRoleAssignmentRequest, opts ...grpc.CallOption) (*DeleteRoleAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleAssignmentResponse)
	err := c.cc.Invoke(ctx, AccountApi_DeleteRoleAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountApiServer is the server API for AccountApi service.
// All implementations must embed UnimplementedAccountApiServer
// for forward compatibility.
type AccountApiServer interface {
	GetAccount(context.Context, *GetAccountRequest) (*Account, error)
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*Account, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error)
	// Updates the password for a user account.
	// If the new_password does not comply with the password policy, the request will fail with INVALID_ARGUMENT.
	// If the old_password is supplied and does not match the current password, the request will fail with FAILED_PRECONDITION.
	UpdateAccountPassword(context.Context, *UpdateAccountPasswordRequest) (*UpdateAccountPasswordResponse, error)
	RotateAccountClientSecret(context.Context, *RotateAccountClientSecretRequest) (*RotateAccountClientSecretResponse, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*Role, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*Role, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*Role, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	GetRoleAssignment(context.Context, *GetRoleAssignmentRequest) (*RoleAssignment, error)
	ListRoleAssignments(context.Context, *ListRoleAssignmentsRequest) (*ListRoleAssignmentsResponse, error)
	CreateRoleAssignment(context.Context, *CreateRoleAssignmentRequest) (*RoleAssignment, error)
	DeleteRoleAssignment(context.Context, *DeleteRoleAssignmentRequest) (*DeleteRoleAssignmentResponse, error)
	mustEmbedUnimplementedAccountApiServer()
}

// UnimplementedAccountApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountApiServer struct{}

func (UnimplementedAccountApiServer) GetAccount(context.Context, *GetAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountApiServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedAccountApiServer) CreateAccount(context.Context, *CreateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountApiServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountApiServer) UpdateAccountPassword(context.Context, *UpdateAccountPasswordRequest) (*UpdateAccountPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountPassword not implemented")
}
func (UnimplementedAccountApiServer) RotateAccountClientSecret(context.Context, *RotateAccountClientSecretRequest) (*RotateAccountClientSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateAccountClientSecret not implemented")
}
func (UnimplementedAccountApiServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountApiServer) GetRole(context.Context, *GetRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAccountApiServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedAccountApiServer) CreateRole(context.Context, *CreateRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAccountApiServer) UpdateRole(context.Context, *UpdateRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAccountApiServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAccountApiServer) GetRoleAssignment(context.Context, *GetRoleAssignmentRequest) (*RoleAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleAssignment not implemented")
}
func (UnimplementedAccountApiServer) ListRoleAssignments(context.Context, *ListRoleAssignmentsRequest) (*ListRoleAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleAssignments not implemented")
}
func (UnimplementedAccountApiServer) CreateRoleAssignment(context.Context, *CreateRoleAssignmentRequest) (*RoleAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleAssignment not implemented")
}
func (UnimplementedAccountApiServer) DeleteRoleAssignment(context.Context, *DeleteRoleAssignmentRequest) (*DeleteRoleAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleAssignment not implemented")
}
func (UnimplementedAccountApiServer) mustEmbedUnimplementedAccountApiServer() {}
func (UnimplementedAccountApiServer) testEmbeddedByValue()                    {}

// UnsafeAccountApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountApiServer will
// result in compilation errors.
type UnsafeAccountApiServer interface {
	mustEmbedUnimplementedAccountApiServer()
}

func RegisterAccountApiServer(s grpc.ServiceRegistrar, srv AccountApiServer) {
	// If the following call pancis, it indicates UnimplementedAccountApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountApi_ServiceDesc, srv)
}

func _AccountApi_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_UpdateAccountPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).UpdateAccountPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_UpdateAccountPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).UpdateAccountPassword(ctx, req.(*UpdateAccountPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_RotateAccountClientSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateAccountClientSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).RotateAccountClientSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_RotateAccountClientSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).RotateAccountClientSecret(ctx, req.(*RotateAccountClientSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_GetRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).GetRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_GetRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).GetRoleAssignment(ctx, req.(*GetRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_ListRoleAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).ListRoleAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_ListRoleAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).ListRoleAssignments(ctx, req.(*ListRoleAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_CreateRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).CreateRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_CreateRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).CreateRoleAssignment(ctx, req.(*CreateRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountApi_DeleteRoleAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountApiServer).DeleteRoleAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountApi_DeleteRoleAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountApiServer).DeleteRoleAssignment(ctx, req.(*DeleteRoleAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountApi_ServiceDesc is the grpc.ServiceDesc for AccountApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.AccountApi",
	HandlerType: (*AccountApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _AccountApi_GetAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _AccountApi_ListAccounts_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountApi_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountApi_UpdateAccount_Handler,
		},
		{
			MethodName: "UpdateAccountPassword",
			Handler:    _AccountApi_UpdateAccountPassword_Handler,
		},
		{
			MethodName: "RotateAccountClientSecret",
			Handler:    _AccountApi_RotateAccountClientSecret_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountApi_DeleteAccount_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _AccountApi_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _AccountApi_ListRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AccountApi_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AccountApi_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AccountApi_DeleteRole_Handler,
		},
		{
			MethodName: "GetRoleAssignment",
			Handler:    _AccountApi_GetRoleAssignment_Handler,
		},
		{
			MethodName: "ListRoleAssignments",
			Handler:    _AccountApi_ListRoleAssignments_Handler,
		},
		{
			MethodName: "CreateRoleAssignment",
			Handler:    _AccountApi_CreateRoleAssignment_Handler,
		},
		{
			MethodName: "DeleteRoleAssignment",
			Handler:    _AccountApi_DeleteRoleAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}

const (
	AccountInfo_GetPermission_FullMethodName    = "/smartcore.bos.AccountInfo/GetPermission"
	AccountInfo_ListPermissions_FullMethodName  = "/smartcore.bos.AccountInfo/ListPermissions"
	AccountInfo_GetAccountLimits_FullMethodName = "/smartcore.bos.AccountInfo/GetAccountLimits"
)

// AccountInfoClient is the client API for AccountInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountInfoClient interface {
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*Permission, error)
	ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	GetAccountLimits(ctx context.Context, in *GetAccountLimitsRequest, opts ...grpc.CallOption) (*AccountLimits, error)
}

type accountInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountInfoClient(cc grpc.ClientConnInterface) AccountInfoClient {
	return &accountInfoClient{cc}
}

func (c *accountInfoClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*Permission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Permission)
	err := c.cc.Invoke(ctx, AccountInfo_GetPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInfoClient) ListPermissions(ctx context.Context, in *ListPermissionsRequest, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, AccountInfo_ListPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInfoClient) GetAccountLimits(ctx context.Context, in *GetAccountLimitsRequest, opts ...grpc.CallOption) (*AccountLimits, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountLimits)
	err := c.cc.Invoke(ctx, AccountInfo_GetAccountLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountInfoServer is the server API for AccountInfo service.
// All implementations must embed UnimplementedAccountInfoServer
// for forward compatibility.
type AccountInfoServer interface {
	GetPermission(context.Context, *GetPermissionRequest) (*Permission, error)
	ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error)
	GetAccountLimits(context.Context, *GetAccountLimitsRequest) (*AccountLimits, error)
	mustEmbedUnimplementedAccountInfoServer()
}

// UnimplementedAccountInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccountInfoServer struct{}

func (UnimplementedAccountInfoServer) GetPermission(context.Context, *GetPermissionRequest) (*Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedAccountInfoServer) ListPermissions(context.Context, *ListPermissionsRequest) (*ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedAccountInfoServer) GetAccountLimits(context.Context, *GetAccountLimitsRequest) (*AccountLimits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountLimits not implemented")
}
func (UnimplementedAccountInfoServer) mustEmbedUnimplementedAccountInfoServer() {}
func (UnimplementedAccountInfoServer) testEmbeddedByValue()                     {}

// UnsafeAccountInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountInfoServer will
// result in compilation errors.
type UnsafeAccountInfoServer interface {
	mustEmbedUnimplementedAccountInfoServer()
}

func RegisterAccountInfoServer(s grpc.ServiceRegistrar, srv AccountInfoServer) {
	// If the following call pancis, it indicates UnimplementedAccountInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccountInfo_ServiceDesc, srv)
}

func _AccountInfo_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInfoServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInfo_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInfoServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInfo_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInfoServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInfo_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInfoServer).ListPermissions(ctx, req.(*ListPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInfo_GetAccountLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInfoServer).GetAccountLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountInfo_GetAccountLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInfoServer).GetAccountLimits(ctx, req.(*GetAccountLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountInfo_ServiceDesc is the grpc.ServiceDesc for AccountInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.AccountInfo",
	HandlerType: (*AccountInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPermission",
			Handler:    _AccountInfo_GetPermission_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _AccountInfo_ListPermissions_Handler,
		},
		{
			MethodName: "GetAccountLimits",
			Handler:    _AccountInfo_GetAccountLimits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
