// Code generated by protoc-gen-router. DO NOT EDIT.

package gen

import (
	"context"
	"fmt"

	"google.golang.org/grpc"

	"github.com/smart-core-os/sc-golang/pkg/router"
)

// StatusHistoryRouter is a gen.StatusHistoryServer that allows routing named requests to specific gen.StatusHistoryClient
type StatusHistoryRouter struct {
	UnimplementedStatusHistoryServer

	router.Router
}

// compile time check that we implement the interface we need
var _ StatusHistoryServer = (*StatusHistoryRouter)(nil)

func NewStatusHistoryRouter(opts ...router.Option) *StatusHistoryRouter {
	return &StatusHistoryRouter{
		Router: router.NewRouter(opts...),
	}
}

// WithStatusHistoryClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithStatusHistoryClientFactory(f func(name string) (StatusHistoryClient, error)) router.Option {
	return router.WithFactory(func(name string) (any, error) {
		return f(name)
	})
}

func (r *StatusHistoryRouter) Register(server grpc.ServiceRegistrar) {
	RegisterStatusHistoryServer(server, r)
}

// Add extends Router.Add to panic if client is not of type gen.StatusHistoryClient.
func (r *StatusHistoryRouter) Add(name string, client any) any {
	if !r.HoldsType(client) {
		panic(fmt.Sprintf("not correct type: client of type %T is not a gen.StatusHistoryClient", client))
	}
	return r.Router.Add(name, client)
}

func (r *StatusHistoryRouter) HoldsType(client any) bool {
	_, ok := client.(StatusHistoryClient)
	return ok
}

func (r *StatusHistoryRouter) AddStatusHistoryClient(name string, client StatusHistoryClient) StatusHistoryClient {
	res := r.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(StatusHistoryClient)
}

func (r *StatusHistoryRouter) RemoveStatusHistoryClient(name string) StatusHistoryClient {
	res := r.Remove(name)
	if res == nil {
		return nil
	}
	return res.(StatusHistoryClient)
}

func (r *StatusHistoryRouter) GetStatusHistoryClient(name string) (StatusHistoryClient, error) {
	res, err := r.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(StatusHistoryClient), nil
}

func (r *StatusHistoryRouter) ListCurrentStatusHistory(ctx context.Context, request *ListCurrentStatusHistoryRequest) (*ListCurrentStatusHistoryResponse, error) {
	child, err := r.GetStatusHistoryClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ListCurrentStatusHistory(ctx, request)
}
