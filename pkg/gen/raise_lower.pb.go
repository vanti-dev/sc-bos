// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.1
// source: raise_lower.proto

package gen

import (
	types "github.com/smart-core-os/sc-api/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BearerState_Direction int32

const (
	BearerState_DIRECTION_UNKNOWN BearerState_Direction = 0
	BearerState_NO_DIRECTION      BearerState_Direction = 1
	BearerState_UP                BearerState_Direction = 2
	BearerState_DOWN              BearerState_Direction = 3
)

// Enum value maps for BearerState_Direction.
var (
	BearerState_Direction_name = map[int32]string{
		0: "DIRECTION_UNKNOWN",
		1: "NO_DIRECTION",
		2: "UP",
		3: "DOWN",
	}
	BearerState_Direction_value = map[string]int32{
		"DIRECTION_UNKNOWN": 0,
		"NO_DIRECTION":      1,
		"UP":                2,
		"DOWN":              3,
	}
)

func (x BearerState_Direction) Enum() *BearerState_Direction {
	p := new(BearerState_Direction)
	*p = x
	return p
}

func (x BearerState_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BearerState_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_raise_lower_proto_enumTypes[0].Descriptor()
}

func (BearerState_Direction) Type() protoreflect.EnumType {
	return &file_raise_lower_proto_enumTypes[0]
}

func (x BearerState_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BearerState_Direction.Descriptor instead.
func (BearerState_Direction) EnumDescriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{0, 0}
}

type BearerState_DoorStatus int32

const (
	BearerState_DOOR_STATUS_UNKNOWN BearerState_DoorStatus = 0
	BearerState_CLOSED              BearerState_DoorStatus = 1
	BearerState_OPEN                BearerState_DoorStatus = 2
	BearerState_OPENING             BearerState_DoorStatus = 3
	BearerState_CLOSING             BearerState_DoorStatus = 4
	// The door is safety locked
	BearerState_SAFETY_LOCKED BearerState_DoorStatus = 5
	// The door remains in a position that is not fully open or closed.
	BearerState_LIMITED_OPENED BearerState_DoorStatus = 6
)

// Enum value maps for BearerState_DoorStatus.
var (
	BearerState_DoorStatus_name = map[int32]string{
		0: "DOOR_STATUS_UNKNOWN",
		1: "CLOSED",
		2: "OPEN",
		3: "OPENING",
		4: "CLOSING",
		5: "SAFETY_LOCKED",
		6: "LIMITED_OPENED",
	}
	BearerState_DoorStatus_value = map[string]int32{
		"DOOR_STATUS_UNKNOWN": 0,
		"CLOSED":              1,
		"OPEN":                2,
		"OPENING":             3,
		"CLOSING":             4,
		"SAFETY_LOCKED":       5,
		"LIMITED_OPENED":      6,
	}
)

func (x BearerState_DoorStatus) Enum() *BearerState_DoorStatus {
	p := new(BearerState_DoorStatus)
	*p = x
	return p
}

func (x BearerState_DoorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BearerState_DoorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_raise_lower_proto_enumTypes[1].Descriptor()
}

func (BearerState_DoorStatus) Type() protoreflect.EnumType {
	return &file_raise_lower_proto_enumTypes[1]
}

func (x BearerState_DoorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BearerState_DoorStatus.Descriptor instead.
func (BearerState_DoorStatus) EnumDescriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{0, 1}
}

type BearerState_Mode int32

const (
	BearerState_MODE_UNKNOWN BearerState_Mode = 0
	BearerState_NORMAL       BearerState_Mode = 1
	// The bearer is in service or inspection control
	BearerState_SERVICE_CONTROL BearerState_Mode = 2
	// The bearer is under a firefighter bearer or firefighting bearer mode of control. This usually happens
	// during a fire alarm when firemen are on the site.
	BearerState_FIREFIGHTER_CONTROL BearerState_Mode = 3
	BearerState_OUT_OF_SERVICE      BearerState_Mode = 4
	// The bearer is being operated by emergency power and may be in limited operation.
	BearerState_EMERGENCY_POWER BearerState_Mode = 5
	// The bearer will not respond to any instruction until the VIP has reached their destination.
	BearerState_VIP_CONTROL          BearerState_Mode = 6
	BearerState_EARTHQUAKE_OPERATION BearerState_Mode = 7
	BearerState_FIRE_OPERATION       BearerState_Mode = 8
	// The bearer is being manually operated by an attendant.
	BearerState_ATTENDANT_CONTROL BearerState_Mode = 9
	// The bearer is manually or automatically parked at a predefined floor and will not provide
	// any further service. This usually happens in a low traffic condition for the purpose of
	// energy saving.
	BearerState_PARKING BearerState_Mode = 10
	// The bearer is returning to its home position, usually the lobby or ground floor.
	BearerState_HOMING BearerState_Mode = 11
	// Control of the bearer is performed from a control panel in the control cabinet. The bearer is not
	// available for normal operation.
	BearerState_CABINET_RECALL BearerState_Mode = 12
	// The bearer is under an occupant evacuation mode of control. This usually happens during a
	// fire alarm when the bearer is used for evacuation of occupants.
	BearerState_OCCUPANT_EVACUATION BearerState_Mode = 13
	// The bearer is operational but is reserved for the transportation of goods only.
	BearerState_FREIGHT             BearerState_Mode = 14
	BearerState_FAILURE             BearerState_Mode = 15
	BearerState_REDUCED_SPEED       BearerState_Mode = 16
	BearerState_STORM_OPERATION     BearerState_Mode = 17
	BearerState_HIGH_WIND_OPERATION BearerState_Mode = 18
)

// Enum value maps for BearerState_Mode.
var (
	BearerState_Mode_name = map[int32]string{
		0:  "MODE_UNKNOWN",
		1:  "NORMAL",
		2:  "SERVICE_CONTROL",
		3:  "FIREFIGHTER_CONTROL",
		4:  "OUT_OF_SERVICE",
		5:  "EMERGENCY_POWER",
		6:  "VIP_CONTROL",
		7:  "EARTHQUAKE_OPERATION",
		8:  "FIRE_OPERATION",
		9:  "ATTENDANT_CONTROL",
		10: "PARKING",
		11: "HOMING",
		12: "CABINET_RECALL",
		13: "OCCUPANT_EVACUATION",
		14: "FREIGHT",
		15: "FAILURE",
		16: "REDUCED_SPEED",
		17: "STORM_OPERATION",
		18: "HIGH_WIND_OPERATION",
	}
	BearerState_Mode_value = map[string]int32{
		"MODE_UNKNOWN":         0,
		"NORMAL":               1,
		"SERVICE_CONTROL":      2,
		"FIREFIGHTER_CONTROL":  3,
		"OUT_OF_SERVICE":       4,
		"EMERGENCY_POWER":      5,
		"VIP_CONTROL":          6,
		"EARTHQUAKE_OPERATION": 7,
		"FIRE_OPERATION":       8,
		"ATTENDANT_CONTROL":    9,
		"PARKING":              10,
		"HOMING":               11,
		"CABINET_RECALL":       12,
		"OCCUPANT_EVACUATION":  13,
		"FREIGHT":              14,
		"FAILURE":              15,
		"REDUCED_SPEED":        16,
		"STORM_OPERATION":      17,
		"HIGH_WIND_OPERATION":  18,
	}
)

func (x BearerState_Mode) Enum() *BearerState_Mode {
	p := new(BearerState_Mode)
	*p = x
	return p
}

func (x BearerState_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BearerState_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_raise_lower_proto_enumTypes[2].Descriptor()
}

func (BearerState_Mode) Type() protoreflect.EnumType {
	return &file_raise_lower_proto_enumTypes[2]
}

func (x BearerState_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BearerState_Mode.Descriptor instead.
func (BearerState_Mode) EnumDescriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{0, 2}
}

type BearerState_Fault int32

const (
	BearerState_FAULT_UNKNOWN              BearerState_Fault = 0
	BearerState_CONTROLLER_FAULT           BearerState_Fault = 1
	BearerState_DRIVE_AND_MOTOR_FAULT      BearerState_Fault = 2
	BearerState_MECHANICAL_COMPONENT_FAULT BearerState_Fault = 3
	BearerState_OVERSPEED_FAULT            BearerState_Fault = 4
	BearerState_POWER_SUPPLY_FAULT         BearerState_Fault = 5
	BearerState_SAFETY_DEVICE_FAULT        BearerState_Fault = 6
	BearerState_CONTROLLER_SUPPLY_FAULT    BearerState_Fault = 7
	BearerState_DRIVE_TEMPERATURE_EXCEEDED BearerState_Fault = 8
	// A comb plate safety switch is activated.
	BearerState_COMB_PLATE_FAULT           BearerState_Fault = 9
	BearerState_GENERAL_FAULT              BearerState_Fault = 10
	BearerState_DOOR_FAULT                 BearerState_Fault = 11
	BearerState_LEVELLING_FAULT            BearerState_Fault = 12
	BearerState_SAFETY_CIRCUIT_BREAK_FAULT BearerState_Fault = 13
	BearerState_FAIL_TO_START              BearerState_Fault = 14
	BearerState_ALARM_BUTTON               BearerState_Fault = 15
	BearerState_DOOR_NOT_CLOSING           BearerState_Fault = 16
)

// Enum value maps for BearerState_Fault.
var (
	BearerState_Fault_name = map[int32]string{
		0:  "FAULT_UNKNOWN",
		1:  "CONTROLLER_FAULT",
		2:  "DRIVE_AND_MOTOR_FAULT",
		3:  "MECHANICAL_COMPONENT_FAULT",
		4:  "OVERSPEED_FAULT",
		5:  "POWER_SUPPLY_FAULT",
		6:  "SAFETY_DEVICE_FAULT",
		7:  "CONTROLLER_SUPPLY_FAULT",
		8:  "DRIVE_TEMPERATURE_EXCEEDED",
		9:  "COMB_PLATE_FAULT",
		10: "GENERAL_FAULT",
		11: "DOOR_FAULT",
		12: "LEVELLING_FAULT",
		13: "SAFETY_CIRCUIT_BREAK_FAULT",
		14: "FAIL_TO_START",
		15: "ALARM_BUTTON",
		16: "DOOR_NOT_CLOSING",
	}
	BearerState_Fault_value = map[string]int32{
		"FAULT_UNKNOWN":              0,
		"CONTROLLER_FAULT":           1,
		"DRIVE_AND_MOTOR_FAULT":      2,
		"MECHANICAL_COMPONENT_FAULT": 3,
		"OVERSPEED_FAULT":            4,
		"POWER_SUPPLY_FAULT":         5,
		"SAFETY_DEVICE_FAULT":        6,
		"CONTROLLER_SUPPLY_FAULT":    7,
		"DRIVE_TEMPERATURE_EXCEEDED": 8,
		"COMB_PLATE_FAULT":           9,
		"GENERAL_FAULT":              10,
		"DOOR_FAULT":                 11,
		"LEVELLING_FAULT":            12,
		"SAFETY_CIRCUIT_BREAK_FAULT": 13,
		"FAIL_TO_START":              14,
		"ALARM_BUTTON":               15,
		"DOOR_NOT_CLOSING":           16,
	}
)

func (x BearerState_Fault) Enum() *BearerState_Fault {
	p := new(BearerState_Fault)
	*p = x
	return p
}

func (x BearerState_Fault) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BearerState_Fault) Descriptor() protoreflect.EnumDescriptor {
	return file_raise_lower_proto_enumTypes[3].Descriptor()
}

func (BearerState_Fault) Type() protoreflect.EnumType {
	return &file_raise_lower_proto_enumTypes[3]
}

func (x BearerState_Fault) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BearerState_Fault.Descriptor instead.
func (BearerState_Fault) EnumDescriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{0, 3}
}

// BearerState describes the current state of the bearer.
type BearerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current floor number of the bearer.
	CurrentFloor int32 `protobuf:"varint,1,opt,name=current_floor,json=currentFloor,proto3" json:"current_floor,omitempty"`
	// The next floor number the bearer will stop at.
	NextStoppingFloor int32 `protobuf:"varint,2,opt,name=next_stopping_floor,json=nextStoppingFloor,proto3" json:"next_stopping_floor,omitempty"`
	// The direction the bearer is moving.
	MovingDirection BearerState_Direction `protobuf:"varint,3,opt,name=moving_direction,json=movingDirection,proto3,enum=smartcore.bos.BearerState_Direction" json:"moving_direction,omitempty"`
	// The amount of load being carried. The units this is measured in is implementation specific. See BearerStateSupport
	Load float32 `protobuf:"fixed32,4,opt,name=load,proto3" json:"load,omitempty"`
	// The status of each the door(s) of the bearer. For multiple doors, use BearerStateSupport to identify multiple doors.
	DoorStatus []BearerState_DoorStatus `protobuf:"varint,5,rep,packed,name=door_status,json=doorStatus,proto3,enum=smartcore.bos.BearerState_DoorStatus" json:"door_status,omitempty"`
	// The mode the bearer is in. This will often be used to describe the mode of lifts.
	Mode BearerState_Mode `protobuf:"varint,6,opt,name=mode,proto3,enum=smartcore.bos.BearerState_Mode" json:"mode,omitempty"`
	// A list of active fault signals being reported.
	Faults []BearerState_Fault `protobuf:"varint,7,rep,packed,name=faults,proto3,enum=smartcore.bos.BearerState_Fault" json:"faults,omitempty"`
	// True if the passenger alarm has been activated.
	PassengerAlarm bool `protobuf:"varint,8,opt,name=passenger_alarm,json=passengerAlarm,proto3" json:"passenger_alarm,omitempty"`
}

func (x *BearerState) Reset() {
	*x = BearerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raise_lower_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BearerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerState) ProtoMessage() {}

func (x *BearerState) ProtoReflect() protoreflect.Message {
	mi := &file_raise_lower_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerState.ProtoReflect.Descriptor instead.
func (*BearerState) Descriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{0}
}

func (x *BearerState) GetCurrentFloor() int32 {
	if x != nil {
		return x.CurrentFloor
	}
	return 0
}

func (x *BearerState) GetNextStoppingFloor() int32 {
	if x != nil {
		return x.NextStoppingFloor
	}
	return 0
}

func (x *BearerState) GetMovingDirection() BearerState_Direction {
	if x != nil {
		return x.MovingDirection
	}
	return BearerState_DIRECTION_UNKNOWN
}

func (x *BearerState) GetLoad() float32 {
	if x != nil {
		return x.Load
	}
	return 0
}

func (x *BearerState) GetDoorStatus() []BearerState_DoorStatus {
	if x != nil {
		return x.DoorStatus
	}
	return nil
}

func (x *BearerState) GetMode() BearerState_Mode {
	if x != nil {
		return x.Mode
	}
	return BearerState_MODE_UNKNOWN
}

func (x *BearerState) GetFaults() []BearerState_Fault {
	if x != nil {
		return x.Faults
	}
	return nil
}

func (x *BearerState) GetPassengerAlarm() bool {
	if x != nil {
		return x.PassengerAlarm
	}
	return false
}

type BearerStateSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How a named device supports read/write/pull apis
	ResourceSupport *types.ResourceSupport `protobuf:"bytes,1,opt,name=resource_support,json=resourceSupport,proto3" json:"resource_support,omitempty"`
	// The unit associated with the load value, e.g. kg, % of maximum load.
	Unit string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	// Describes the doors of the bearer
	Doors []*BearerStateSupport_DoorInfo `protobuf:"bytes,3,rep,name=doors,proto3" json:"doors,omitempty"`
	// The maximum load the bearer can carry, in kg, if known.
	// This can be used to calculate the current load weight if the load is reported as a percentage of the maximum load.
	MaxLoad int32 `protobuf:"varint,4,opt,name=max_load,json=maxLoad,proto3" json:"max_load,omitempty"`
}

func (x *BearerStateSupport) Reset() {
	*x = BearerStateSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raise_lower_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BearerStateSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerStateSupport) ProtoMessage() {}

func (x *BearerStateSupport) ProtoReflect() protoreflect.Message {
	mi := &file_raise_lower_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerStateSupport.ProtoReflect.Descriptor instead.
func (*BearerStateSupport) Descriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{1}
}

func (x *BearerStateSupport) GetResourceSupport() *types.ResourceSupport {
	if x != nil {
		return x.ResourceSupport
	}
	return nil
}

func (x *BearerStateSupport) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *BearerStateSupport) GetDoors() []*BearerStateSupport_DoorInfo {
	if x != nil {
		return x.Doors
	}
	return nil
}

func (x *BearerStateSupport) GetMaxLoad() int32 {
	if x != nil {
		return x.MaxLoad
	}
	return 0
}

// GetLoadStateRequest is used to request the current state of the bearer.
type GetBearerStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetBearerStateRequest) Reset() {
	*x = GetBearerStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raise_lower_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBearerStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBearerStateRequest) ProtoMessage() {}

func (x *GetBearerStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raise_lower_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBearerStateRequest.ProtoReflect.Descriptor instead.
func (*GetBearerStateRequest) Descriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{2}
}

func (x *GetBearerStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetBearerStateRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type DescribeBearerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DescribeBearerRequest) Reset() {
	*x = DescribeBearerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raise_lower_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeBearerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeBearerRequest) ProtoMessage() {}

func (x *DescribeBearerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raise_lower_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeBearerRequest.ProtoReflect.Descriptor instead.
func (*DescribeBearerRequest) Descriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeBearerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PullBearerStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	UpdatesOnly bool                   `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullBearerStateRequest) Reset() {
	*x = PullBearerStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raise_lower_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullBearerStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullBearerStateRequest) ProtoMessage() {}

func (x *PullBearerStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raise_lower_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullBearerStateRequest.ProtoReflect.Descriptor instead.
func (*PullBearerStateRequest) Descriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{4}
}

func (x *PullBearerStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullBearerStateRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullBearerStateRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullBearerStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*PullBearerStateResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullBearerStateResponse) Reset() {
	*x = PullBearerStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raise_lower_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullBearerStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullBearerStateResponse) ProtoMessage() {}

func (x *PullBearerStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raise_lower_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullBearerStateResponse.ProtoReflect.Descriptor instead.
func (*PullBearerStateResponse) Descriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{5}
}

func (x *PullBearerStateResponse) GetChanges() []*PullBearerStateResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type BearerStateSupport_DoorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the door. This is used as the index in the doors array in bearerState.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Description of the door, front, rear, etc.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// If the bearer has multiple decks, this is the deck the door is on. 0 is the lowest deck.
	Deck int32 `protobuf:"varint,3,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *BearerStateSupport_DoorInfo) Reset() {
	*x = BearerStateSupport_DoorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raise_lower_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BearerStateSupport_DoorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerStateSupport_DoorInfo) ProtoMessage() {}

func (x *BearerStateSupport_DoorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_raise_lower_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerStateSupport_DoorInfo.ProtoReflect.Descriptor instead.
func (*BearerStateSupport_DoorInfo) Descriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BearerStateSupport_DoorInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BearerStateSupport_DoorInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BearerStateSupport_DoorInfo) GetDeck() int32 {
	if x != nil {
		return x.Deck
	}
	return 0
}

type PullBearerStateResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ChangeTime  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	BearerState *BearerState           `protobuf:"bytes,3,opt,name=bearer_state,json=bearerState,proto3" json:"bearer_state,omitempty"`
}

func (x *PullBearerStateResponse_Change) Reset() {
	*x = PullBearerStateResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raise_lower_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullBearerStateResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullBearerStateResponse_Change) ProtoMessage() {}

func (x *PullBearerStateResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_raise_lower_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullBearerStateResponse_Change.ProtoReflect.Descriptor instead.
func (*PullBearerStateResponse_Change) Descriptor() ([]byte, []int) {
	return file_raise_lower_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PullBearerStateResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullBearerStateResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullBearerStateResponse_Change) GetBearerState() *BearerState {
	if x != nil {
		return x.BearerState
	}
	return nil
}

var File_raise_lower_proto protoreflect.FileDescriptor

var file_raise_lower_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x61, 0x69, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62,
	0x6f, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x0a, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x10,
	0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x6f,
	0x76, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x64,
	0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x38,
	0x0a, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x22, 0x46, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x22, 0x7c, 0x0a, 0x0a, 0x44, 0x6f, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x4f, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x06, 0x22, 0xf2, 0x02, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x52, 0x45, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41, 0x52, 0x54, 0x48, 0x51,
	0x55, 0x41, 0x4b, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x41, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x41, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x4f, 0x4d, 0x49,
	0x4e, 0x47, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x42, 0x49, 0x4e, 0x45, 0x54, 0x5f,
	0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x43, 0x43, 0x55,
	0x50, 0x41, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x41, 0x43, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x52, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0e, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x45, 0x44, 0x55, 0x43, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x10, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x57, 0x49, 0x4e, 0x44,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x22, 0x97, 0x03, 0x0a,
	0x05, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x54,
	0x4f, 0x52, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45,
	0x43, 0x48, 0x41, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x56,
	0x45, 0x52, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x41, 0x46, 0x45, 0x54,
	0x59, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x06,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x07, 0x12, 0x1e, 0x0a,
	0x1a, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x08, 0x12, 0x14, 0x0a,
	0x10, 0x43, 0x4f, 0x4d, 0x42, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x5f, 0x42, 0x52,
	0x45, 0x41, 0x4b, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x41, 0x49, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0e, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x0f,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x22, 0xa4, 0x02, 0x0a, 0x12, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x40,
	0x0a, 0x05, 0x64, 0x6f, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x42, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x64, 0x6f, 0x6f, 0x72, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x61, 0x64, 0x1a, 0x50, 0x0a, 0x08, 0x44,
	0x6f, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x22, 0x64, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x2b, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x88, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xfd, 0x01, 0x0a, 0x17,
	0x50, 0x75, 0x6c, 0x6c, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x1a, 0x98, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0xc7, 0x01, 0x0a, 0x0d,
	0x52, 0x61, 0x69, 0x73, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x70, 0x69, 0x12, 0x52, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x62, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x70, 0x0a, 0x0e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6e, 0x74, 0x69, 0x2d, 0x64, 0x65, 0x76, 0x2f,
	0x73, 0x63, 0x2d, 0x62, 0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_raise_lower_proto_rawDescOnce sync.Once
	file_raise_lower_proto_rawDescData = file_raise_lower_proto_rawDesc
)

func file_raise_lower_proto_rawDescGZIP() []byte {
	file_raise_lower_proto_rawDescOnce.Do(func() {
		file_raise_lower_proto_rawDescData = protoimpl.X.CompressGZIP(file_raise_lower_proto_rawDescData)
	})
	return file_raise_lower_proto_rawDescData
}

var file_raise_lower_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_raise_lower_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_raise_lower_proto_goTypes = []any{
	(BearerState_Direction)(0),             // 0: smartcore.bos.BearerState.Direction
	(BearerState_DoorStatus)(0),            // 1: smartcore.bos.BearerState.DoorStatus
	(BearerState_Mode)(0),                  // 2: smartcore.bos.BearerState.Mode
	(BearerState_Fault)(0),                 // 3: smartcore.bos.BearerState.Fault
	(*BearerState)(nil),                    // 4: smartcore.bos.BearerState
	(*BearerStateSupport)(nil),             // 5: smartcore.bos.BearerStateSupport
	(*GetBearerStateRequest)(nil),          // 6: smartcore.bos.GetBearerStateRequest
	(*DescribeBearerRequest)(nil),          // 7: smartcore.bos.DescribeBearerRequest
	(*PullBearerStateRequest)(nil),         // 8: smartcore.bos.PullBearerStateRequest
	(*PullBearerStateResponse)(nil),        // 9: smartcore.bos.PullBearerStateResponse
	(*BearerStateSupport_DoorInfo)(nil),    // 10: smartcore.bos.BearerStateSupport.DoorInfo
	(*PullBearerStateResponse_Change)(nil), // 11: smartcore.bos.PullBearerStateResponse.Change
	(*types.ResourceSupport)(nil),          // 12: smartcore.types.ResourceSupport
	(*fieldmaskpb.FieldMask)(nil),          // 13: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),          // 14: google.protobuf.Timestamp
}
var file_raise_lower_proto_depIdxs = []int32{
	0,  // 0: smartcore.bos.BearerState.moving_direction:type_name -> smartcore.bos.BearerState.Direction
	1,  // 1: smartcore.bos.BearerState.door_status:type_name -> smartcore.bos.BearerState.DoorStatus
	2,  // 2: smartcore.bos.BearerState.mode:type_name -> smartcore.bos.BearerState.Mode
	3,  // 3: smartcore.bos.BearerState.faults:type_name -> smartcore.bos.BearerState.Fault
	12, // 4: smartcore.bos.BearerStateSupport.resource_support:type_name -> smartcore.types.ResourceSupport
	10, // 5: smartcore.bos.BearerStateSupport.doors:type_name -> smartcore.bos.BearerStateSupport.DoorInfo
	13, // 6: smartcore.bos.GetBearerStateRequest.read_mask:type_name -> google.protobuf.FieldMask
	13, // 7: smartcore.bos.PullBearerStateRequest.read_mask:type_name -> google.protobuf.FieldMask
	11, // 8: smartcore.bos.PullBearerStateResponse.changes:type_name -> smartcore.bos.PullBearerStateResponse.Change
	14, // 9: smartcore.bos.PullBearerStateResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	4,  // 10: smartcore.bos.PullBearerStateResponse.Change.bearer_state:type_name -> smartcore.bos.BearerState
	6,  // 11: smartcore.bos.RaiseLowerApi.GetBearerState:input_type -> smartcore.bos.GetBearerStateRequest
	8,  // 12: smartcore.bos.RaiseLowerApi.PullBearerState:input_type -> smartcore.bos.PullBearerStateRequest
	7,  // 13: smartcore.bos.RaiseLowerInfo.DescribeBearerState:input_type -> smartcore.bos.DescribeBearerRequest
	4,  // 14: smartcore.bos.RaiseLowerApi.GetBearerState:output_type -> smartcore.bos.BearerState
	9,  // 15: smartcore.bos.RaiseLowerApi.PullBearerState:output_type -> smartcore.bos.PullBearerStateResponse
	5,  // 16: smartcore.bos.RaiseLowerInfo.DescribeBearerState:output_type -> smartcore.bos.BearerStateSupport
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_raise_lower_proto_init() }
func file_raise_lower_proto_init() {
	if File_raise_lower_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_raise_lower_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BearerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raise_lower_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*BearerStateSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raise_lower_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetBearerStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raise_lower_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeBearerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raise_lower_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PullBearerStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raise_lower_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PullBearerStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raise_lower_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BearerStateSupport_DoorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raise_lower_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PullBearerStateResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raise_lower_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_raise_lower_proto_goTypes,
		DependencyIndexes: file_raise_lower_proto_depIdxs,
		EnumInfos:         file_raise_lower_proto_enumTypes,
		MessageInfos:      file_raise_lower_proto_msgTypes,
	}.Build()
	File_raise_lower_proto = out.File
	file_raise_lower_proto_rawDesc = nil
	file_raise_lower_proto_goTypes = nil
	file_raise_lower_proto_depIdxs = nil
}
