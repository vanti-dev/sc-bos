// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: health.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HealthApi_ListHealthChecks_FullMethodName = "/smartcore.bos.HealthApi/ListHealthChecks"
	HealthApi_PullHealthChecks_FullMethodName = "/smartcore.bos.HealthApi/PullHealthChecks"
	HealthApi_GetHealthCheck_FullMethodName   = "/smartcore.bos.HealthApi/GetHealthCheck"
	HealthApi_PullHealthCheck_FullMethodName  = "/smartcore.bos.HealthApi/PullHealthCheck"
)

// HealthApiClient is the client API for HealthApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The HealthApi provides access to health information for devices.
//
// Health is the result of one of more checks performed against a device.
// Each check measures a value of the device and compares it against a known good value or range.
// Checks can be as simple as connection checks, in which case no value is measured,
// or as complex as measuring the temperature of a device and comparing it against a range of acceptable values.
//
// When performing a check, the reliability of the check is also recorded.
// Reliability is a measure of how confident we are in the results of the check,
// and generally map to the ability to communicate with the device.
//
// Another device may have an effect on the reliability of this device, like a gateway or the network,
// see the Reliability.cause field.
// An absent cause implies the device is responsible for its own reliability issues.
// Similarly, poor reliability of a device may affect the reliability of other devices,
// see the Reliability.affects field.
//
// Each check can specify that it should be acknowledged when it changes state.
// Health changes that require acknowledgement but have not been acknowledged still require attention from operators.
// The ack_required field says which health state transitions require acknowledgement.
type HealthApiClient interface {
	// List health checks for a named device.
	ListHealthChecks(ctx context.Context, in *ListHealthChecksRequest, opts ...grpc.CallOption) (*ListHealthChecksResponse, error)
	// Pull changes to health checks for a named device.
	PullHealthChecks(ctx context.Context, in *PullHealthChecksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullHealthChecksResponse], error)
	// Get a specific health check for a named device.
	GetHealthCheck(ctx context.Context, in *GetHealthCheckRequest, opts ...grpc.CallOption) (*HealthCheck, error)
	// Pull changes to a specific health check for a named device.
	PullHealthCheck(ctx context.Context, in *PullHealthCheckRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullHealthCheckResponse], error)
}

type healthApiClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthApiClient(cc grpc.ClientConnInterface) HealthApiClient {
	return &healthApiClient{cc}
}

func (c *healthApiClient) ListHealthChecks(ctx context.Context, in *ListHealthChecksRequest, opts ...grpc.CallOption) (*ListHealthChecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHealthChecksResponse)
	err := c.cc.Invoke(ctx, HealthApi_ListHealthChecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthApiClient) PullHealthChecks(ctx context.Context, in *PullHealthChecksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullHealthChecksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HealthApi_ServiceDesc.Streams[0], HealthApi_PullHealthChecks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullHealthChecksRequest, PullHealthChecksResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HealthApi_PullHealthChecksClient = grpc.ServerStreamingClient[PullHealthChecksResponse]

func (c *healthApiClient) GetHealthCheck(ctx context.Context, in *GetHealthCheckRequest, opts ...grpc.CallOption) (*HealthCheck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheck)
	err := c.cc.Invoke(ctx, HealthApi_GetHealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthApiClient) PullHealthCheck(ctx context.Context, in *PullHealthCheckRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullHealthCheckResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HealthApi_ServiceDesc.Streams[1], HealthApi_PullHealthCheck_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullHealthCheckRequest, PullHealthCheckResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HealthApi_PullHealthCheckClient = grpc.ServerStreamingClient[PullHealthCheckResponse]

// HealthApiServer is the server API for HealthApi service.
// All implementations must embed UnimplementedHealthApiServer
// for forward compatibility.
//
// The HealthApi provides access to health information for devices.
//
// Health is the result of one of more checks performed against a device.
// Each check measures a value of the device and compares it against a known good value or range.
// Checks can be as simple as connection checks, in which case no value is measured,
// or as complex as measuring the temperature of a device and comparing it against a range of acceptable values.
//
// When performing a check, the reliability of the check is also recorded.
// Reliability is a measure of how confident we are in the results of the check,
// and generally map to the ability to communicate with the device.
//
// Another device may have an effect on the reliability of this device, like a gateway or the network,
// see the Reliability.cause field.
// An absent cause implies the device is responsible for its own reliability issues.
// Similarly, poor reliability of a device may affect the reliability of other devices,
// see the Reliability.affects field.
//
// Each check can specify that it should be acknowledged when it changes state.
// Health changes that require acknowledgement but have not been acknowledged still require attention from operators.
// The ack_required field says which health state transitions require acknowledgement.
type HealthApiServer interface {
	// List health checks for a named device.
	ListHealthChecks(context.Context, *ListHealthChecksRequest) (*ListHealthChecksResponse, error)
	// Pull changes to health checks for a named device.
	PullHealthChecks(*PullHealthChecksRequest, grpc.ServerStreamingServer[PullHealthChecksResponse]) error
	// Get a specific health check for a named device.
	GetHealthCheck(context.Context, *GetHealthCheckRequest) (*HealthCheck, error)
	// Pull changes to a specific health check for a named device.
	PullHealthCheck(*PullHealthCheckRequest, grpc.ServerStreamingServer[PullHealthCheckResponse]) error
	mustEmbedUnimplementedHealthApiServer()
}

// UnimplementedHealthApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthApiServer struct{}

func (UnimplementedHealthApiServer) ListHealthChecks(context.Context, *ListHealthChecksRequest) (*ListHealthChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHealthChecks not implemented")
}
func (UnimplementedHealthApiServer) PullHealthChecks(*PullHealthChecksRequest, grpc.ServerStreamingServer[PullHealthChecksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullHealthChecks not implemented")
}
func (UnimplementedHealthApiServer) GetHealthCheck(context.Context, *GetHealthCheckRequest) (*HealthCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthCheck not implemented")
}
func (UnimplementedHealthApiServer) PullHealthCheck(*PullHealthCheckRequest, grpc.ServerStreamingServer[PullHealthCheckResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullHealthCheck not implemented")
}
func (UnimplementedHealthApiServer) mustEmbedUnimplementedHealthApiServer() {}
func (UnimplementedHealthApiServer) testEmbeddedByValue()                   {}

// UnsafeHealthApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthApiServer will
// result in compilation errors.
type UnsafeHealthApiServer interface {
	mustEmbedUnimplementedHealthApiServer()
}

func RegisterHealthApiServer(s grpc.ServiceRegistrar, srv HealthApiServer) {
	// If the following call pancis, it indicates UnimplementedHealthApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthApi_ServiceDesc, srv)
}

func _HealthApi_ListHealthChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHealthChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthApiServer).ListHealthChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthApi_ListHealthChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthApiServer).ListHealthChecks(ctx, req.(*ListHealthChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthApi_PullHealthChecks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullHealthChecksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthApiServer).PullHealthChecks(m, &grpc.GenericServerStream[PullHealthChecksRequest, PullHealthChecksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HealthApi_PullHealthChecksServer = grpc.ServerStreamingServer[PullHealthChecksResponse]

func _HealthApi_GetHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthApiServer).GetHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthApi_GetHealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthApiServer).GetHealthCheck(ctx, req.(*GetHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthApi_PullHealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullHealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthApiServer).PullHealthCheck(m, &grpc.GenericServerStream[PullHealthCheckRequest, PullHealthCheckResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HealthApi_PullHealthCheckServer = grpc.ServerStreamingServer[PullHealthCheckResponse]

// HealthApi_ServiceDesc is the grpc.ServiceDesc for HealthApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.HealthApi",
	HandlerType: (*HealthApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHealthChecks",
			Handler:    _HealthApi_ListHealthChecks_Handler,
		},
		{
			MethodName: "GetHealthCheck",
			Handler:    _HealthApi_GetHealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullHealthChecks",
			Handler:       _HealthApi_PullHealthChecks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullHealthCheck",
			Handler:       _HealthApi_PullHealthCheck_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "health.proto",
}

const (
	HealthHistory_ListHealthCheckHistory_FullMethodName = "/smartcore.bos.HealthHistory/ListHealthCheckHistory"
)

// HealthHistoryClient is the client API for HealthHistory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HealthHistory provides access to historical records for HealthApi service resources.
type HealthHistoryClient interface {
	ListHealthCheckHistory(ctx context.Context, in *ListHealthCheckHistoryRequest, opts ...grpc.CallOption) (*ListHealthCheckHistoryResponse, error)
}

type healthHistoryClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthHistoryClient(cc grpc.ClientConnInterface) HealthHistoryClient {
	return &healthHistoryClient{cc}
}

func (c *healthHistoryClient) ListHealthCheckHistory(ctx context.Context, in *ListHealthCheckHistoryRequest, opts ...grpc.CallOption) (*ListHealthCheckHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHealthCheckHistoryResponse)
	err := c.cc.Invoke(ctx, HealthHistory_ListHealthCheckHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthHistoryServer is the server API for HealthHistory service.
// All implementations must embed UnimplementedHealthHistoryServer
// for forward compatibility.
//
// HealthHistory provides access to historical records for HealthApi service resources.
type HealthHistoryServer interface {
	ListHealthCheckHistory(context.Context, *ListHealthCheckHistoryRequest) (*ListHealthCheckHistoryResponse, error)
	mustEmbedUnimplementedHealthHistoryServer()
}

// UnimplementedHealthHistoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthHistoryServer struct{}

func (UnimplementedHealthHistoryServer) ListHealthCheckHistory(context.Context, *ListHealthCheckHistoryRequest) (*ListHealthCheckHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHealthCheckHistory not implemented")
}
func (UnimplementedHealthHistoryServer) mustEmbedUnimplementedHealthHistoryServer() {}
func (UnimplementedHealthHistoryServer) testEmbeddedByValue()                       {}

// UnsafeHealthHistoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthHistoryServer will
// result in compilation errors.
type UnsafeHealthHistoryServer interface {
	mustEmbedUnimplementedHealthHistoryServer()
}

func RegisterHealthHistoryServer(s grpc.ServiceRegistrar, srv HealthHistoryServer) {
	// If the following call pancis, it indicates UnimplementedHealthHistoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthHistory_ServiceDesc, srv)
}

func _HealthHistory_ListHealthCheckHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHealthCheckHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthHistoryServer).ListHealthCheckHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthHistory_ListHealthCheckHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthHistoryServer).ListHealthCheckHistory(ctx, req.(*ListHealthCheckHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthHistory_ServiceDesc is the grpc.ServiceDesc for HealthHistory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthHistory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.HealthHistory",
	HandlerType: (*HealthHistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHealthCheckHistory",
			Handler:    _HealthHistory_ListHealthCheckHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "health.proto",
}
