// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: devices.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DevicesApi_ListDevices_FullMethodName           = "/smartcore.bos.DevicesApi/ListDevices"
	DevicesApi_PullDevices_FullMethodName           = "/smartcore.bos.DevicesApi/PullDevices"
	DevicesApi_GetDevicesMetadata_FullMethodName    = "/smartcore.bos.DevicesApi/GetDevicesMetadata"
	DevicesApi_PullDevicesMetadata_FullMethodName   = "/smartcore.bos.DevicesApi/PullDevicesMetadata"
	DevicesApi_GetDownloadDevicesUrl_FullMethodName = "/smartcore.bos.DevicesApi/GetDownloadDevicesUrl"
)

// DevicesApiClient is the client API for DevicesApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DevicesApi allows you to query for devices by metadata.
type DevicesApiClient interface {
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	PullDevices(ctx context.Context, in *PullDevicesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullDevicesResponse], error)
	GetDevicesMetadata(ctx context.Context, in *GetDevicesMetadataRequest, opts ...grpc.CallOption) (*DevicesMetadata, error)
	PullDevicesMetadata(ctx context.Context, in *PullDevicesMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullDevicesMetadataResponse], error)
	GetDownloadDevicesUrl(ctx context.Context, in *GetDownloadDevicesUrlRequest, opts ...grpc.CallOption) (*DownloadDevicesUrl, error)
}

type devicesApiClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesApiClient(cc grpc.ClientConnInterface) DevicesApiClient {
	return &devicesApiClient{cc}
}

func (c *devicesApiClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, DevicesApi_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesApiClient) PullDevices(ctx context.Context, in *PullDevicesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullDevicesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DevicesApi_ServiceDesc.Streams[0], DevicesApi_PullDevices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullDevicesRequest, PullDevicesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DevicesApi_PullDevicesClient = grpc.ServerStreamingClient[PullDevicesResponse]

func (c *devicesApiClient) GetDevicesMetadata(ctx context.Context, in *GetDevicesMetadataRequest, opts ...grpc.CallOption) (*DevicesMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DevicesMetadata)
	err := c.cc.Invoke(ctx, DevicesApi_GetDevicesMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesApiClient) PullDevicesMetadata(ctx context.Context, in *PullDevicesMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullDevicesMetadataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DevicesApi_ServiceDesc.Streams[1], DevicesApi_PullDevicesMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullDevicesMetadataRequest, PullDevicesMetadataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DevicesApi_PullDevicesMetadataClient = grpc.ServerStreamingClient[PullDevicesMetadataResponse]

func (c *devicesApiClient) GetDownloadDevicesUrl(ctx context.Context, in *GetDownloadDevicesUrlRequest, opts ...grpc.CallOption) (*DownloadDevicesUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadDevicesUrl)
	err := c.cc.Invoke(ctx, DevicesApi_GetDownloadDevicesUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesApiServer is the server API for DevicesApi service.
// All implementations must embed UnimplementedDevicesApiServer
// for forward compatibility.
//
// DevicesApi allows you to query for devices by metadata.
type DevicesApiServer interface {
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	PullDevices(*PullDevicesRequest, grpc.ServerStreamingServer[PullDevicesResponse]) error
	GetDevicesMetadata(context.Context, *GetDevicesMetadataRequest) (*DevicesMetadata, error)
	PullDevicesMetadata(*PullDevicesMetadataRequest, grpc.ServerStreamingServer[PullDevicesMetadataResponse]) error
	GetDownloadDevicesUrl(context.Context, *GetDownloadDevicesUrlRequest) (*DownloadDevicesUrl, error)
	mustEmbedUnimplementedDevicesApiServer()
}

// UnimplementedDevicesApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDevicesApiServer struct{}

func (UnimplementedDevicesApiServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDevicesApiServer) PullDevices(*PullDevicesRequest, grpc.ServerStreamingServer[PullDevicesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullDevices not implemented")
}
func (UnimplementedDevicesApiServer) GetDevicesMetadata(context.Context, *GetDevicesMetadataRequest) (*DevicesMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesMetadata not implemented")
}
func (UnimplementedDevicesApiServer) PullDevicesMetadata(*PullDevicesMetadataRequest, grpc.ServerStreamingServer[PullDevicesMetadataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullDevicesMetadata not implemented")
}
func (UnimplementedDevicesApiServer) GetDownloadDevicesUrl(context.Context, *GetDownloadDevicesUrlRequest) (*DownloadDevicesUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadDevicesUrl not implemented")
}
func (UnimplementedDevicesApiServer) mustEmbedUnimplementedDevicesApiServer() {}
func (UnimplementedDevicesApiServer) testEmbeddedByValue()                    {}

// UnsafeDevicesApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesApiServer will
// result in compilation errors.
type UnsafeDevicesApiServer interface {
	mustEmbedUnimplementedDevicesApiServer()
}

func RegisterDevicesApiServer(s grpc.ServiceRegistrar, srv DevicesApiServer) {
	// If the following call pancis, it indicates UnimplementedDevicesApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DevicesApi_ServiceDesc, srv)
}

func _DevicesApi_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesApiServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DevicesApi_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesApiServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesApi_PullDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevicesApiServer).PullDevices(m, &grpc.GenericServerStream[PullDevicesRequest, PullDevicesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DevicesApi_PullDevicesServer = grpc.ServerStreamingServer[PullDevicesResponse]

func _DevicesApi_GetDevicesMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesApiServer).GetDevicesMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DevicesApi_GetDevicesMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesApiServer).GetDevicesMetadata(ctx, req.(*GetDevicesMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesApi_PullDevicesMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullDevicesMetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DevicesApiServer).PullDevicesMetadata(m, &grpc.GenericServerStream[PullDevicesMetadataRequest, PullDevicesMetadataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DevicesApi_PullDevicesMetadataServer = grpc.ServerStreamingServer[PullDevicesMetadataResponse]

func _DevicesApi_GetDownloadDevicesUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadDevicesUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesApiServer).GetDownloadDevicesUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DevicesApi_GetDownloadDevicesUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesApiServer).GetDownloadDevicesUrl(ctx, req.(*GetDownloadDevicesUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DevicesApi_ServiceDesc is the grpc.ServiceDesc for DevicesApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevicesApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.DevicesApi",
	HandlerType: (*DevicesApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _DevicesApi_ListDevices_Handler,
		},
		{
			MethodName: "GetDevicesMetadata",
			Handler:    _DevicesApi_GetDevicesMetadata_Handler,
		},
		{
			MethodName: "GetDownloadDevicesUrl",
			Handler:    _DevicesApi_GetDownloadDevicesUrl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullDevices",
			Handler:       _DevicesApi_PullDevices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullDevicesMetadata",
			Handler:       _DevicesApi_PullDevicesMetadata_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "devices.proto",
}
