// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: service_ticket.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceTicketApi_CreateTicket_FullMethodName = "/smartcore.bos.ServiceTicketApi/CreateTicket"
	ServiceTicketApi_UpdateTicket_FullMethodName = "/smartcore.bos.ServiceTicketApi/UpdateTicket"
)

// ServiceTicketApiClient is the client API for ServiceTicketApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ServiceTicketApi is a service which provides an interface for creating and updating service tickets in a
// third party system. e.g. a CAFM.
type ServiceTicketApiClient interface {
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
}

type serviceTicketApiClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceTicketApiClient(cc grpc.ClientConnInterface) ServiceTicketApiClient {
	return &serviceTicketApiClient{cc}
}

func (c *serviceTicketApiClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ticket)
	err := c.cc.Invoke(ctx, ServiceTicketApi_CreateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTicketApiClient) UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ticket)
	err := c.cc.Invoke(ctx, ServiceTicketApi_UpdateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceTicketApiServer is the server API for ServiceTicketApi service.
// All implementations must embed UnimplementedServiceTicketApiServer
// for forward compatibility.
//
// ServiceTicketApi is a service which provides an interface for creating and updating service tickets in a
// third party system. e.g. a CAFM.
type ServiceTicketApiServer interface {
	CreateTicket(context.Context, *CreateTicketRequest) (*Ticket, error)
	UpdateTicket(context.Context, *UpdateTicketRequest) (*Ticket, error)
	mustEmbedUnimplementedServiceTicketApiServer()
}

// UnimplementedServiceTicketApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceTicketApiServer struct{}

func (UnimplementedServiceTicketApiServer) CreateTicket(context.Context, *CreateTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedServiceTicketApiServer) UpdateTicket(context.Context, *UpdateTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedServiceTicketApiServer) mustEmbedUnimplementedServiceTicketApiServer() {}
func (UnimplementedServiceTicketApiServer) testEmbeddedByValue()                          {}

// UnsafeServiceTicketApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceTicketApiServer will
// result in compilation errors.
type UnsafeServiceTicketApiServer interface {
	mustEmbedUnimplementedServiceTicketApiServer()
}

func RegisterServiceTicketApiServer(s grpc.ServiceRegistrar, srv ServiceTicketApiServer) {
	// If the following call pancis, it indicates UnimplementedServiceTicketApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceTicketApi_ServiceDesc, srv)
}

func _ServiceTicketApi_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTicketApiServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceTicketApi_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTicketApiServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTicketApi_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTicketApiServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceTicketApi_UpdateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTicketApiServer).UpdateTicket(ctx, req.(*UpdateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceTicketApi_ServiceDesc is the grpc.ServiceDesc for ServiceTicketApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceTicketApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.ServiceTicketApi",
	HandlerType: (*ServiceTicketApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _ServiceTicketApi_CreateTicket_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _ServiceTicketApi_UpdateTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ticket.proto",
}

const (
	ServiceTicketInfo_DescribeTicket_FullMethodName = "/smartcore.bos.ServiceTicketInfo/DescribeTicket"
)

// ServiceTicketInfoClient is the client API for ServiceTicketInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ServiceTicketInfo can be used to fetch information that is required to create or update a ticket for a
// system specific implementation.
type ServiceTicketInfoClient interface {
	DescribeTicket(ctx context.Context, in *DescribeTicketRequest, opts ...grpc.CallOption) (*TicketSupport, error)
}

type serviceTicketInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceTicketInfoClient(cc grpc.ClientConnInterface) ServiceTicketInfoClient {
	return &serviceTicketInfoClient{cc}
}

func (c *serviceTicketInfoClient) DescribeTicket(ctx context.Context, in *DescribeTicketRequest, opts ...grpc.CallOption) (*TicketSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketSupport)
	err := c.cc.Invoke(ctx, ServiceTicketInfo_DescribeTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceTicketInfoServer is the server API for ServiceTicketInfo service.
// All implementations must embed UnimplementedServiceTicketInfoServer
// for forward compatibility.
//
// ServiceTicketInfo can be used to fetch information that is required to create or update a ticket for a
// system specific implementation.
type ServiceTicketInfoServer interface {
	DescribeTicket(context.Context, *DescribeTicketRequest) (*TicketSupport, error)
	mustEmbedUnimplementedServiceTicketInfoServer()
}

// UnimplementedServiceTicketInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceTicketInfoServer struct{}

func (UnimplementedServiceTicketInfoServer) DescribeTicket(context.Context, *DescribeTicketRequest) (*TicketSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTicket not implemented")
}
func (UnimplementedServiceTicketInfoServer) mustEmbedUnimplementedServiceTicketInfoServer() {}
func (UnimplementedServiceTicketInfoServer) testEmbeddedByValue()                           {}

// UnsafeServiceTicketInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceTicketInfoServer will
// result in compilation errors.
type UnsafeServiceTicketInfoServer interface {
	mustEmbedUnimplementedServiceTicketInfoServer()
}

func RegisterServiceTicketInfoServer(s grpc.ServiceRegistrar, srv ServiceTicketInfoServer) {
	// If the following call pancis, it indicates UnimplementedServiceTicketInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceTicketInfo_ServiceDesc, srv)
}

func _ServiceTicketInfo_DescribeTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTicketInfoServer).DescribeTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceTicketInfo_DescribeTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTicketInfoServer).DescribeTicket(ctx, req.(*DescribeTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceTicketInfo_ServiceDesc is the grpc.ServiceDesc for ServiceTicketInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceTicketInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.ServiceTicketInfo",
	HandlerType: (*ServiceTicketInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeTicket",
			Handler:    _ServiceTicketInfo_DescribeTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_ticket.proto",
}
