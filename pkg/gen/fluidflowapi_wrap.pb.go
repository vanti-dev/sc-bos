// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// WrapFluidFlowApi	adapts a FluidFlowApiServer	and presents it as a FluidFlowApiClient
func WrapFluidFlowApi(server FluidFlowApiServer) *FluidFlowApiWrapper {
	conn := wrap.ServerToClient(FluidFlowApi_ServiceDesc, server)
	client := NewFluidFlowApiClient(conn)
	return &FluidFlowApiWrapper{
		FluidFlowApiClient: client,
		server:             server,
		conn:               conn,
		desc:               FluidFlowApi_ServiceDesc,
	}
}

type FluidFlowApiWrapper struct {
	FluidFlowApiClient

	server FluidFlowApiServer
	conn   grpc.ClientConnInterface
	desc   grpc.ServiceDesc
}

// UnwrapServer returns the underlying server instance.
func (w *FluidFlowApiWrapper) UnwrapServer() FluidFlowApiServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *FluidFlowApiWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *FluidFlowApiWrapper) UnwrapService() (grpc.ClientConnInterface, grpc.ServiceDesc) {
	return w.conn, w.desc
}
