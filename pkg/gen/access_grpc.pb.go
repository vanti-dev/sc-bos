// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: access.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccessApi_GetLastAccessAttempt_FullMethodName = "/smartcore.bos.AccessApi/GetLastAccessAttempt"
	AccessApi_PullAccessAttempts_FullMethodName   = "/smartcore.bos.AccessApi/PullAccessAttempts"
	AccessApi_CreateAccessGrant_FullMethodName    = "/smartcore.bos.AccessApi/CreateAccessGrant"
	AccessApi_UpdateAccessGrant_FullMethodName    = "/smartcore.bos.AccessApi/UpdateAccessGrant"
	AccessApi_DeleteAccessGrant_FullMethodName    = "/smartcore.bos.AccessApi/DeleteAccessGrant"
	AccessApi_GetAccessGrant_FullMethodName       = "/smartcore.bos.AccessApi/GetAccessGrant"
	AccessApi_ListAccessGrants_FullMethodName     = "/smartcore.bos.AccessApi/ListAccessGrants"
)

// AccessApiClient is the client API for AccessApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AccessApi describes the capability to manage access to a resource.
// This could be a access card reader next to a door, or a barrier at a car park.
type AccessApiClient interface {
	GetLastAccessAttempt(ctx context.Context, in *GetLastAccessAttemptRequest, opts ...grpc.CallOption) (*AccessAttempt, error)
	PullAccessAttempts(ctx context.Context, in *PullAccessAttemptsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullAccessAttemptsResponse], error)
	CreateAccessGrant(ctx context.Context, in *CreateAccessGrantRequest, opts ...grpc.CallOption) (*AccessGrant, error)
	UpdateAccessGrant(ctx context.Context, in *UpdateAccessGrantRequest, opts ...grpc.CallOption) (*AccessGrant, error)
	DeleteAccessGrant(ctx context.Context, in *DeleteAccessGrantRequest, opts ...grpc.CallOption) (*DeleteAccessGrantResponse, error)
	GetAccessGrant(ctx context.Context, in *GetAccessGrantsRequest, opts ...grpc.CallOption) (*AccessGrant, error)
	ListAccessGrants(ctx context.Context, in *ListAccessGrantsRequest, opts ...grpc.CallOption) (*ListAccessGrantsResponse, error)
}

type accessApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessApiClient(cc grpc.ClientConnInterface) AccessApiClient {
	return &accessApiClient{cc}
}

func (c *accessApiClient) GetLastAccessAttempt(ctx context.Context, in *GetLastAccessAttemptRequest, opts ...grpc.CallOption) (*AccessAttempt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessAttempt)
	err := c.cc.Invoke(ctx, AccessApi_GetLastAccessAttempt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessApiClient) PullAccessAttempts(ctx context.Context, in *PullAccessAttemptsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullAccessAttemptsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AccessApi_ServiceDesc.Streams[0], AccessApi_PullAccessAttempts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullAccessAttemptsRequest, PullAccessAttemptsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccessApi_PullAccessAttemptsClient = grpc.ServerStreamingClient[PullAccessAttemptsResponse]

func (c *accessApiClient) CreateAccessGrant(ctx context.Context, in *CreateAccessGrantRequest, opts ...grpc.CallOption) (*AccessGrant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessGrant)
	err := c.cc.Invoke(ctx, AccessApi_CreateAccessGrant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessApiClient) UpdateAccessGrant(ctx context.Context, in *UpdateAccessGrantRequest, opts ...grpc.CallOption) (*AccessGrant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessGrant)
	err := c.cc.Invoke(ctx, AccessApi_UpdateAccessGrant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessApiClient) DeleteAccessGrant(ctx context.Context, in *DeleteAccessGrantRequest, opts ...grpc.CallOption) (*DeleteAccessGrantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccessGrantResponse)
	err := c.cc.Invoke(ctx, AccessApi_DeleteAccessGrant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessApiClient) GetAccessGrant(ctx context.Context, in *GetAccessGrantsRequest, opts ...grpc.CallOption) (*AccessGrant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessGrant)
	err := c.cc.Invoke(ctx, AccessApi_GetAccessGrant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessApiClient) ListAccessGrants(ctx context.Context, in *ListAccessGrantsRequest, opts ...grpc.CallOption) (*ListAccessGrantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessGrantsResponse)
	err := c.cc.Invoke(ctx, AccessApi_ListAccessGrants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessApiServer is the server API for AccessApi service.
// All implementations must embed UnimplementedAccessApiServer
// for forward compatibility.
//
// AccessApi describes the capability to manage access to a resource.
// This could be a access card reader next to a door, or a barrier at a car park.
type AccessApiServer interface {
	GetLastAccessAttempt(context.Context, *GetLastAccessAttemptRequest) (*AccessAttempt, error)
	PullAccessAttempts(*PullAccessAttemptsRequest, grpc.ServerStreamingServer[PullAccessAttemptsResponse]) error
	CreateAccessGrant(context.Context, *CreateAccessGrantRequest) (*AccessGrant, error)
	UpdateAccessGrant(context.Context, *UpdateAccessGrantRequest) (*AccessGrant, error)
	DeleteAccessGrant(context.Context, *DeleteAccessGrantRequest) (*DeleteAccessGrantResponse, error)
	GetAccessGrant(context.Context, *GetAccessGrantsRequest) (*AccessGrant, error)
	ListAccessGrants(context.Context, *ListAccessGrantsRequest) (*ListAccessGrantsResponse, error)
	mustEmbedUnimplementedAccessApiServer()
}

// UnimplementedAccessApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccessApiServer struct{}

func (UnimplementedAccessApiServer) GetLastAccessAttempt(context.Context, *GetLastAccessAttemptRequest) (*AccessAttempt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastAccessAttempt not implemented")
}
func (UnimplementedAccessApiServer) PullAccessAttempts(*PullAccessAttemptsRequest, grpc.ServerStreamingServer[PullAccessAttemptsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullAccessAttempts not implemented")
}
func (UnimplementedAccessApiServer) CreateAccessGrant(context.Context, *CreateAccessGrantRequest) (*AccessGrant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessGrant not implemented")
}
func (UnimplementedAccessApiServer) UpdateAccessGrant(context.Context, *UpdateAccessGrantRequest) (*AccessGrant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessGrant not implemented")
}
func (UnimplementedAccessApiServer) DeleteAccessGrant(context.Context, *DeleteAccessGrantRequest) (*DeleteAccessGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccessGrant not implemented")
}
func (UnimplementedAccessApiServer) GetAccessGrant(context.Context, *GetAccessGrantsRequest) (*AccessGrant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessGrant not implemented")
}
func (UnimplementedAccessApiServer) ListAccessGrants(context.Context, *ListAccessGrantsRequest) (*ListAccessGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessGrants not implemented")
}
func (UnimplementedAccessApiServer) mustEmbedUnimplementedAccessApiServer() {}
func (UnimplementedAccessApiServer) testEmbeddedByValue()                   {}

// UnsafeAccessApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessApiServer will
// result in compilation errors.
type UnsafeAccessApiServer interface {
	mustEmbedUnimplementedAccessApiServer()
}

func RegisterAccessApiServer(s grpc.ServiceRegistrar, srv AccessApiServer) {
	// If the following call pancis, it indicates UnimplementedAccessApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccessApi_ServiceDesc, srv)
}

func _AccessApi_GetLastAccessAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastAccessAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessApiServer).GetLastAccessAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessApi_GetLastAccessAttempt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessApiServer).GetLastAccessAttempt(ctx, req.(*GetLastAccessAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessApi_PullAccessAttempts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullAccessAttemptsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessApiServer).PullAccessAttempts(m, &grpc.GenericServerStream[PullAccessAttemptsRequest, PullAccessAttemptsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AccessApi_PullAccessAttemptsServer = grpc.ServerStreamingServer[PullAccessAttemptsResponse]

func _AccessApi_CreateAccessGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessApiServer).CreateAccessGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessApi_CreateAccessGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessApiServer).CreateAccessGrant(ctx, req.(*CreateAccessGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessApi_UpdateAccessGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessApiServer).UpdateAccessGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessApi_UpdateAccessGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessApiServer).UpdateAccessGrant(ctx, req.(*UpdateAccessGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessApi_DeleteAccessGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessApiServer).DeleteAccessGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessApi_DeleteAccessGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessApiServer).DeleteAccessGrant(ctx, req.(*DeleteAccessGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessApi_GetAccessGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessApiServer).GetAccessGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessApi_GetAccessGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessApiServer).GetAccessGrant(ctx, req.(*GetAccessGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessApi_ListAccessGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessApiServer).ListAccessGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessApi_ListAccessGrants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessApiServer).ListAccessGrants(ctx, req.(*ListAccessGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessApi_ServiceDesc is the grpc.ServiceDesc for AccessApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.AccessApi",
	HandlerType: (*AccessApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastAccessAttempt",
			Handler:    _AccessApi_GetLastAccessAttempt_Handler,
		},
		{
			MethodName: "CreateAccessGrant",
			Handler:    _AccessApi_CreateAccessGrant_Handler,
		},
		{
			MethodName: "UpdateAccessGrant",
			Handler:    _AccessApi_UpdateAccessGrant_Handler,
		},
		{
			MethodName: "DeleteAccessGrant",
			Handler:    _AccessApi_DeleteAccessGrant_Handler,
		},
		{
			MethodName: "GetAccessGrant",
			Handler:    _AccessApi_GetAccessGrant_Handler,
		},
		{
			MethodName: "ListAccessGrants",
			Handler:    _AccessApi_ListAccessGrants_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullAccessAttempts",
			Handler:       _AccessApi_PullAccessAttempts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "access.proto",
}
