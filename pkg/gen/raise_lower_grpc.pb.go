// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: raise_lower.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RaiseLowerApi_GetBearerState_FullMethodName  = "/smartcore.bos.RaiseLowerApi/GetBearerState"
	RaiseLowerApi_PullBearerState_FullMethodName = "/smartcore.bos.RaiseLowerApi/PullBearerState"
)

// RaiseLowerApiClient is the client API for RaiseLowerApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RaiseLowerApi represents a 'bearer', something capable of bearing a load, which can be raised or lowered
// The bearer will often be an elevator, but could be a dumbwaiter, winch hook or other device.
// The load can be people, freight, etc.
type RaiseLowerApiClient interface {
	GetBearerState(ctx context.Context, in *GetBearerStateRequest, opts ...grpc.CallOption) (*BearerState, error)
	PullBearerState(ctx context.Context, in *PullBearerStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullBearerStateResponse], error)
}

type raiseLowerApiClient struct {
	cc grpc.ClientConnInterface
}

func NewRaiseLowerApiClient(cc grpc.ClientConnInterface) RaiseLowerApiClient {
	return &raiseLowerApiClient{cc}
}

func (c *raiseLowerApiClient) GetBearerState(ctx context.Context, in *GetBearerStateRequest, opts ...grpc.CallOption) (*BearerState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BearerState)
	err := c.cc.Invoke(ctx, RaiseLowerApi_GetBearerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raiseLowerApiClient) PullBearerState(ctx context.Context, in *PullBearerStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullBearerStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RaiseLowerApi_ServiceDesc.Streams[0], RaiseLowerApi_PullBearerState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullBearerStateRequest, PullBearerStateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RaiseLowerApi_PullBearerStateClient = grpc.ServerStreamingClient[PullBearerStateResponse]

// RaiseLowerApiServer is the server API for RaiseLowerApi service.
// All implementations must embed UnimplementedRaiseLowerApiServer
// for forward compatibility.
//
// RaiseLowerApi represents a 'bearer', something capable of bearing a load, which can be raised or lowered
// The bearer will often be an elevator, but could be a dumbwaiter, winch hook or other device.
// The load can be people, freight, etc.
type RaiseLowerApiServer interface {
	GetBearerState(context.Context, *GetBearerStateRequest) (*BearerState, error)
	PullBearerState(*PullBearerStateRequest, grpc.ServerStreamingServer[PullBearerStateResponse]) error
	mustEmbedUnimplementedRaiseLowerApiServer()
}

// UnimplementedRaiseLowerApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRaiseLowerApiServer struct{}

func (UnimplementedRaiseLowerApiServer) GetBearerState(context.Context, *GetBearerStateRequest) (*BearerState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBearerState not implemented")
}
func (UnimplementedRaiseLowerApiServer) PullBearerState(*PullBearerStateRequest, grpc.ServerStreamingServer[PullBearerStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullBearerState not implemented")
}
func (UnimplementedRaiseLowerApiServer) mustEmbedUnimplementedRaiseLowerApiServer() {}
func (UnimplementedRaiseLowerApiServer) testEmbeddedByValue()                       {}

// UnsafeRaiseLowerApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaiseLowerApiServer will
// result in compilation errors.
type UnsafeRaiseLowerApiServer interface {
	mustEmbedUnimplementedRaiseLowerApiServer()
}

func RegisterRaiseLowerApiServer(s grpc.ServiceRegistrar, srv RaiseLowerApiServer) {
	// If the following call pancis, it indicates UnimplementedRaiseLowerApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RaiseLowerApi_ServiceDesc, srv)
}

func _RaiseLowerApi_GetBearerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBearerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaiseLowerApiServer).GetBearerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaiseLowerApi_GetBearerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaiseLowerApiServer).GetBearerState(ctx, req.(*GetBearerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaiseLowerApi_PullBearerState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullBearerStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RaiseLowerApiServer).PullBearerState(m, &grpc.GenericServerStream[PullBearerStateRequest, PullBearerStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RaiseLowerApi_PullBearerStateServer = grpc.ServerStreamingServer[PullBearerStateResponse]

// RaiseLowerApi_ServiceDesc is the grpc.ServiceDesc for RaiseLowerApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaiseLowerApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.RaiseLowerApi",
	HandlerType: (*RaiseLowerApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBearerState",
			Handler:    _RaiseLowerApi_GetBearerState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullBearerState",
			Handler:       _RaiseLowerApi_PullBearerState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "raise_lower.proto",
}

const (
	RaiseLowerInfo_DescribeBearerState_FullMethodName = "/smartcore.bos.RaiseLowerInfo/DescribeBearerState"
)

// RaiseLowerInfoClient is the client API for RaiseLowerInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaiseLowerInfoClient interface {
	DescribeBearerState(ctx context.Context, in *DescribeBearerRequest, opts ...grpc.CallOption) (*BearerStateSupport, error)
}

type raiseLowerInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewRaiseLowerInfoClient(cc grpc.ClientConnInterface) RaiseLowerInfoClient {
	return &raiseLowerInfoClient{cc}
}

func (c *raiseLowerInfoClient) DescribeBearerState(ctx context.Context, in *DescribeBearerRequest, opts ...grpc.CallOption) (*BearerStateSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BearerStateSupport)
	err := c.cc.Invoke(ctx, RaiseLowerInfo_DescribeBearerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaiseLowerInfoServer is the server API for RaiseLowerInfo service.
// All implementations must embed UnimplementedRaiseLowerInfoServer
// for forward compatibility.
type RaiseLowerInfoServer interface {
	DescribeBearerState(context.Context, *DescribeBearerRequest) (*BearerStateSupport, error)
	mustEmbedUnimplementedRaiseLowerInfoServer()
}

// UnimplementedRaiseLowerInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRaiseLowerInfoServer struct{}

func (UnimplementedRaiseLowerInfoServer) DescribeBearerState(context.Context, *DescribeBearerRequest) (*BearerStateSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeBearerState not implemented")
}
func (UnimplementedRaiseLowerInfoServer) mustEmbedUnimplementedRaiseLowerInfoServer() {}
func (UnimplementedRaiseLowerInfoServer) testEmbeddedByValue()                        {}

// UnsafeRaiseLowerInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaiseLowerInfoServer will
// result in compilation errors.
type UnsafeRaiseLowerInfoServer interface {
	mustEmbedUnimplementedRaiseLowerInfoServer()
}

func RegisterRaiseLowerInfoServer(s grpc.ServiceRegistrar, srv RaiseLowerInfoServer) {
	// If the following call pancis, it indicates UnimplementedRaiseLowerInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RaiseLowerInfo_ServiceDesc, srv)
}

func _RaiseLowerInfo_DescribeBearerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeBearerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaiseLowerInfoServer).DescribeBearerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaiseLowerInfo_DescribeBearerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaiseLowerInfoServer).DescribeBearerState(ctx, req.(*DescribeBearerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaiseLowerInfo_ServiceDesc is the grpc.ServiceDesc for RaiseLowerInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaiseLowerInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.RaiseLowerInfo",
	HandlerType: (*RaiseLowerInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeBearerState",
			Handler:    _RaiseLowerInfo_DescribeBearerState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raise_lower.proto",
}
