// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: priority.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Level defines suggested priority levels for different purposes when writing to a device.
type Priority_Level int32

const (
	Priority_LEVEL_UNSPECIFIED Priority_Level = 0
	// Used by operators to write values that affect life-safety matters and should override all other priorities.
	Priority_MANUAL_LIFE_SAFETY Priority_Level = 10
	// Used by systems to write values that affect life-safety matters.
	Priority_AUTOMATIC_LIFE_SAFETY Priority_Level = 20
	// Bypass device safety systems and force this value to be written.
	Priority_CRITICAL_OVERRIDE Priority_Level = 30
	// Read-only, device priority used for debouncing purposes.
	// A device that has limited write throughput or operational limitations when changing state - say minimum on/off times -
	// may store a write at this priority to maintain the priority algorithm while not affecting writes at lower priority levels.
	// Once the debounce has elapsed this value will be cleared.
	Priority_DEBOUNCE Priority_Level = 40
	// A write by a manual or automatic supervisor process.
	Priority_SUPERVISOR Priority_Level = 50
	// A write by a manual or automatic operator process.
	Priority_OPERATOR Priority_Level = 60
	// A write by a manual or automatic user process.
	Priority_USER Priority_Level = 70
	// A write by an automated system or process.
	Priority_AUTOMATION Priority_Level = 100
	// The default priority level, used when no other priority is specified.
	Priority_DEFAULT Priority_Level = 150
	// The minimum priority level. Any value at this priority will be used only if no other priority write is present.
	// The device is encouraged to supply a value at this level itself.
	Priority_MINIMUM Priority_Level = 255
)

// Enum value maps for Priority_Level.
var (
	Priority_Level_name = map[int32]string{
		0:   "LEVEL_UNSPECIFIED",
		10:  "MANUAL_LIFE_SAFETY",
		20:  "AUTOMATIC_LIFE_SAFETY",
		30:  "CRITICAL_OVERRIDE",
		40:  "DEBOUNCE",
		50:  "SUPERVISOR",
		60:  "OPERATOR",
		70:  "USER",
		100: "AUTOMATION",
		150: "DEFAULT",
		255: "MINIMUM",
	}
	Priority_Level_value = map[string]int32{
		"LEVEL_UNSPECIFIED":     0,
		"MANUAL_LIFE_SAFETY":    10,
		"AUTOMATIC_LIFE_SAFETY": 20,
		"CRITICAL_OVERRIDE":     30,
		"DEBOUNCE":              40,
		"SUPERVISOR":            50,
		"OPERATOR":              60,
		"USER":                  70,
		"AUTOMATION":            100,
		"DEFAULT":               150,
		"MINIMUM":               255,
	}
)

func (x Priority_Level) Enum() *Priority_Level {
	p := new(Priority_Level)
	*p = x
	return p
}

func (x Priority_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Priority_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_priority_proto_enumTypes[0].Descriptor()
}

func (Priority_Level) Type() protoreflect.EnumType {
	return &file_priority_proto_enumTypes[0]
}

func (x Priority_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Priority_Level.Descriptor instead.
func (Priority_Level) EnumDescriptor() ([]byte, []int) {
	return file_priority_proto_rawDescGZIP(), []int{0, 0}
}

// Priority defines how different parties cooperate when writing to the same value.
// Priority levels are represented as integers, with lower values representing higher priorities.
// Level 1 is the highest priority level available, level 255 is the lowest.
//
// # The Priority Algorithm
//
// The algorithm can be summarised as: Apply the highest available priority write to the underlying device.
//
// The device maintains a priority array of writes, when a client writes a value at a particular priority level that
// write is at in the priority array at the index corresponding to that priority level.
// After each modification of the priority array the device re-checks the array looking for the lowest index that has
// a present value, that value is applied to the underlying store or device and becomes the 'real' value.
// If no values are present in the priority array then no write is performed.
//
// Where possible devices and clients should use the priority level most suited for their desired outcome to help with
// interoperability, however these are just suggestions and are not enforced by the protocol.
// Priority levels other than those named below are also supported and follow the same priority algorithm rules, for
// example a write using Level 65 has a priority greater than USER but less than OPERATOR.
//
// # Reads
//
// If a priority level is not specified, the value returned will be the value that has been applied to the
// store or device, usually the outcome of the priority algorithm.
// If a priority level is set then the returned value will represent the written value at that exact
// priority level, potentially returning an empty object if no such value exists.
//
// Reads may return a PriorityLevel header whose value is the lowest index in the priority array that contains a value,
// as a decimal encoded string: "PriorityLevel: 100". A header value of "0" means no value exists in the priority array.
//
// # Writes
//
// If a priority level is set then the value will be written at that exact priority level.
// If no priority is set during write, the value will be written at the DEFAULT priority level.
// Specifying a priority level and providing an unset value will clear the value at that priority level.
// After each write the priority algorithm will be invoked.
//
// If a write is a delta-write, the delta is converted to an absolute value by combining it with the real value of the
// device then stored in the priority array just like any other write.
//
// Responses to writes represent the real value written to the device, after the priority algorithm has been applied.
// A PriorityLevel header may be returned whose value is the lowest index in the priority array that contains a value,
// as a decimal encoded string: "PriorityLevel: 100".
type Priority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title is the official human readable name for the priority level.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Level is the integer value of the priority level and can be used for comparisons.
	Level Priority_Level `protobuf:"varint,2,opt,name=level,proto3,enum=smartcore.bos.Priority_Level" json:"level,omitempty"`
}

func (x *Priority) Reset() {
	*x = Priority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_priority_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Priority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Priority) ProtoMessage() {}

func (x *Priority) ProtoReflect() protoreflect.Message {
	mi := &file_priority_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Priority.ProtoReflect.Descriptor instead.
func (*Priority) Descriptor() ([]byte, []int) {
	return file_priority_proto_rawDescGZIP(), []int{0}
}

func (x *Priority) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Priority) GetLevel() Priority_Level {
	if x != nil {
		return x.Level
	}
	return Priority_LEVEL_UNSPECIFIED
}

var File_priority_proto protoreflect.FileDescriptor

var file_priority_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x22,
	0xa2, 0x02, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f,
	0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xca, 0x01, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x10, 0x0a,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x4c, 0x49,
	0x46, 0x45, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45,
	0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x10, 0x28,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x10, 0x32,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x3c, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x46, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x4f,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x64, 0x12, 0x0c, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x96, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55,
	0x4d, 0x10, 0xff, 0x01, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6e, 0x74, 0x69, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x63, 0x2d,
	0x62, 0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_priority_proto_rawDescOnce sync.Once
	file_priority_proto_rawDescData = file_priority_proto_rawDesc
)

func file_priority_proto_rawDescGZIP() []byte {
	file_priority_proto_rawDescOnce.Do(func() {
		file_priority_proto_rawDescData = protoimpl.X.CompressGZIP(file_priority_proto_rawDescData)
	})
	return file_priority_proto_rawDescData
}

var file_priority_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_priority_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_priority_proto_goTypes = []interface{}{
	(Priority_Level)(0), // 0: smartcore.bos.Priority.Level
	(*Priority)(nil),    // 1: smartcore.bos.Priority
}
var file_priority_proto_depIdxs = []int32{
	0, // 0: smartcore.bos.Priority.level:type_name -> smartcore.bos.Priority.Level
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_priority_proto_init() }
func file_priority_proto_init() {
	if File_priority_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_priority_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Priority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_priority_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_priority_proto_goTypes,
		DependencyIndexes: file_priority_proto_depIdxs,
		EnumInfos:         file_priority_proto_enumTypes,
		MessageInfos:      file_priority_proto_msgTypes,
	}.Build()
	File_priority_proto = out.File
	file_priority_proto_rawDesc = nil
	file_priority_proto_goTypes = nil
	file_priority_proto_depIdxs = nil
}
