// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: emergency_light.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmergencyLightApi_StartFunctionTest_FullMethodName  = "/smartcore.bos.EmergencyLightApi/StartFunctionTest"
	EmergencyLightApi_StartDurationTest_FullMethodName  = "/smartcore.bos.EmergencyLightApi/StartDurationTest"
	EmergencyLightApi_StopEmergencyTest_FullMethodName  = "/smartcore.bos.EmergencyLightApi/StopEmergencyTest"
	EmergencyLightApi_GetTestResultSet_FullMethodName   = "/smartcore.bos.EmergencyLightApi/GetTestResultSet"
	EmergencyLightApi_PullTestResultSets_FullMethodName = "/smartcore.bos.EmergencyLightApi/PullTestResultSets"
)

// EmergencyLightApiClient is the client API for EmergencyLightApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EmergencyLightApi provides methods to start and stop tests on emergency lights, and to retrieve test results.
// The API is designed to be implemented by emergency lights.
type EmergencyLightApiClient interface {
	// Attempt to start a function test
	StartFunctionTest(ctx context.Context, in *StartEmergencyTestRequest, opts ...grpc.CallOption) (*StartEmergencyTestResponse, error)
	// Attempt to start a duration test
	StartDurationTest(ctx context.Context, in *StartEmergencyTestRequest, opts ...grpc.CallOption) (*StartEmergencyTestResponse, error)
	// Stop any test that is in progress.
	StopEmergencyTest(ctx context.Context, in *StopEmergencyTestsRequest, opts ...grpc.CallOption) (*StopEmergencyTestsResponse, error)
	// Get the set of results of the most recent tests performed on the emergency light.
	GetTestResultSet(ctx context.Context, in *GetTestResultSetRequest, opts ...grpc.CallOption) (*TestResultSet, error)
	PullTestResultSets(ctx context.Context, in *PullTestResultRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullTestResultsResponse], error)
}

type emergencyLightApiClient struct {
	cc grpc.ClientConnInterface
}

func NewEmergencyLightApiClient(cc grpc.ClientConnInterface) EmergencyLightApiClient {
	return &emergencyLightApiClient{cc}
}

func (c *emergencyLightApiClient) StartFunctionTest(ctx context.Context, in *StartEmergencyTestRequest, opts ...grpc.CallOption) (*StartEmergencyTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartEmergencyTestResponse)
	err := c.cc.Invoke(ctx, EmergencyLightApi_StartFunctionTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyLightApiClient) StartDurationTest(ctx context.Context, in *StartEmergencyTestRequest, opts ...grpc.CallOption) (*StartEmergencyTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartEmergencyTestResponse)
	err := c.cc.Invoke(ctx, EmergencyLightApi_StartDurationTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyLightApiClient) StopEmergencyTest(ctx context.Context, in *StopEmergencyTestsRequest, opts ...grpc.CallOption) (*StopEmergencyTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopEmergencyTestsResponse)
	err := c.cc.Invoke(ctx, EmergencyLightApi_StopEmergencyTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyLightApiClient) GetTestResultSet(ctx context.Context, in *GetTestResultSetRequest, opts ...grpc.CallOption) (*TestResultSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResultSet)
	err := c.cc.Invoke(ctx, EmergencyLightApi_GetTestResultSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emergencyLightApiClient) PullTestResultSets(ctx context.Context, in *PullTestResultRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullTestResultsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EmergencyLightApi_ServiceDesc.Streams[0], EmergencyLightApi_PullTestResultSets_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullTestResultRequest, PullTestResultsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EmergencyLightApi_PullTestResultSetsClient = grpc.ServerStreamingClient[PullTestResultsResponse]

// EmergencyLightApiServer is the server API for EmergencyLightApi service.
// All implementations must embed UnimplementedEmergencyLightApiServer
// for forward compatibility.
//
// EmergencyLightApi provides methods to start and stop tests on emergency lights, and to retrieve test results.
// The API is designed to be implemented by emergency lights.
type EmergencyLightApiServer interface {
	// Attempt to start a function test
	StartFunctionTest(context.Context, *StartEmergencyTestRequest) (*StartEmergencyTestResponse, error)
	// Attempt to start a duration test
	StartDurationTest(context.Context, *StartEmergencyTestRequest) (*StartEmergencyTestResponse, error)
	// Stop any test that is in progress.
	StopEmergencyTest(context.Context, *StopEmergencyTestsRequest) (*StopEmergencyTestsResponse, error)
	// Get the set of results of the most recent tests performed on the emergency light.
	GetTestResultSet(context.Context, *GetTestResultSetRequest) (*TestResultSet, error)
	PullTestResultSets(*PullTestResultRequest, grpc.ServerStreamingServer[PullTestResultsResponse]) error
	mustEmbedUnimplementedEmergencyLightApiServer()
}

// UnimplementedEmergencyLightApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmergencyLightApiServer struct{}

func (UnimplementedEmergencyLightApiServer) StartFunctionTest(context.Context, *StartEmergencyTestRequest) (*StartEmergencyTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFunctionTest not implemented")
}
func (UnimplementedEmergencyLightApiServer) StartDurationTest(context.Context, *StartEmergencyTestRequest) (*StartEmergencyTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDurationTest not implemented")
}
func (UnimplementedEmergencyLightApiServer) StopEmergencyTest(context.Context, *StopEmergencyTestsRequest) (*StopEmergencyTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopEmergencyTest not implemented")
}
func (UnimplementedEmergencyLightApiServer) GetTestResultSet(context.Context, *GetTestResultSetRequest) (*TestResultSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestResultSet not implemented")
}
func (UnimplementedEmergencyLightApiServer) PullTestResultSets(*PullTestResultRequest, grpc.ServerStreamingServer[PullTestResultsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullTestResultSets not implemented")
}
func (UnimplementedEmergencyLightApiServer) mustEmbedUnimplementedEmergencyLightApiServer() {}
func (UnimplementedEmergencyLightApiServer) testEmbeddedByValue()                           {}

// UnsafeEmergencyLightApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmergencyLightApiServer will
// result in compilation errors.
type UnsafeEmergencyLightApiServer interface {
	mustEmbedUnimplementedEmergencyLightApiServer()
}

func RegisterEmergencyLightApiServer(s grpc.ServiceRegistrar, srv EmergencyLightApiServer) {
	// If the following call pancis, it indicates UnimplementedEmergencyLightApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmergencyLightApi_ServiceDesc, srv)
}

func _EmergencyLightApi_StartFunctionTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEmergencyTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyLightApiServer).StartFunctionTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmergencyLightApi_StartFunctionTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyLightApiServer).StartFunctionTest(ctx, req.(*StartEmergencyTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyLightApi_StartDurationTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEmergencyTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyLightApiServer).StartDurationTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmergencyLightApi_StartDurationTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyLightApiServer).StartDurationTest(ctx, req.(*StartEmergencyTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyLightApi_StopEmergencyTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopEmergencyTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyLightApiServer).StopEmergencyTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmergencyLightApi_StopEmergencyTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyLightApiServer).StopEmergencyTest(ctx, req.(*StopEmergencyTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyLightApi_GetTestResultSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestResultSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmergencyLightApiServer).GetTestResultSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmergencyLightApi_GetTestResultSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmergencyLightApiServer).GetTestResultSet(ctx, req.(*GetTestResultSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmergencyLightApi_PullTestResultSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTestResultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmergencyLightApiServer).PullTestResultSets(m, &grpc.GenericServerStream[PullTestResultRequest, PullTestResultsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EmergencyLightApi_PullTestResultSetsServer = grpc.ServerStreamingServer[PullTestResultsResponse]

// EmergencyLightApi_ServiceDesc is the grpc.ServiceDesc for EmergencyLightApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmergencyLightApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.EmergencyLightApi",
	HandlerType: (*EmergencyLightApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFunctionTest",
			Handler:    _EmergencyLightApi_StartFunctionTest_Handler,
		},
		{
			MethodName: "StartDurationTest",
			Handler:    _EmergencyLightApi_StartDurationTest_Handler,
		},
		{
			MethodName: "StopEmergencyTest",
			Handler:    _EmergencyLightApi_StopEmergencyTest_Handler,
		},
		{
			MethodName: "GetTestResultSet",
			Handler:    _EmergencyLightApi_GetTestResultSet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullTestResultSets",
			Handler:       _EmergencyLightApi_PullTestResultSets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "emergency_light.proto",
}
