// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: transport.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransportApi_GetTransportState_FullMethodName  = "/smartcore.bos.TransportApi/GetTransportState"
	TransportApi_PullTransportState_FullMethodName = "/smartcore.bos.TransportApi/PullTransportState"
)

// TransportApiClient is the client API for TransportApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TransportAPI represents something that can transport something else between places.
// The transport will often be an elevator, but could be an escalator, conveyor etc.
type TransportApiClient interface {
	GetTransportState(ctx context.Context, in *GetTransportStateRequest, opts ...grpc.CallOption) (*TransportState, error)
	PullTransportState(ctx context.Context, in *PullTransportStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullTransportStateResponse], error)
}

type transportApiClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportApiClient(cc grpc.ClientConnInterface) TransportApiClient {
	return &transportApiClient{cc}
}

func (c *transportApiClient) GetTransportState(ctx context.Context, in *GetTransportStateRequest, opts ...grpc.CallOption) (*TransportState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransportState)
	err := c.cc.Invoke(ctx, TransportApi_GetTransportState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportApiClient) PullTransportState(ctx context.Context, in *PullTransportStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullTransportStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransportApi_ServiceDesc.Streams[0], TransportApi_PullTransportState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullTransportStateRequest, PullTransportStateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransportApi_PullTransportStateClient = grpc.ServerStreamingClient[PullTransportStateResponse]

// TransportApiServer is the server API for TransportApi service.
// All implementations must embed UnimplementedTransportApiServer
// for forward compatibility.
//
// TransportAPI represents something that can transport something else between places.
// The transport will often be an elevator, but could be an escalator, conveyor etc.
type TransportApiServer interface {
	GetTransportState(context.Context, *GetTransportStateRequest) (*TransportState, error)
	PullTransportState(*PullTransportStateRequest, grpc.ServerStreamingServer[PullTransportStateResponse]) error
	mustEmbedUnimplementedTransportApiServer()
}

// UnimplementedTransportApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransportApiServer struct{}

func (UnimplementedTransportApiServer) GetTransportState(context.Context, *GetTransportStateRequest) (*TransportState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransportState not implemented")
}
func (UnimplementedTransportApiServer) PullTransportState(*PullTransportStateRequest, grpc.ServerStreamingServer[PullTransportStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullTransportState not implemented")
}
func (UnimplementedTransportApiServer) mustEmbedUnimplementedTransportApiServer() {}
func (UnimplementedTransportApiServer) testEmbeddedByValue()                      {}

// UnsafeTransportApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportApiServer will
// result in compilation errors.
type UnsafeTransportApiServer interface {
	mustEmbedUnimplementedTransportApiServer()
}

func RegisterTransportApiServer(s grpc.ServiceRegistrar, srv TransportApiServer) {
	// If the following call pancis, it indicates UnimplementedTransportApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransportApi_ServiceDesc, srv)
}

func _TransportApi_GetTransportState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransportStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportApiServer).GetTransportState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportApi_GetTransportState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportApiServer).GetTransportState(ctx, req.(*GetTransportStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportApi_PullTransportState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTransportStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransportApiServer).PullTransportState(m, &grpc.GenericServerStream[PullTransportStateRequest, PullTransportStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransportApi_PullTransportStateServer = grpc.ServerStreamingServer[PullTransportStateResponse]

// TransportApi_ServiceDesc is the grpc.ServiceDesc for TransportApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.TransportApi",
	HandlerType: (*TransportApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransportState",
			Handler:    _TransportApi_GetTransportState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullTransportState",
			Handler:       _TransportApi_PullTransportState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transport.proto",
}

const (
	TransportInfo_DescribeTransportState_FullMethodName = "/smartcore.bos.TransportInfo/DescribeTransportState"
)

// TransportInfoClient is the client API for TransportInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportInfoClient interface {
	DescribeTransportState(ctx context.Context, in *DescribeTransportRequest, opts ...grpc.CallOption) (*TransportSupport, error)
}

type transportInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportInfoClient(cc grpc.ClientConnInterface) TransportInfoClient {
	return &transportInfoClient{cc}
}

func (c *transportInfoClient) DescribeTransportState(ctx context.Context, in *DescribeTransportRequest, opts ...grpc.CallOption) (*TransportSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransportSupport)
	err := c.cc.Invoke(ctx, TransportInfo_DescribeTransportState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportInfoServer is the server API for TransportInfo service.
// All implementations must embed UnimplementedTransportInfoServer
// for forward compatibility.
type TransportInfoServer interface {
	DescribeTransportState(context.Context, *DescribeTransportRequest) (*TransportSupport, error)
	mustEmbedUnimplementedTransportInfoServer()
}

// UnimplementedTransportInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransportInfoServer struct{}

func (UnimplementedTransportInfoServer) DescribeTransportState(context.Context, *DescribeTransportRequest) (*TransportSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTransportState not implemented")
}
func (UnimplementedTransportInfoServer) mustEmbedUnimplementedTransportInfoServer() {}
func (UnimplementedTransportInfoServer) testEmbeddedByValue()                       {}

// UnsafeTransportInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportInfoServer will
// result in compilation errors.
type UnsafeTransportInfoServer interface {
	mustEmbedUnimplementedTransportInfoServer()
}

func RegisterTransportInfoServer(s grpc.ServiceRegistrar, srv TransportInfoServer) {
	// If the following call pancis, it indicates UnimplementedTransportInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransportInfo_ServiceDesc, srv)
}

func _TransportInfo_DescribeTransportState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTransportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportInfoServer).DescribeTransportState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransportInfo_DescribeTransportState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportInfoServer).DescribeTransportState(ctx, req.(*DescribeTransportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportInfo_ServiceDesc is the grpc.ServiceDesc for TransportInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.TransportInfo",
	HandlerType: (*TransportInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeTransportState",
			Handler:    _TransportInfo_DescribeTransportState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport.proto",
}
