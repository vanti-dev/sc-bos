// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	context "context"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// WrapPointApi	adapts a PointApiServer	and presents it as a PointApiClient
func WrapPointApi(server PointApiServer) PointApiClient {
	return &pointApiWrapper{server}
}

type pointApiWrapper struct {
	server PointApiServer
}

// compile time check that we implement the interface we need
var _ PointApiClient = (*pointApiWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *pointApiWrapper) UnwrapServer() PointApiServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *pointApiWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *pointApiWrapper) GetPoints(ctx context.Context, req *GetPointsRequest, _ ...grpc.CallOption) (*Points, error) {
	return w.server.GetPoints(ctx, req)
}

func (w *pointApiWrapper) PullPoints(ctx context.Context, in *PullPointsRequest, opts ...grpc.CallOption) (PointApi_PullPointsClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullPointsPointApiServerWrapper{stream.Server()}
	client := &pullPointsPointApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullPoints(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullPointsPointApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullPointsPointApiClientWrapper) Recv() (*PullPointsResponse, error) {
	m := new(PullPointsResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullPointsPointApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullPointsPointApiServerWrapper) Send(response *PullPointsResponse) error {
	return s.ServerStream.SendMsg(response)
}
