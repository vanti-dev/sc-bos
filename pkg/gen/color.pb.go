// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: color.proto

package gen

import (
	types "github.com/smart-core-os/sc-api/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the color
type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels *ColorChannels `protobuf:"bytes,1,opt,name=channels,proto3" json:"channels,omitempty"`
	Preset   *ColorPreset   `protobuf:"bytes,2,opt,name=preset,proto3" json:"preset,omitempty"`
	// How the color changes or should change over time. On write only duration should be set.
	ColorTween *types.Tween `protobuf:"bytes,3,opt,name=color_tween,json=colorTween,proto3" json:"color_tween,omitempty"`
	// The target channel values. Ignored on write. On read zero values should be ignored iff target_preset is present.
	TargetChannels *ColorChannels `protobuf:"bytes,4,opt,name=target_channels,json=targetChannels,proto3" json:"target_channels,omitempty"`
	// The target preset. Ignored on write. If present ignore target_channels
	TargetPreset *ColorPreset `protobuf:"bytes,5,opt,name=target_preset,json=targetPreset,proto3" json:"target_preset,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_color_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_color_proto_rawDescGZIP(), []int{0}
}

func (x *Color) GetChannels() *ColorChannels {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Color) GetPreset() *ColorPreset {
	if x != nil {
		return x.Preset
	}
	return nil
}

func (x *Color) GetColorTween() *types.Tween {
	if x != nil {
		return x.ColorTween
	}
	return nil
}

func (x *Color) GetTargetChannels() *ColorChannels {
	if x != nil {
		return x.TargetChannels
	}
	return nil
}

func (x *Color) GetTargetPreset() *ColorPreset {
	if x != nil {
		return x.TargetPreset
	}
	return nil
}

// ColorChannels represents different channels of color for a device, e.g. red, green, and blue
type ColorChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// red channel value in the range [0,255]
	// optional on write, required on read if supported
	Red *uint32 `protobuf:"varint,1,opt,name=red,proto3,oneof" json:"red,omitempty"`
	// green channel value in the range [0,255]
	// optional on write, required on read if supported
	Green *uint32 `protobuf:"varint,2,opt,name=green,proto3,oneof" json:"green,omitempty"`
	// blue channel value in the range [0,255]
	// optional on write, required on read if supported
	Blue *uint32 `protobuf:"varint,3,opt,name=blue,proto3,oneof" json:"blue,omitempty"`
	// if the device supports an intensity channel, that is represented here in the range [0,255]
	// optional on write, required on read if supported
	Intensity *uint32 `protobuf:"varint,4,opt,name=intensity,proto3,oneof" json:"intensity,omitempty"`
	// if the device supports color temperature, that is represented here in Kelvin, typically in the range [2000,9000]
	// optional on write, required on read if supported
	Temperature *uint32 `protobuf:"varint,5,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	// a map of other channel names to value, where the value is [0-255]
	// all values supported (that aren't specific fields above) should be present in the map,
	// even if the value is 0; except on write when values not to be changed should be omitted
	// e.g. if a device supports RGBW (red, green, blue, and white), then this map
	// should contain the white value: {more: {white: 255}}
	More map[string]uint32 `protobuf:"bytes,6,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ColorChannels) Reset() {
	*x = ColorChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorChannels) ProtoMessage() {}

func (x *ColorChannels) ProtoReflect() protoreflect.Message {
	mi := &file_color_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorChannels.ProtoReflect.Descriptor instead.
func (*ColorChannels) Descriptor() ([]byte, []int) {
	return file_color_proto_rawDescGZIP(), []int{1}
}

func (x *ColorChannels) GetRed() uint32 {
	if x != nil && x.Red != nil {
		return *x.Red
	}
	return 0
}

func (x *ColorChannels) GetGreen() uint32 {
	if x != nil && x.Green != nil {
		return *x.Green
	}
	return 0
}

func (x *ColorChannels) GetBlue() uint32 {
	if x != nil && x.Blue != nil {
		return *x.Blue
	}
	return 0
}

func (x *ColorChannels) GetIntensity() uint32 {
	if x != nil && x.Intensity != nil {
		return *x.Intensity
	}
	return 0
}

func (x *ColorChannels) GetTemperature() uint32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *ColorChannels) GetMore() map[string]uint32 {
	if x != nil {
		return x.More
	}
	return nil
}

type ColorPreset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a unique name for this preset, which could be a number or ID, e.g. "143", or "preset_1"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// a display name for this preset, e.g. "Wake Up", or "Film Mode"
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ColorPreset) Reset() {
	*x = ColorPreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorPreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorPreset) ProtoMessage() {}

func (x *ColorPreset) ProtoReflect() protoreflect.Message {
	mi := &file_color_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorPreset.ProtoReflect.Descriptor instead.
func (*ColorPreset) Descriptor() ([]byte, []int) {
	return file_color_proto_rawDescGZIP(), []int{2}
}

func (x *ColorPreset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColorPreset) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// ColorSupport describes the capabilities of devices implementing this trait
type ColorSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How a named device supports read/write/pull apis
	ResourceSupport *types.ResourceSupport `protobuf:"bytes,1,opt,name=resource_support,json=resourceSupport,proto3" json:"resource_support,omitempty"`
	// control how the color can be controlled. The range of these attributes is fixed at 0-100 as a percentage
	ColorAttributes *types.Int32Attributes `protobuf:"bytes,2,opt,name=color_attributes,json=colorAttributes,proto3" json:"color_attributes,omitempty"`
	// A description of the supported presets, none means no presets
	Presets []*ColorPreset `protobuf:"bytes,3,rep,name=presets,proto3" json:"presets,omitempty"`
	// A description of the supported channels, none means no channels
	// this would include "red", "green", "blue", "intensity" and "temperature" as appropriate,
	// as well as any other channels
	Channels []string `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *ColorSupport) Reset() {
	*x = ColorSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorSupport) ProtoMessage() {}

func (x *ColorSupport) ProtoReflect() protoreflect.Message {
	mi := &file_color_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorSupport.ProtoReflect.Descriptor instead.
func (*ColorSupport) Descriptor() ([]byte, []int) {
	return file_color_proto_rawDescGZIP(), []int{3}
}

func (x *ColorSupport) GetResourceSupport() *types.ResourceSupport {
	if x != nil {
		return x.ResourceSupport
	}
	return nil
}

func (x *ColorSupport) GetColorAttributes() *types.Int32Attributes {
	if x != nil {
		return x.ColorAttributes
	}
	return nil
}

func (x *ColorSupport) GetPresets() []*ColorPreset {
	if x != nil {
		return x.Presets
	}
	return nil
}

func (x *ColorSupport) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

// A request to update the value of a color
type UpdateColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device to update
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new value for the color. Supply ramp to transition
	Color *Color `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	// The state fields to update
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateColorRequest) Reset() {
	*x = UpdateColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateColorRequest) ProtoMessage() {}

func (x *UpdateColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_color_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateColorRequest.ProtoReflect.Descriptor instead.
func (*UpdateColorRequest) Descriptor() ([]byte, []int) {
	return file_color_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateColorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateColorRequest) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *UpdateColorRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// A request to get the current value of a color
type GetColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device to get the value for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state fields to fetch
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetColorRequest) Reset() {
	*x = GetColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetColorRequest) ProtoMessage() {}

func (x *GetColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_color_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetColorRequest.ProtoReflect.Descriptor instead.
func (*GetColorRequest) Descriptor() ([]byte, []int) {
	return file_color_proto_rawDescGZIP(), []int{5}
}

func (x *GetColorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetColorRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

// Request to begin a subscription for color values
type PullColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device we want events from
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Indicate whether we want to be notified of values while ramping or not. The device may ignore this depending on
	// capabilities
	ExcludeRamping bool `protobuf:"varint,2,opt,name=exclude_ramping,json=excludeRamping,proto3" json:"exclude_ramping,omitempty"`
	// The state fields to fetch
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,4,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullColorRequest) Reset() {
	*x = PullColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullColorRequest) ProtoMessage() {}

func (x *PullColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_color_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullColorRequest.ProtoReflect.Descriptor instead.
func (*PullColorRequest) Descriptor() ([]byte, []int) {
	return file_color_proto_rawDescGZIP(), []int{6}
}

func (x *PullColorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullColorRequest) GetExcludeRamping() bool {
	if x != nil {
		return x.ExcludeRamping
	}
	return false
}

func (x *PullColorRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullColorRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

// A response as part of the stream of changes to the color value
type PullColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of changes
	Changes []*PullColorResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullColorResponse) Reset() {
	*x = PullColorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullColorResponse) ProtoMessage() {}

func (x *PullColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_color_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullColorResponse.ProtoReflect.Descriptor instead.
func (*PullColorResponse) Descriptor() ([]byte, []int) {
	return file_color_proto_rawDescGZIP(), []int{7}
}

func (x *PullColorResponse) GetChanges() []*PullColorResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type DescribeColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DescribeColorRequest) Reset() {
	*x = DescribeColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeColorRequest) ProtoMessage() {}

func (x *DescribeColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_color_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeColorRequest.ProtoReflect.Descriptor instead.
func (*DescribeColorRequest) Descriptor() ([]byte, []int) {
	return file_color_proto_rawDescGZIP(), []int{8}
}

func (x *DescribeColorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A change to a single devices color value
type PullColorResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// The new value for the color
	Color *Color `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *PullColorResponse_Change) Reset() {
	*x = PullColorResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_color_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullColorResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullColorResponse_Change) ProtoMessage() {}

func (x *PullColorResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_color_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullColorResponse_Change.ProtoReflect.Descriptor instead.
func (*PullColorResponse_Change) Descriptor() ([]byte, []int) {
	return file_color_proto_rawDescGZIP(), []int{7, 0}
}

func (x *PullColorResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullColorResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullColorResponse_Change) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

var File_color_proto protoreflect.FileDescriptor

var file_color_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x22, 0xd2, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x03, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x6d, 0x6f, 0x72, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x72, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x37, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0xfa, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x4b, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a,
	0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x91, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0xab, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x61, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xde,
	0x01, 0x0a, 0x11, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
	0x2a, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xe6, 0x01, 0x0a, 0x08,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x70, 0x69, 0x12, 0x40, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x50, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x1f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e,
	0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73,
	0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x32, 0x5e, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x51, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x23, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x62,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x62, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6e, 0x74, 0x69, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x63, 0x2d,
	0x62, 0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_color_proto_rawDescOnce sync.Once
	file_color_proto_rawDescData = file_color_proto_rawDesc
)

func file_color_proto_rawDescGZIP() []byte {
	file_color_proto_rawDescOnce.Do(func() {
		file_color_proto_rawDescData = protoimpl.X.CompressGZIP(file_color_proto_rawDescData)
	})
	return file_color_proto_rawDescData
}

var file_color_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_color_proto_goTypes = []interface{}{
	(*Color)(nil),                    // 0: smartcore.bos.Color
	(*ColorChannels)(nil),            // 1: smartcore.bos.ColorChannels
	(*ColorPreset)(nil),              // 2: smartcore.bos.ColorPreset
	(*ColorSupport)(nil),             // 3: smartcore.bos.ColorSupport
	(*UpdateColorRequest)(nil),       // 4: smartcore.bos.UpdateColorRequest
	(*GetColorRequest)(nil),          // 5: smartcore.bos.GetColorRequest
	(*PullColorRequest)(nil),         // 6: smartcore.bos.PullColorRequest
	(*PullColorResponse)(nil),        // 7: smartcore.bos.PullColorResponse
	(*DescribeColorRequest)(nil),     // 8: smartcore.bos.DescribeColorRequest
	nil,                              // 9: smartcore.bos.ColorChannels.MoreEntry
	(*PullColorResponse_Change)(nil), // 10: smartcore.bos.PullColorResponse.Change
	(*types.Tween)(nil),              // 11: smartcore.types.Tween
	(*types.ResourceSupport)(nil),    // 12: smartcore.types.ResourceSupport
	(*types.Int32Attributes)(nil),    // 13: smartcore.types.Int32Attributes
	(*fieldmaskpb.FieldMask)(nil),    // 14: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),    // 15: google.protobuf.Timestamp
}
var file_color_proto_depIdxs = []int32{
	1,  // 0: smartcore.bos.Color.channels:type_name -> smartcore.bos.ColorChannels
	2,  // 1: smartcore.bos.Color.preset:type_name -> smartcore.bos.ColorPreset
	11, // 2: smartcore.bos.Color.color_tween:type_name -> smartcore.types.Tween
	1,  // 3: smartcore.bos.Color.target_channels:type_name -> smartcore.bos.ColorChannels
	2,  // 4: smartcore.bos.Color.target_preset:type_name -> smartcore.bos.ColorPreset
	9,  // 5: smartcore.bos.ColorChannels.more:type_name -> smartcore.bos.ColorChannels.MoreEntry
	12, // 6: smartcore.bos.ColorSupport.resource_support:type_name -> smartcore.types.ResourceSupport
	13, // 7: smartcore.bos.ColorSupport.color_attributes:type_name -> smartcore.types.Int32Attributes
	2,  // 8: smartcore.bos.ColorSupport.presets:type_name -> smartcore.bos.ColorPreset
	0,  // 9: smartcore.bos.UpdateColorRequest.color:type_name -> smartcore.bos.Color
	14, // 10: smartcore.bos.UpdateColorRequest.update_mask:type_name -> google.protobuf.FieldMask
	14, // 11: smartcore.bos.GetColorRequest.read_mask:type_name -> google.protobuf.FieldMask
	14, // 12: smartcore.bos.PullColorRequest.read_mask:type_name -> google.protobuf.FieldMask
	10, // 13: smartcore.bos.PullColorResponse.changes:type_name -> smartcore.bos.PullColorResponse.Change
	15, // 14: smartcore.bos.PullColorResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	0,  // 15: smartcore.bos.PullColorResponse.Change.color:type_name -> smartcore.bos.Color
	5,  // 16: smartcore.bos.ColorApi.GetColor:input_type -> smartcore.bos.GetColorRequest
	4,  // 17: smartcore.bos.ColorApi.UpdateColor:input_type -> smartcore.bos.UpdateColorRequest
	6,  // 18: smartcore.bos.ColorApi.PullColor:input_type -> smartcore.bos.PullColorRequest
	8,  // 19: smartcore.bos.ColorInfo.DescribeColor:input_type -> smartcore.bos.DescribeColorRequest
	0,  // 20: smartcore.bos.ColorApi.GetColor:output_type -> smartcore.bos.Color
	0,  // 21: smartcore.bos.ColorApi.UpdateColor:output_type -> smartcore.bos.Color
	7,  // 22: smartcore.bos.ColorApi.PullColor:output_type -> smartcore.bos.PullColorResponse
	3,  // 23: smartcore.bos.ColorInfo.DescribeColor:output_type -> smartcore.bos.ColorSupport
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_color_proto_init() }
func file_color_proto_init() {
	if File_color_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_color_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorPreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullColorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_color_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullColorResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_color_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_color_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_color_proto_goTypes,
		DependencyIndexes: file_color_proto_depIdxs,
		MessageInfos:      file_color_proto_msgTypes,
	}.Build()
	File_color_proto = out.File
	file_color_proto_rawDesc = nil
	file_color_proto_goTypes = nil
	file_color_proto_depIdxs = nil
}
