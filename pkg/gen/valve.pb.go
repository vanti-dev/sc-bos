// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: valve.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Valve_ValveMode int32

const (
	Valve_VALVE_MODE_UNKNOWN Valve_ValveMode = 0
	Valve_VALVE_MODE_FLOW    Valve_ValveMode = 1
	Valve_VALVE_MODE_RETURN  Valve_ValveMode = 2
	Valve_VALVE_MODE_BLOCKED Valve_ValveMode = 3
)

// Enum value maps for Valve_ValveMode.
var (
	Valve_ValveMode_name = map[int32]string{
		0: "VALVE_MODE_UNKNOWN",
		1: "VALVE_MODE_FLOW",
		2: "VALVE_MODE_RETURN",
		3: "VALVE_MODE_BLOCKED",
	}
	Valve_ValveMode_value = map[string]int32{
		"VALVE_MODE_UNKNOWN": 0,
		"VALVE_MODE_FLOW":    1,
		"VALVE_MODE_RETURN":  2,
		"VALVE_MODE_BLOCKED": 3,
	}
)

func (x Valve_ValveMode) Enum() *Valve_ValveMode {
	p := new(Valve_ValveMode)
	*p = x
	return p
}

func (x Valve_ValveMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Valve_ValveMode) Descriptor() protoreflect.EnumDescriptor {
	return file_valve_proto_enumTypes[0].Descriptor()
}

func (Valve_ValveMode) Type() protoreflect.EnumType {
	return &file_valve_proto_enumTypes[0]
}

func (x Valve_ValveMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Valve_ValveMode.Descriptor instead.
func (Valve_ValveMode) EnumDescriptor() ([]byte, []int) {
	return file_valve_proto_rawDescGZIP(), []int{0, 0}
}

type Valve struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// flow rate set point e.g. L/s
	FlowRateSetPoint float32 `protobuf:"fixed32,1,opt,name=flow_rate_set_point,json=flowRateSetPoint,proto3" json:"flow_rate_set_point,omitempty"`
	// flow rate sensor e.g. L/s
	// read_only
	FlowRateSensor float32 `protobuf:"fixed32,2,opt,name=flow_rate_sensor,json=flowRateSensor,proto3" json:"flow_rate_sensor,omitempty"`
	// openness of the valve sensor, 0-100%
	// read_only
	PumpageSensor float32 `protobuf:"fixed32,3,opt,name=pumpage_sensor,json=pumpageSensor,proto3" json:"pumpage_sensor,omitempty"`
	// openness of the valve's pump set point, 0-100%
	PumpageSetPoint float32 `protobuf:"fixed32,4,opt,name=pumpage_set_point,json=pumpageSetPoint,proto3" json:"pumpage_set_point,omitempty"`
	// temperature sensor e.g. C
	// read_only
	TemperatureSensor float32 `protobuf:"fixed32,5,opt,name=temperature_sensor,json=temperatureSensor,proto3" json:"temperature_sensor,omitempty"`
	// temperature set point e.g. C
	TemperatureSetPoint float32 `protobuf:"fixed32,6,opt,name=temperature_set_point,json=temperatureSetPoint,proto3" json:"temperature_set_point,omitempty"`
	// pressure sensor e.g. bar
	// read_only
	PressureSensor float32 `protobuf:"fixed32,7,opt,name=pressure_sensor,json=pressureSensor,proto3" json:"pressure_sensor,omitempty"`
	// pressure set point e.g. bar
	PressureSetPoint float32 `protobuf:"fixed32,8,opt,name=pressure_set_point,json=pressureSetPoint,proto3" json:"pressure_set_point,omitempty"`
	// drive frequency sensor e.g. Hz
	// read_only
	DriveFrequencySensor float32 `protobuf:"fixed32,9,opt,name=drive_frequency_sensor,json=driveFrequencySensor,proto3" json:"drive_frequency_sensor,omitempty"`
	// drive frequency set point e.g. Hz
	DriveFrequencySetPoint float32 `protobuf:"fixed32,10,opt,name=drive_frequency_set_point,json=driveFrequencySetPoint,proto3" json:"drive_frequency_set_point,omitempty"`
	// the valve operation mode
	Mode          Valve_ValveMode `protobuf:"varint,11,opt,name=mode,proto3,enum=smartcore.bos.Valve_ValveMode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Valve) Reset() {
	*x = Valve{}
	mi := &file_valve_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Valve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Valve) ProtoMessage() {}

func (x *Valve) ProtoReflect() protoreflect.Message {
	mi := &file_valve_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Valve.ProtoReflect.Descriptor instead.
func (*Valve) Descriptor() ([]byte, []int) {
	return file_valve_proto_rawDescGZIP(), []int{0}
}

func (x *Valve) GetFlowRateSetPoint() float32 {
	if x != nil {
		return x.FlowRateSetPoint
	}
	return 0
}

func (x *Valve) GetFlowRateSensor() float32 {
	if x != nil {
		return x.FlowRateSensor
	}
	return 0
}

func (x *Valve) GetPumpageSensor() float32 {
	if x != nil {
		return x.PumpageSensor
	}
	return 0
}

func (x *Valve) GetPumpageSetPoint() float32 {
	if x != nil {
		return x.PumpageSetPoint
	}
	return 0
}

func (x *Valve) GetTemperatureSensor() float32 {
	if x != nil {
		return x.TemperatureSensor
	}
	return 0
}

func (x *Valve) GetTemperatureSetPoint() float32 {
	if x != nil {
		return x.TemperatureSetPoint
	}
	return 0
}

func (x *Valve) GetPressureSensor() float32 {
	if x != nil {
		return x.PressureSensor
	}
	return 0
}

func (x *Valve) GetPressureSetPoint() float32 {
	if x != nil {
		return x.PressureSetPoint
	}
	return 0
}

func (x *Valve) GetDriveFrequencySensor() float32 {
	if x != nil {
		return x.DriveFrequencySensor
	}
	return 0
}

func (x *Valve) GetDriveFrequencySetPoint() float32 {
	if x != nil {
		return x.DriveFrequencySetPoint
	}
	return 0
}

func (x *Valve) GetMode() Valve_ValveMode {
	if x != nil {
		return x.Mode
	}
	return Valve_VALVE_MODE_UNKNOWN
}

type GetValveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadMask      *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValveRequest) Reset() {
	*x = GetValveRequest{}
	mi := &file_valve_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValveRequest) ProtoMessage() {}

func (x *GetValveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_valve_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValveRequest.ProtoReflect.Descriptor instead.
func (*GetValveRequest) Descriptor() ([]byte, []int) {
	return file_valve_proto_rawDescGZIP(), []int{1}
}

func (x *GetValveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetValveRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type PullValveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadMask      *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	UpdatesOnly   bool                   `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullValveRequest) Reset() {
	*x = PullValveRequest{}
	mi := &file_valve_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullValveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullValveRequest) ProtoMessage() {}

func (x *PullValveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_valve_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullValveRequest.ProtoReflect.Descriptor instead.
func (*PullValveRequest) Descriptor() ([]byte, []int) {
	return file_valve_proto_rawDescGZIP(), []int{2}
}

func (x *PullValveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullValveRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullValveRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullValveResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Changes       []*PullValveResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullValveResponse) Reset() {
	*x = PullValveResponse{}
	mi := &file_valve_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullValveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullValveResponse) ProtoMessage() {}

func (x *PullValveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_valve_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullValveResponse.ProtoReflect.Descriptor instead.
func (*PullValveResponse) Descriptor() ([]byte, []int) {
	return file_valve_proto_rawDescGZIP(), []int{3}
}

func (x *PullValveResponse) GetChanges() []*PullValveResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type UpdateValveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Valve         *Valve                 `protobuf:"bytes,2,opt,name=valve,proto3" json:"valve,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValveRequest) Reset() {
	*x = UpdateValveRequest{}
	mi := &file_valve_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValveRequest) ProtoMessage() {}

func (x *UpdateValveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_valve_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValveRequest.ProtoReflect.Descriptor instead.
func (*UpdateValveRequest) Descriptor() ([]byte, []int) {
	return file_valve_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateValveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateValveRequest) GetValve() *Valve {
	if x != nil {
		return x.Valve
	}
	return nil
}

func (x *UpdateValveRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateValveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Valve         *Valve                 `protobuf:"bytes,1,opt,name=valve,proto3" json:"valve,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValveResponse) Reset() {
	*x = UpdateValveResponse{}
	mi := &file_valve_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValveResponse) ProtoMessage() {}

func (x *UpdateValveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_valve_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValveResponse.ProtoReflect.Descriptor instead.
func (*UpdateValveResponse) Descriptor() ([]byte, []int) {
	return file_valve_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateValveResponse) GetValve() *Valve {
	if x != nil {
		return x.Valve
	}
	return nil
}

type PullValveResponse_Change struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ChangeTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	Valve         *Valve                 `protobuf:"bytes,3,opt,name=valve,proto3" json:"valve,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullValveResponse_Change) Reset() {
	*x = PullValveResponse_Change{}
	mi := &file_valve_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullValveResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullValveResponse_Change) ProtoMessage() {}

func (x *PullValveResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_valve_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullValveResponse_Change.ProtoReflect.Descriptor instead.
func (*PullValveResponse_Change) Descriptor() ([]byte, []int) {
	return file_valve_proto_rawDescGZIP(), []int{3, 0}
}

func (x *PullValveResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullValveResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullValveResponse_Change) GetValve() *Valve {
	if x != nil {
		return x.Valve
	}
	return nil
}

var File_valve_proto protoreflect.FileDescriptor

const file_valve_proto_rawDesc = "" +
	"\n" +
	"\vvalve.proto\x12\rsmartcore.bos\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xfb\x04\n" +
	"\x05Valve\x12-\n" +
	"\x13flow_rate_set_point\x18\x01 \x01(\x02R\x10flowRateSetPoint\x12(\n" +
	"\x10flow_rate_sensor\x18\x02 \x01(\x02R\x0eflowRateSensor\x12%\n" +
	"\x0epumpage_sensor\x18\x03 \x01(\x02R\rpumpageSensor\x12*\n" +
	"\x11pumpage_set_point\x18\x04 \x01(\x02R\x0fpumpageSetPoint\x12-\n" +
	"\x12temperature_sensor\x18\x05 \x01(\x02R\x11temperatureSensor\x122\n" +
	"\x15temperature_set_point\x18\x06 \x01(\x02R\x13temperatureSetPoint\x12'\n" +
	"\x0fpressure_sensor\x18\a \x01(\x02R\x0epressureSensor\x12,\n" +
	"\x12pressure_set_point\x18\b \x01(\x02R\x10pressureSetPoint\x124\n" +
	"\x16drive_frequency_sensor\x18\t \x01(\x02R\x14driveFrequencySensor\x129\n" +
	"\x19drive_frequency_set_point\x18\n" +
	" \x01(\x02R\x16driveFrequencySetPoint\x122\n" +
	"\x04mode\x18\v \x01(\x0e2\x1e.smartcore.bos.Valve.ValveModeR\x04mode\"g\n" +
	"\tValveMode\x12\x16\n" +
	"\x12VALVE_MODE_UNKNOWN\x10\x00\x12\x13\n" +
	"\x0fVALVE_MODE_FLOW\x10\x01\x12\x15\n" +
	"\x11VALVE_MODE_RETURN\x10\x02\x12\x16\n" +
	"\x12VALVE_MODE_BLOCKED\x10\x03\"^\n" +
	"\x0fGetValveRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x127\n" +
	"\tread_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\"\x82\x01\n" +
	"\x10PullValveRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x127\n" +
	"\tread_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12!\n" +
	"\fupdates_only\x18\x03 \x01(\bR\vupdatesOnly\"\xde\x01\n" +
	"\x11PullValveResponse\x12A\n" +
	"\achanges\x18\x01 \x03(\v2'.smartcore.bos.PullValveResponse.ChangeR\achanges\x1a\x85\x01\n" +
	"\x06Change\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12;\n" +
	"\vchange_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"changeTime\x12*\n" +
	"\x05valve\x18\x03 \x01(\v2\x14.smartcore.bos.ValveR\x05valve\"\x91\x01\n" +
	"\x12UpdateValveRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12*\n" +
	"\x05valve\x18\x02 \x01(\v2\x14.smartcore.bos.ValveR\x05valve\x12;\n" +
	"\vupdate_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"A\n" +
	"\x13UpdateValveResponse\x12*\n" +
	"\x05valve\x18\x01 \x01(\v2\x14.smartcore.bos.ValveR\x05valve2\xec\x01\n" +
	"\bValveApi\x12B\n" +
	"\bGetValve\x12\x1e.smartcore.bos.GetValveRequest\x1a\x14.smartcore.bos.Valve\"\x00\x12R\n" +
	"\tPullValve\x12\x1f.smartcore.bos.PullValveRequest\x1a .smartcore.bos.PullValveResponse\"\x000\x01\x12H\n" +
	"\vUpdateValve\x12!.smartcore.bos.UpdateValveRequest\x1a\x14.smartcore.bos.Valve\"\x00B%Z#github.com/vanti-dev/sc-bos/pkg/genb\x06proto3"

var (
	file_valve_proto_rawDescOnce sync.Once
	file_valve_proto_rawDescData []byte
)

func file_valve_proto_rawDescGZIP() []byte {
	file_valve_proto_rawDescOnce.Do(func() {
		file_valve_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_valve_proto_rawDesc), len(file_valve_proto_rawDesc)))
	})
	return file_valve_proto_rawDescData
}

var file_valve_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_valve_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_valve_proto_goTypes = []any{
	(Valve_ValveMode)(0),             // 0: smartcore.bos.Valve.ValveMode
	(*Valve)(nil),                    // 1: smartcore.bos.Valve
	(*GetValveRequest)(nil),          // 2: smartcore.bos.GetValveRequest
	(*PullValveRequest)(nil),         // 3: smartcore.bos.PullValveRequest
	(*PullValveResponse)(nil),        // 4: smartcore.bos.PullValveResponse
	(*UpdateValveRequest)(nil),       // 5: smartcore.bos.UpdateValveRequest
	(*UpdateValveResponse)(nil),      // 6: smartcore.bos.UpdateValveResponse
	(*PullValveResponse_Change)(nil), // 7: smartcore.bos.PullValveResponse.Change
	(*fieldmaskpb.FieldMask)(nil),    // 8: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),    // 9: google.protobuf.Timestamp
}
var file_valve_proto_depIdxs = []int32{
	0,  // 0: smartcore.bos.Valve.mode:type_name -> smartcore.bos.Valve.ValveMode
	8,  // 1: smartcore.bos.GetValveRequest.read_mask:type_name -> google.protobuf.FieldMask
	8,  // 2: smartcore.bos.PullValveRequest.read_mask:type_name -> google.protobuf.FieldMask
	7,  // 3: smartcore.bos.PullValveResponse.changes:type_name -> smartcore.bos.PullValveResponse.Change
	1,  // 4: smartcore.bos.UpdateValveRequest.valve:type_name -> smartcore.bos.Valve
	8,  // 5: smartcore.bos.UpdateValveRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 6: smartcore.bos.UpdateValveResponse.valve:type_name -> smartcore.bos.Valve
	9,  // 7: smartcore.bos.PullValveResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	1,  // 8: smartcore.bos.PullValveResponse.Change.valve:type_name -> smartcore.bos.Valve
	2,  // 9: smartcore.bos.ValveApi.GetValve:input_type -> smartcore.bos.GetValveRequest
	3,  // 10: smartcore.bos.ValveApi.PullValve:input_type -> smartcore.bos.PullValveRequest
	5,  // 11: smartcore.bos.ValveApi.UpdateValve:input_type -> smartcore.bos.UpdateValveRequest
	1,  // 12: smartcore.bos.ValveApi.GetValve:output_type -> smartcore.bos.Valve
	4,  // 13: smartcore.bos.ValveApi.PullValve:output_type -> smartcore.bos.PullValveResponse
	1,  // 14: smartcore.bos.ValveApi.UpdateValve:output_type -> smartcore.bos.Valve
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_valve_proto_init() }
func file_valve_proto_init() {
	if File_valve_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_valve_proto_rawDesc), len(file_valve_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_valve_proto_goTypes,
		DependencyIndexes: file_valve_proto_depIdxs,
		EnumInfos:         file_valve_proto_enumTypes,
		MessageInfos:      file_valve_proto_msgTypes,
	}.Build()
	File_valve_proto = out.File
	file_valve_proto_goTypes = nil
	file_valve_proto_depIdxs = nil
}
