// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: status.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StatusApi_GetCurrentStatus_FullMethodName  = "/smartcore.bos.StatusApi/GetCurrentStatus"
	StatusApi_PullCurrentStatus_FullMethodName = "/smartcore.bos.StatusApi/PullCurrentStatus"
)

// StatusApiClient is the client API for StatusApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Provides access to device status and problems.
// Any device or group may implement this trait to provide visibility into the function of the device.
type StatusApiClient interface {
	GetCurrentStatus(ctx context.Context, in *GetCurrentStatusRequest, opts ...grpc.CallOption) (*StatusLog, error)
	PullCurrentStatus(ctx context.Context, in *PullCurrentStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullCurrentStatusResponse], error)
}

type statusApiClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusApiClient(cc grpc.ClientConnInterface) StatusApiClient {
	return &statusApiClient{cc}
}

func (c *statusApiClient) GetCurrentStatus(ctx context.Context, in *GetCurrentStatusRequest, opts ...grpc.CallOption) (*StatusLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusLog)
	err := c.cc.Invoke(ctx, StatusApi_GetCurrentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusApiClient) PullCurrentStatus(ctx context.Context, in *PullCurrentStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullCurrentStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StatusApi_ServiceDesc.Streams[0], StatusApi_PullCurrentStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullCurrentStatusRequest, PullCurrentStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StatusApi_PullCurrentStatusClient = grpc.ServerStreamingClient[PullCurrentStatusResponse]

// StatusApiServer is the server API for StatusApi service.
// All implementations must embed UnimplementedStatusApiServer
// for forward compatibility.
//
// Provides access to device status and problems.
// Any device or group may implement this trait to provide visibility into the function of the device.
type StatusApiServer interface {
	GetCurrentStatus(context.Context, *GetCurrentStatusRequest) (*StatusLog, error)
	PullCurrentStatus(*PullCurrentStatusRequest, grpc.ServerStreamingServer[PullCurrentStatusResponse]) error
	mustEmbedUnimplementedStatusApiServer()
}

// UnimplementedStatusApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatusApiServer struct{}

func (UnimplementedStatusApiServer) GetCurrentStatus(context.Context, *GetCurrentStatusRequest) (*StatusLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentStatus not implemented")
}
func (UnimplementedStatusApiServer) PullCurrentStatus(*PullCurrentStatusRequest, grpc.ServerStreamingServer[PullCurrentStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullCurrentStatus not implemented")
}
func (UnimplementedStatusApiServer) mustEmbedUnimplementedStatusApiServer() {}
func (UnimplementedStatusApiServer) testEmbeddedByValue()                   {}

// UnsafeStatusApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusApiServer will
// result in compilation errors.
type UnsafeStatusApiServer interface {
	mustEmbedUnimplementedStatusApiServer()
}

func RegisterStatusApiServer(s grpc.ServiceRegistrar, srv StatusApiServer) {
	// If the following call pancis, it indicates UnimplementedStatusApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatusApi_ServiceDesc, srv)
}

func _StatusApi_GetCurrentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusApiServer).GetCurrentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusApi_GetCurrentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusApiServer).GetCurrentStatus(ctx, req.(*GetCurrentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusApi_PullCurrentStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullCurrentStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatusApiServer).PullCurrentStatus(m, &grpc.GenericServerStream[PullCurrentStatusRequest, PullCurrentStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StatusApi_PullCurrentStatusServer = grpc.ServerStreamingServer[PullCurrentStatusResponse]

// StatusApi_ServiceDesc is the grpc.ServiceDesc for StatusApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatusApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.StatusApi",
	HandlerType: (*StatusApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentStatus",
			Handler:    _StatusApi_GetCurrentStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullCurrentStatus",
			Handler:       _StatusApi_PullCurrentStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "status.proto",
}

const (
	StatusHistory_ListCurrentStatusHistory_FullMethodName = "/smartcore.bos.StatusHistory/ListCurrentStatusHistory"
)

// StatusHistoryClient is the client API for StatusHistory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Provides historical entries for changes to the status of a device.
type StatusHistoryClient interface {
	ListCurrentStatusHistory(ctx context.Context, in *ListCurrentStatusHistoryRequest, opts ...grpc.CallOption) (*ListCurrentStatusHistoryResponse, error)
}

type statusHistoryClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusHistoryClient(cc grpc.ClientConnInterface) StatusHistoryClient {
	return &statusHistoryClient{cc}
}

func (c *statusHistoryClient) ListCurrentStatusHistory(ctx context.Context, in *ListCurrentStatusHistoryRequest, opts ...grpc.CallOption) (*ListCurrentStatusHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCurrentStatusHistoryResponse)
	err := c.cc.Invoke(ctx, StatusHistory_ListCurrentStatusHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusHistoryServer is the server API for StatusHistory service.
// All implementations must embed UnimplementedStatusHistoryServer
// for forward compatibility.
//
// Provides historical entries for changes to the status of a device.
type StatusHistoryServer interface {
	ListCurrentStatusHistory(context.Context, *ListCurrentStatusHistoryRequest) (*ListCurrentStatusHistoryResponse, error)
	mustEmbedUnimplementedStatusHistoryServer()
}

// UnimplementedStatusHistoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatusHistoryServer struct{}

func (UnimplementedStatusHistoryServer) ListCurrentStatusHistory(context.Context, *ListCurrentStatusHistoryRequest) (*ListCurrentStatusHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrentStatusHistory not implemented")
}
func (UnimplementedStatusHistoryServer) mustEmbedUnimplementedStatusHistoryServer() {}
func (UnimplementedStatusHistoryServer) testEmbeddedByValue()                       {}

// UnsafeStatusHistoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusHistoryServer will
// result in compilation errors.
type UnsafeStatusHistoryServer interface {
	mustEmbedUnimplementedStatusHistoryServer()
}

func RegisterStatusHistoryServer(s grpc.ServiceRegistrar, srv StatusHistoryServer) {
	// If the following call pancis, it indicates UnimplementedStatusHistoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatusHistory_ServiceDesc, srv)
}

func _StatusHistory_ListCurrentStatusHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrentStatusHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusHistoryServer).ListCurrentStatusHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusHistory_ListCurrentStatusHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusHistoryServer).ListCurrentStatusHistory(ctx, req.(*ListCurrentStatusHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatusHistory_ServiceDesc is the grpc.ServiceDesc for StatusHistory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatusHistory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.StatusHistory",
	HandlerType: (*StatusHistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCurrentStatusHistory",
			Handler:    _StatusHistory_ListCurrentStatusHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "status.proto",
}
