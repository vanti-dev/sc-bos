// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.1
// source: health.proto

package gen

import (
	types "github.com/smart-core-os/sc-api/go/types"
	time "github.com/smart-core-os/sc-api/go/types/time"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OccupantImpact represents the impact abnormal values for this check can have on occupants.
type HealthCheck_OccupantImpact int32

const (
	HealthCheck_OCCUPANT_IMPACT_UNSPECIFIED HealthCheck_OccupantImpact = 0
	// The check does not impact occupants.
	HealthCheck_NO_OCCUPANT_IMPACT HealthCheck_OccupantImpact = 1
	// Abnormal values for this check can impact the comfort of occupants.
	// For example, a temperature check out of range in a climate control system.
	HealthCheck_COMFORT HealthCheck_OccupantImpact = 2
	// Abnormal values for this check can impact the health of occupants.
	// For example, a CO2 check out of range in a ventilation system.
	HealthCheck_HEALTH HealthCheck_OccupantImpact = 3
	// Abnormal values for this check can impact the life-safety of occupants.
	// For example, a gas leak check out of range in a gas safety system.
	HealthCheck_LIFE HealthCheck_OccupantImpact = 4
)

// Enum value maps for HealthCheck_OccupantImpact.
var (
	HealthCheck_OccupantImpact_name = map[int32]string{
		0: "OCCUPANT_IMPACT_UNSPECIFIED",
		1: "NO_OCCUPANT_IMPACT",
		2: "COMFORT",
		3: "HEALTH",
		4: "LIFE",
	}
	HealthCheck_OccupantImpact_value = map[string]int32{
		"OCCUPANT_IMPACT_UNSPECIFIED": 0,
		"NO_OCCUPANT_IMPACT":          1,
		"COMFORT":                     2,
		"HEALTH":                      3,
		"LIFE":                        4,
	}
)

func (x HealthCheck_OccupantImpact) Enum() *HealthCheck_OccupantImpact {
	p := new(HealthCheck_OccupantImpact)
	*p = x
	return p
}

func (x HealthCheck_OccupantImpact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheck_OccupantImpact) Descriptor() protoreflect.EnumDescriptor {
	return file_health_proto_enumTypes[0].Descriptor()
}

func (HealthCheck_OccupantImpact) Type() protoreflect.EnumType {
	return &file_health_proto_enumTypes[0]
}

func (x HealthCheck_OccupantImpact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheck_OccupantImpact.Descriptor instead.
func (HealthCheck_OccupantImpact) EnumDescriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 0}
}

// EquipmentImpact represents the impact abnormal values for this check can have on equipment.
type HealthCheck_EquipmentImpact int32

const (
	HealthCheck_EQUIPMENT_IMPACT_UNSPECIFIED HealthCheck_EquipmentImpact = 0
	// The check does not impact equipment.
	HealthCheck_NO_EQUIPMENT_IMPACT HealthCheck_EquipmentImpact = 1
	// Abnormal values for this check can impact the warranty for the device.
	// For example, a temperature check out of range in a device that has an operating temperature range.
	HealthCheck_WARRANTY HealthCheck_EquipmentImpact = 2
	// Abnormal values for this check can impact the lifespan of the device.
	// For example, running a device at levels outside normal operating ranges.
	HealthCheck_LIFESPAN HealthCheck_EquipmentImpact = 3
	// Abnormal values for this check indicate that the equipment is unable to perform its intended function.
	// For example, a check for paper levels on a printer.
	HealthCheck_FUNCTION HealthCheck_EquipmentImpact = 4
)

// Enum value maps for HealthCheck_EquipmentImpact.
var (
	HealthCheck_EquipmentImpact_name = map[int32]string{
		0: "EQUIPMENT_IMPACT_UNSPECIFIED",
		1: "NO_EQUIPMENT_IMPACT",
		2: "WARRANTY",
		3: "LIFESPAN",
		4: "FUNCTION",
	}
	HealthCheck_EquipmentImpact_value = map[string]int32{
		"EQUIPMENT_IMPACT_UNSPECIFIED": 0,
		"NO_EQUIPMENT_IMPACT":          1,
		"WARRANTY":                     2,
		"LIFESPAN":                     3,
		"FUNCTION":                     4,
	}
)

func (x HealthCheck_EquipmentImpact) Enum() *HealthCheck_EquipmentImpact {
	p := new(HealthCheck_EquipmentImpact)
	*p = x
	return p
}

func (x HealthCheck_EquipmentImpact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheck_EquipmentImpact) Descriptor() protoreflect.EnumDescriptor {
	return file_health_proto_enumTypes[1].Descriptor()
}

func (HealthCheck_EquipmentImpact) Type() protoreflect.EnumType {
	return &file_health_proto_enumTypes[1]
}

func (x HealthCheck_EquipmentImpact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheck_EquipmentImpact.Descriptor instead.
func (HealthCheck_EquipmentImpact) EnumDescriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 1}
}

// Normality describes the possible normal states for the check.
type HealthCheck_Normality int32

const (
	HealthCheck_NORMALITY_UNSPECIFIED HealthCheck_Normality = 0
	// The check has found the device is operating normally, without error or unexpected values.
	HealthCheck_NORMAL HealthCheck_Normality = 1
	// The check has found the device is not operating normally.
	HealthCheck_ABNORMAL HealthCheck_Normality = 2
	// The value is below the normal operating range.
	HealthCheck_LOW HealthCheck_Normality = 3
	// The value is above the normal operating range.
	HealthCheck_HIGH HealthCheck_Normality = 4
)

// Enum value maps for HealthCheck_Normality.
var (
	HealthCheck_Normality_name = map[int32]string{
		0: "NORMALITY_UNSPECIFIED",
		1: "NORMAL",
		2: "ABNORMAL",
		3: "LOW",
		4: "HIGH",
	}
	HealthCheck_Normality_value = map[string]int32{
		"NORMALITY_UNSPECIFIED": 0,
		"NORMAL":                1,
		"ABNORMAL":              2,
		"LOW":                   3,
		"HIGH":                  4,
	}
)

func (x HealthCheck_Normality) Enum() *HealthCheck_Normality {
	p := new(HealthCheck_Normality)
	*p = x
	return p
}

func (x HealthCheck_Normality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheck_Normality) Descriptor() protoreflect.EnumDescriptor {
	return file_health_proto_enumTypes[2].Descriptor()
}

func (HealthCheck_Normality) Type() protoreflect.EnumType {
	return &file_health_proto_enumTypes[2]
}

func (x HealthCheck_Normality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheck_Normality.Descriptor instead.
func (HealthCheck_Normality) EnumDescriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 2}
}

// Health state transitions as different bit mask values.
// See Ack for details.
type HealthCheck_HealthChange int32

const (
	HealthCheck_HEALTH_CHANGE_UNSPECIFIED HealthCheck_HealthChange = 0
	// A change from an unhealthy state to the healthy state.
	HealthCheck_TO_HEALTHY HealthCheck_HealthChange = 1
	// A change to a reliability state that is not RELIABLE.
	HealthCheck_TO_UNRELIABLE HealthCheck_HealthChange = 2
	// A change to a check state that is not NORMAL.
	HealthCheck_TO_ABNORMAL HealthCheck_HealthChange = 4
)

// Enum value maps for HealthCheck_HealthChange.
var (
	HealthCheck_HealthChange_name = map[int32]string{
		0: "HEALTH_CHANGE_UNSPECIFIED",
		1: "TO_HEALTHY",
		2: "TO_UNRELIABLE",
		4: "TO_ABNORMAL",
	}
	HealthCheck_HealthChange_value = map[string]int32{
		"HEALTH_CHANGE_UNSPECIFIED": 0,
		"TO_HEALTHY":                1,
		"TO_UNRELIABLE":             2,
		"TO_ABNORMAL":               4,
	}
)

func (x HealthCheck_HealthChange) Enum() *HealthCheck_HealthChange {
	p := new(HealthCheck_HealthChange)
	*p = x
	return p
}

func (x HealthCheck_HealthChange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheck_HealthChange) Descriptor() protoreflect.EnumDescriptor {
	return file_health_proto_enumTypes[3].Descriptor()
}

func (HealthCheck_HealthChange) Type() protoreflect.EnumType {
	return &file_health_proto_enumTypes[3]
}

func (x HealthCheck_HealthChange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheck_HealthChange.Descriptor instead.
func (HealthCheck_HealthChange) EnumDescriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 3}
}

// Contribution describes how this check contributes to compliance with the standard.
type HealthCheck_ComplianceImpact_Contribution int32

const (
	HealthCheck_ComplianceImpact_CONTRIBUTION_UNSPECIFIED HealthCheck_ComplianceImpact_Contribution = 0
	// The check does not affect the compliance outcome, but may be mentioned in reports.
	HealthCheck_ComplianceImpact_NOTE HealthCheck_ComplianceImpact_Contribution = 1
	// The check contributes to the final rating achieved against the standard.
	// For example, a check that monitors energy utilisation might reduce the rating from A to B when abnormal.
	HealthCheck_ComplianceImpact_RATING HealthCheck_ComplianceImpact_Contribution = 2
	// An abnormal check contributes towards warnings or minor issues against the standard.
	HealthCheck_ComplianceImpact_WARNING HealthCheck_ComplianceImpact_Contribution = 3
	// An abnormal check contributes towards a compliance failure or major issue against the standard.
	HealthCheck_ComplianceImpact_FAIL HealthCheck_ComplianceImpact_Contribution = 4
)

// Enum value maps for HealthCheck_ComplianceImpact_Contribution.
var (
	HealthCheck_ComplianceImpact_Contribution_name = map[int32]string{
		0: "CONTRIBUTION_UNSPECIFIED",
		1: "NOTE",
		2: "RATING",
		3: "WARNING",
		4: "FAIL",
	}
	HealthCheck_ComplianceImpact_Contribution_value = map[string]int32{
		"CONTRIBUTION_UNSPECIFIED": 0,
		"NOTE":                     1,
		"RATING":                   2,
		"WARNING":                  3,
		"FAIL":                     4,
	}
)

func (x HealthCheck_ComplianceImpact_Contribution) Enum() *HealthCheck_ComplianceImpact_Contribution {
	p := new(HealthCheck_ComplianceImpact_Contribution)
	*p = x
	return p
}

func (x HealthCheck_ComplianceImpact_Contribution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheck_ComplianceImpact_Contribution) Descriptor() protoreflect.EnumDescriptor {
	return file_health_proto_enumTypes[4].Descriptor()
}

func (HealthCheck_ComplianceImpact_Contribution) Type() protoreflect.EnumType {
	return &file_health_proto_enumTypes[4]
}

func (x HealthCheck_ComplianceImpact_Contribution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheck_ComplianceImpact_Contribution.Descriptor instead.
func (HealthCheck_ComplianceImpact_Contribution) EnumDescriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 0, 0}
}

type HealthCheck_Reliability_State int32

const (
	HealthCheck_Reliability_STATE_UNSPECIFIED HealthCheck_Reliability_State = 0
	// The communication with the device is established and healthy.
	// The state will remain RELIABLE across normal reconnections and transient bad responses.
	HealthCheck_Reliability_RELIABLE HealthCheck_Reliability_State = 1
	// Communication with the device is unreliable for an unspecified reason.
	// Prefer more specific states to indicate the reason for unreliability when possible.
	HealthCheck_Reliability_UNRELIABLE HealthCheck_Reliability_State = 2
	// There are issues with the connection that may resolve themselves on future attempts.
	HealthCheck_Reliability_CONN_TRANSIENT_FAILURE HealthCheck_Reliability_State = 3
	// Sending messages to the device has failed.
	HealthCheck_Reliability_SEND_FAILURE HealthCheck_Reliability_State = 4
	// The device has not responded to our last message.
	// For example if the client times out waiting for a response from the device.
	HealthCheck_Reliability_NO_RESPONSE HealthCheck_Reliability_State = 5
	// The device has responded to our last message, but the response was not valid.
	// For example, persistent HTTP 500 responses or version mismatches between client and device.
	HealthCheck_Reliability_BAD_RESPONSE HealthCheck_Reliability_State = 6
	// The device, or the properties we require on the device, are not present.
	HealthCheck_Reliability_NOT_FOUND HealthCheck_Reliability_State = 7
	// The device indicates that we do not have permission to access it.
	HealthCheck_Reliability_PERMISSION_DENIED HealthCheck_Reliability_State = 8
)

// Enum value maps for HealthCheck_Reliability_State.
var (
	HealthCheck_Reliability_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "RELIABLE",
		2: "UNRELIABLE",
		3: "CONN_TRANSIENT_FAILURE",
		4: "SEND_FAILURE",
		5: "NO_RESPONSE",
		6: "BAD_RESPONSE",
		7: "NOT_FOUND",
		8: "PERMISSION_DENIED",
	}
	HealthCheck_Reliability_State_value = map[string]int32{
		"STATE_UNSPECIFIED":      0,
		"RELIABLE":               1,
		"UNRELIABLE":             2,
		"CONN_TRANSIENT_FAILURE": 3,
		"SEND_FAILURE":           4,
		"NO_RESPONSE":            5,
		"BAD_RESPONSE":           6,
		"NOT_FOUND":              7,
		"PERMISSION_DENIED":      8,
	}
)

func (x HealthCheck_Reliability_State) Enum() *HealthCheck_Reliability_State {
	p := new(HealthCheck_Reliability_State)
	*p = x
	return p
}

func (x HealthCheck_Reliability_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheck_Reliability_State) Descriptor() protoreflect.EnumDescriptor {
	return file_health_proto_enumTypes[5].Descriptor()
}

func (HealthCheck_Reliability_State) Type() protoreflect.EnumType {
	return &file_health_proto_enumTypes[5]
}

func (x HealthCheck_Reliability_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheck_Reliability_State.Descriptor instead.
func (HealthCheck_Reliability_State) EnumDescriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 2, 0}
}

type HealthCheckRecord_RecordType int32

const (
	HealthCheckRecord_RECORD_TYPE_UNSPECIFIED HealthCheckRecord_RecordType = 0
	// This record is the first record for the health check.
	HealthCheckRecord_ADDED HealthCheckRecord_RecordType = 1
	// The health check was updated.
	HealthCheckRecord_UPDATED HealthCheckRecord_RecordType = 2
	// The health check was removed.
	// The health_check field will contain the last known health_check,
	// which will likely be a duplicate of the previous record.
	HealthCheckRecord_REMOVED HealthCheckRecord_RecordType = 3
)

// Enum value maps for HealthCheckRecord_RecordType.
var (
	HealthCheckRecord_RecordType_name = map[int32]string{
		0: "RECORD_TYPE_UNSPECIFIED",
		1: "ADDED",
		2: "UPDATED",
		3: "REMOVED",
	}
	HealthCheckRecord_RecordType_value = map[string]int32{
		"RECORD_TYPE_UNSPECIFIED": 0,
		"ADDED":                   1,
		"UPDATED":                 2,
		"REMOVED":                 3,
	}
)

func (x HealthCheckRecord_RecordType) Enum() *HealthCheckRecord_RecordType {
	p := new(HealthCheckRecord_RecordType)
	*p = x
	return p
}

func (x HealthCheckRecord_RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckRecord_RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_health_proto_enumTypes[6].Descriptor()
}

func (HealthCheckRecord_RecordType) Type() protoreflect.EnumType {
	return &file_health_proto_enumTypes[6]
}

func (x HealthCheckRecord_RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckRecord_RecordType.Descriptor instead.
func (HealthCheckRecord_RecordType) EnumDescriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{1, 0}
}

// HealthCheck represents some check against the health of a device.
//
// The outcome of a health check is recorded in the normality field,
// a NORMAL value indicates the check found the device to be healthy,
// any other value indicates the device is unhealthy in some way.
//
// Each health check monitors a specific aspect or condition of the device.
// Bounds checks monitor a value against expected values or ranges.
// Fault checks monitor the device and report one or more faults.
// While the type of check isn't required, it is strongly recommended to provide insight into how the device is performing.
//
// The *_impact fields record whether abnormal results from the check may have an effect on
// occupants, equipment, or compliance with standards.
// For example a temperature check on a climate control system may have a COMFORT occupant impact,
// while a paper level check on a printer may have a FUNCTION equipment impact.
//
// When performing a check, the reliability of the check is also reported.
// Reliability is a measure of how confident we are in the results of the check,
// and generally maps to the ability to communicate with the device.
//
// Another device may have an effect on the reliability of this device, like a gateway or the network,
// see the Reliability.cause field.
// An absent cause implies the device is responsible for its own reliability issues.
// Similarly, poor reliability of a device may affect the reliability of other devices,
// see the Reliability.affects field.
//
// Each check can specify that it should be acknowledged when it changes state.
// Health changes that require acknowledgement but have not been acknowledged still require attention from operators.
// The ack_required field says which health state transitions require acknowledgement.
type HealthCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An id uniquely representing this check against this device.
	// An equivalent check against a different device may have the same id, for example "ping" or "temperature".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A human readable name for this check, to distinguish the check from others.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A description of the check.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The impact abnormal values for this check can have on occupants.
	OccupantImpact HealthCheck_OccupantImpact `protobuf:"varint,5,opt,name=occupant_impact,json=occupantImpact,proto3,enum=smartcore.bos.HealthCheck_OccupantImpact" json:"occupant_impact,omitempty"`
	// The impact abnormal values for this check can have on the equipment.
	EquipmentImpact HealthCheck_EquipmentImpact `protobuf:"varint,6,opt,name=equipment_impact,json=equipmentImpact,proto3,enum=smartcore.bos.HealthCheck_EquipmentImpact" json:"equipment_impact,omitempty"`
	// A list of compliance standards and how this check impacts them.
	ComplianceImpacts []*HealthCheck_ComplianceImpact `protobuf:"bytes,7,rep,name=compliance_impacts,json=complianceImpacts,proto3" json:"compliance_impacts,omitempty"`
	// A measure of how reliable the measured health is.
	// Typically this represents our ability to communicate with the device, to ask it questions about its health.
	Reliability *HealthCheck_Reliability `protobuf:"bytes,10,opt,name=reliability,proto3" json:"reliability,omitempty"`
	// Normality represents whether the behaviour of the device this check is monitoring is normal.
	// Any Normality enum value greater than NORMAL is considered abnormal.
	// Where possible a device will report the most specific abnormal state.
	Normality HealthCheck_Normality `protobuf:"varint,11,opt,name=normality,proto3,enum=smartcore.bos.HealthCheck_Normality" json:"normality,omitempty"`
	// The time when normality last entered NORMAL.
	NormalTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=normal_time,json=normalTime,proto3" json:"normal_time,omitempty"`
	// The time when normality last entered a non-NORMAL state.
	AbnormalTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=abnormal_time,json=abnormalTime,proto3" json:"abnormal_time,omitempty"`
	// Details about the check being performed.
	// Optional, but strongly recommended.
	// HealthChecks should not change their type of check after creation.
	//
	// Types that are valid to be assigned to Check:
	//
	//	*HealthCheck_Bounds_
	//	*HealthCheck_Faults_
	Check isHealthCheck_Check `protobuf_oneof:"check"`
	// A bit mask of health state transitions that will require acknowledgement.
	// See Ack for details.
	AckExpected int32 `protobuf:"varint,20,opt,name=ack_expected,json=ackExpected,proto3" json:"ack_expected,omitempty"`
	// A bit mask of health state transitions that currently require acknowledgement but don't have one.
	// Output only.
	// See Ack for details.
	AckRequired int32 `protobuf:"varint,21,opt,name=ack_required,json=ackRequired,proto3" json:"ack_required,omitempty"`
	// An acknowledgement for the change to a healthy state.
	// See Ack for details.
	ToHealthyAck *HealthCheck_Ack `protobuf:"bytes,22,opt,name=to_healthy_ack,json=toHealthyAck,proto3" json:"to_healthy_ack,omitempty"`
	// An acknowledgement for the change to a reliability state that is not RELIABLE.
	// See Ack for details.
	ToUnreliableAck *HealthCheck_Ack `protobuf:"bytes,23,opt,name=to_unreliable_ack,json=toUnreliableAck,proto3" json:"to_unreliable_ack,omitempty"`
	// An acknowledgement for the change to a check state that is not NORMAL.
	// See Ack for details.
	ToAbnormalAck *HealthCheck_Ack `protobuf:"bytes,24,opt,name=to_abnormal_ack,json=toAbnormalAck,proto3" json:"to_abnormal_ack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	mi := &file_health_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0}
}

func (x *HealthCheck) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HealthCheck) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *HealthCheck) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HealthCheck) GetOccupantImpact() HealthCheck_OccupantImpact {
	if x != nil {
		return x.OccupantImpact
	}
	return HealthCheck_OCCUPANT_IMPACT_UNSPECIFIED
}

func (x *HealthCheck) GetEquipmentImpact() HealthCheck_EquipmentImpact {
	if x != nil {
		return x.EquipmentImpact
	}
	return HealthCheck_EQUIPMENT_IMPACT_UNSPECIFIED
}

func (x *HealthCheck) GetComplianceImpacts() []*HealthCheck_ComplianceImpact {
	if x != nil {
		return x.ComplianceImpacts
	}
	return nil
}

func (x *HealthCheck) GetReliability() *HealthCheck_Reliability {
	if x != nil {
		return x.Reliability
	}
	return nil
}

func (x *HealthCheck) GetNormality() HealthCheck_Normality {
	if x != nil {
		return x.Normality
	}
	return HealthCheck_NORMALITY_UNSPECIFIED
}

func (x *HealthCheck) GetNormalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.NormalTime
	}
	return nil
}

func (x *HealthCheck) GetAbnormalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AbnormalTime
	}
	return nil
}

func (x *HealthCheck) GetCheck() isHealthCheck_Check {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *HealthCheck) GetBounds() *HealthCheck_Bounds {
	if x != nil {
		if x, ok := x.Check.(*HealthCheck_Bounds_); ok {
			return x.Bounds
		}
	}
	return nil
}

func (x *HealthCheck) GetFaults() *HealthCheck_Faults {
	if x != nil {
		if x, ok := x.Check.(*HealthCheck_Faults_); ok {
			return x.Faults
		}
	}
	return nil
}

func (x *HealthCheck) GetAckExpected() int32 {
	if x != nil {
		return x.AckExpected
	}
	return 0
}

func (x *HealthCheck) GetAckRequired() int32 {
	if x != nil {
		return x.AckRequired
	}
	return 0
}

func (x *HealthCheck) GetToHealthyAck() *HealthCheck_Ack {
	if x != nil {
		return x.ToHealthyAck
	}
	return nil
}

func (x *HealthCheck) GetToUnreliableAck() *HealthCheck_Ack {
	if x != nil {
		return x.ToUnreliableAck
	}
	return nil
}

func (x *HealthCheck) GetToAbnormalAck() *HealthCheck_Ack {
	if x != nil {
		return x.ToAbnormalAck
	}
	return nil
}

type isHealthCheck_Check interface {
	isHealthCheck_Check()
}

type HealthCheck_Bounds_ struct {
	// This check is comparing a value against known good/bad values described by this field.
	Bounds *HealthCheck_Bounds `protobuf:"bytes,15,opt,name=bounds,proto3,oneof"`
}

type HealthCheck_Faults_ struct {
	// This check is looking for faults or alarms on the device.
	Faults *HealthCheck_Faults `protobuf:"bytes,16,opt,name=faults,proto3,oneof"`
}

func (*HealthCheck_Bounds_) isHealthCheck_Check() {}

func (*HealthCheck_Faults_) isHealthCheck_Check() {}

// HealthCheckRecord represents a historical record of a health check for a device.
type HealthCheckRecord struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	HealthCheck   *HealthCheck                 `protobuf:"bytes,1,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	RecordTime    *timestamppb.Timestamp       `protobuf:"bytes,2,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	RecordType    HealthCheckRecord_RecordType `protobuf:"varint,3,opt,name=record_type,json=recordType,proto3,enum=smartcore.bos.HealthCheckRecord_RecordType" json:"record_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRecord) Reset() {
	*x = HealthCheckRecord{}
	mi := &file_health_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRecord) ProtoMessage() {}

func (x *HealthCheckRecord) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRecord.ProtoReflect.Descriptor instead.
func (*HealthCheckRecord) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{1}
}

func (x *HealthCheckRecord) GetHealthCheck() *HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *HealthCheckRecord) GetRecordTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordTime
	}
	return nil
}

func (x *HealthCheckRecord) GetRecordType() HealthCheckRecord_RecordType {
	if x != nil {
		return x.RecordType
	}
	return HealthCheckRecord_RECORD_TYPE_UNSPECIFIED
}

type ListHealthChecksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The device to get the health checks for.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A field mask to select which fields to return.
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of health checks to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListHealthChecksResponse` call.
	// Provide this to retrieve the subsequent page.
	PageToken     string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHealthChecksRequest) Reset() {
	*x = ListHealthChecksRequest{}
	mi := &file_health_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHealthChecksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHealthChecksRequest) ProtoMessage() {}

func (x *ListHealthChecksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHealthChecksRequest.ProtoReflect.Descriptor instead.
func (*ListHealthChecksRequest) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{2}
}

func (x *ListHealthChecksRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListHealthChecksRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListHealthChecksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListHealthChecksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListHealthChecksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The health checks for the device.
	HealthChecks []*HealthCheck `protobuf:"bytes,1,rep,name=health_checks,json=healthChecks,proto3" json:"health_checks,omitempty"`
	// A token to retrieve the next page of results.
	// If there are no more results, this will be empty.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of health checks for the device.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHealthChecksResponse) Reset() {
	*x = ListHealthChecksResponse{}
	mi := &file_health_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHealthChecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHealthChecksResponse) ProtoMessage() {}

func (x *ListHealthChecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHealthChecksResponse.ProtoReflect.Descriptor instead.
func (*ListHealthChecksResponse) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{3}
}

func (x *ListHealthChecksResponse) GetHealthChecks() []*HealthCheck {
	if x != nil {
		return x.HealthChecks
	}
	return nil
}

func (x *ListHealthChecksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListHealthChecksResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type PullHealthChecksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The device to get the health checks for.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A field mask to select which fields to return.
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the health checks.
	// The default behaviour is to send the current health checks immediately followed by any updates as they happen.
	UpdatesOnly   bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullHealthChecksRequest) Reset() {
	*x = PullHealthChecksRequest{}
	mi := &file_health_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullHealthChecksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullHealthChecksRequest) ProtoMessage() {}

func (x *PullHealthChecksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullHealthChecksRequest.ProtoReflect.Descriptor instead.
func (*PullHealthChecksRequest) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{4}
}

func (x *PullHealthChecksRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullHealthChecksRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullHealthChecksRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullHealthChecksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Changes to the list of health checks for the device.
	Changes       []*PullHealthChecksResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullHealthChecksResponse) Reset() {
	*x = PullHealthChecksResponse{}
	mi := &file_health_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullHealthChecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullHealthChecksResponse) ProtoMessage() {}

func (x *PullHealthChecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullHealthChecksResponse.ProtoReflect.Descriptor instead.
func (*PullHealthChecksResponse) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{5}
}

func (x *PullHealthChecksResponse) GetChanges() []*PullHealthChecksResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type GetHealthCheckRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The device to get the health check for.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id of the health check to get.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// A field mask to select which fields to return.
	ReadMask      *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHealthCheckRequest) Reset() {
	*x = GetHealthCheckRequest{}
	mi := &file_health_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthCheckRequest) ProtoMessage() {}

func (x *GetHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*GetHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{6}
}

func (x *GetHealthCheckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetHealthCheckRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetHealthCheckRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type PullHealthCheckRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The device to get the health check for.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id of the health check to get.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// A field mask to select which fields to return.
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the health check.
	// The default behaviour is to send the current health check immediately followed by any updates as they happen.
	UpdatesOnly   bool `protobuf:"varint,4,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullHealthCheckRequest) Reset() {
	*x = PullHealthCheckRequest{}
	mi := &file_health_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullHealthCheckRequest) ProtoMessage() {}

func (x *PullHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*PullHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{7}
}

func (x *PullHealthCheckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullHealthCheckRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PullHealthCheckRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullHealthCheckRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullHealthCheckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The changes to the health check for the device.
	Changes       []*PullHealthCheckResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullHealthCheckResponse) Reset() {
	*x = PullHealthCheckResponse{}
	mi := &file_health_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullHealthCheckResponse) ProtoMessage() {}

func (x *PullHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*PullHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{8}
}

func (x *PullHealthCheckResponse) GetChanges() []*PullHealthCheckResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ListHealthCheckHistoryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the device to list the history for.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id of the health check to list the history for.
	// Optional, if not specified the history for all health checks on the device will be returned.
	Id string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	// The period of time to list the history for.
	Period *time.Period `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	// Fields to fetch relative to the HealthCheckRecord type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of devices to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListHealthCheckHistoryResponse` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specify the order of the returned records.
	// The default is `record_time asc` - aka oldest record first.
	// The format is `field_name [asc|desc]`, with asc being the default.
	// Only `record_time` is supported.
	OrderBy       string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHealthCheckHistoryRequest) Reset() {
	*x = ListHealthCheckHistoryRequest{}
	mi := &file_health_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHealthCheckHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHealthCheckHistoryRequest) ProtoMessage() {}

func (x *ListHealthCheckHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHealthCheckHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListHealthCheckHistoryRequest) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{9}
}

func (x *ListHealthCheckHistoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListHealthCheckHistoryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListHealthCheckHistoryRequest) GetPeriod() *time.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *ListHealthCheckHistoryRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListHealthCheckHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListHealthCheckHistoryRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListHealthCheckHistoryRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListHealthCheckHistoryResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	HealthCheckRecords []*HealthCheckRecord   `protobuf:"bytes,1,rep,name=health_check_records,json=healthCheckRecords,proto3" json:"health_check_records,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of records matched by the query.
	// This may be an estimate.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHealthCheckHistoryResponse) Reset() {
	*x = ListHealthCheckHistoryResponse{}
	mi := &file_health_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHealthCheckHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHealthCheckHistoryResponse) ProtoMessage() {}

func (x *ListHealthCheckHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHealthCheckHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListHealthCheckHistoryResponse) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{10}
}

func (x *ListHealthCheckHistoryResponse) GetHealthCheckRecords() []*HealthCheckRecord {
	if x != nil {
		return x.HealthCheckRecords
	}
	return nil
}

func (x *ListHealthCheckHistoryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListHealthCheckHistoryResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// ComplianceImpact describes how this check relates to published standards.
type HealthCheck_ComplianceImpact struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The standard this check relates to.
	// Required.
	Standard *HealthCheck_ComplianceImpact_Standard `protobuf:"bytes,1,opt,name=standard,proto3" json:"standard,omitempty"`
	// How this check contributes to compliance with the standard.
	// Required.
	Contribution  HealthCheck_ComplianceImpact_Contribution `protobuf:"varint,2,opt,name=contribution,proto3,enum=smartcore.bos.HealthCheck_ComplianceImpact_Contribution" json:"contribution,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_ComplianceImpact) Reset() {
	*x = HealthCheck_ComplianceImpact{}
	mi := &file_health_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_ComplianceImpact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_ComplianceImpact) ProtoMessage() {}

func (x *HealthCheck_ComplianceImpact) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_ComplianceImpact.ProtoReflect.Descriptor instead.
func (*HealthCheck_ComplianceImpact) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HealthCheck_ComplianceImpact) GetStandard() *HealthCheck_ComplianceImpact_Standard {
	if x != nil {
		return x.Standard
	}
	return nil
}

func (x *HealthCheck_ComplianceImpact) GetContribution() HealthCheck_ComplianceImpact_Contribution {
	if x != nil {
		return x.Contribution
	}
	return HealthCheck_ComplianceImpact_CONTRIBUTION_UNSPECIFIED
}

// Error represents an error with an optional structured code.
type HealthCheck_Error struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A short message describing the error suitable for display to the user.
	SummaryText string `protobuf:"bytes,1,opt,name=summary_text,json=summaryText,proto3" json:"summary_text,omitempty"`
	// Additional details for the error in plain text.
	DetailsText string `protobuf:"bytes,2,opt,name=details_text,json=detailsText,proto3" json:"details_text,omitempty"`
	// An error code that can be used to programmatically identify the error.
	// Errors with the same code and system should be interpreted as the same error.
	Code          *HealthCheck_Error_Code `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Error) Reset() {
	*x = HealthCheck_Error{}
	mi := &file_health_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Error) ProtoMessage() {}

func (x *HealthCheck_Error) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Error.ProtoReflect.Descriptor instead.
func (*HealthCheck_Error) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 1}
}

func (x *HealthCheck_Error) GetSummaryText() string {
	if x != nil {
		return x.SummaryText
	}
	return ""
}

func (x *HealthCheck_Error) GetDetailsText() string {
	if x != nil {
		return x.DetailsText
	}
	return ""
}

func (x *HealthCheck_Error) GetCode() *HealthCheck_Error_Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Reliability represents confidence in the results of the check,
// typically tied to the communication with the device.
type HealthCheck_Reliability struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The state of the connection.
	State HealthCheck_Reliability_State `protobuf:"varint,1,opt,name=state,proto3,enum=smartcore.bos.HealthCheck_Reliability_State" json:"state,omitempty"`
	// The time when the state last entered RELIABLE.
	// Reconnections during normal operation will not update this time.
	// Temporary bad responses will not update this time.
	ReliableTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=reliable_time,json=reliableTime,proto3" json:"reliable_time,omitempty"`
	// The time when the state last entered a non-RELIABLE state.
	UnreliableTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=unreliable_time,json=unreliableTime,proto3" json:"unreliable_time,omitempty"`
	// An error message relating to the non-RELIABLE state.
	LastError *HealthCheck_Error `protobuf:"bytes,4,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`
	// The underlying cause of the reliability issue, when not owned by this device.
	// Cause should be set when another device or system has an impact on the reliability of this device.
	Cause *HealthCheck_Reliability_Cause `protobuf:"bytes,5,opt,name=cause,proto3" json:"cause,omitempty"`
	// The devices that are affected by the reliability issue of this device.
	// Affects should be set when this device has an impact on the reliability of other devices,
	// even if information about the affected devices is not available.
	Affects       *HealthCheck_Reliability_Affects `protobuf:"bytes,6,opt,name=affects,proto3" json:"affects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Reliability) Reset() {
	*x = HealthCheck_Reliability{}
	mi := &file_health_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Reliability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Reliability) ProtoMessage() {}

func (x *HealthCheck_Reliability) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Reliability.ProtoReflect.Descriptor instead.
func (*HealthCheck_Reliability) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 2}
}

func (x *HealthCheck_Reliability) GetState() HealthCheck_Reliability_State {
	if x != nil {
		return x.State
	}
	return HealthCheck_Reliability_STATE_UNSPECIFIED
}

func (x *HealthCheck_Reliability) GetReliableTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReliableTime
	}
	return nil
}

func (x *HealthCheck_Reliability) GetUnreliableTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UnreliableTime
	}
	return nil
}

func (x *HealthCheck_Reliability) GetLastError() *HealthCheck_Error {
	if x != nil {
		return x.LastError
	}
	return nil
}

func (x *HealthCheck_Reliability) GetCause() *HealthCheck_Reliability_Cause {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *HealthCheck_Reliability) GetAffects() *HealthCheck_Reliability_Affects {
	if x != nil {
		return x.Affects
	}
	return nil
}

// Value is one of the supported value types for a check.
type HealthCheck_Value struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*HealthCheck_Value_BoolValue
	//	*HealthCheck_Value_StringValue
	//	*HealthCheck_Value_IntValue
	//	*HealthCheck_Value_UintValue
	//	*HealthCheck_Value_FloatValue
	//	*HealthCheck_Value_TimestampValue
	//	*HealthCheck_Value_DurationValue
	Value         isHealthCheck_Value_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Value) Reset() {
	*x = HealthCheck_Value{}
	mi := &file_health_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Value) ProtoMessage() {}

func (x *HealthCheck_Value) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Value.ProtoReflect.Descriptor instead.
func (*HealthCheck_Value) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 3}
}

func (x *HealthCheck_Value) GetValue() isHealthCheck_Value_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *HealthCheck_Value) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*HealthCheck_Value_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *HealthCheck_Value) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*HealthCheck_Value_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *HealthCheck_Value) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*HealthCheck_Value_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *HealthCheck_Value) GetUintValue() uint64 {
	if x != nil {
		if x, ok := x.Value.(*HealthCheck_Value_UintValue); ok {
			return x.UintValue
		}
	}
	return 0
}

func (x *HealthCheck_Value) GetFloatValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*HealthCheck_Value_FloatValue); ok {
			return x.FloatValue
		}
	}
	return 0
}

func (x *HealthCheck_Value) GetTimestampValue() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Value.(*HealthCheck_Value_TimestampValue); ok {
			return x.TimestampValue
		}
	}
	return nil
}

func (x *HealthCheck_Value) GetDurationValue() *durationpb.Duration {
	if x != nil {
		if x, ok := x.Value.(*HealthCheck_Value_DurationValue); ok {
			return x.DurationValue
		}
	}
	return nil
}

type isHealthCheck_Value_Value interface {
	isHealthCheck_Value_Value()
}

type HealthCheck_Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,1,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type HealthCheck_Value_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type HealthCheck_Value_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type HealthCheck_Value_UintValue struct {
	UintValue uint64 `protobuf:"varint,4,opt,name=uint_value,json=uintValue,proto3,oneof"`
}

type HealthCheck_Value_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,5,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type HealthCheck_Value_TimestampValue struct {
	TimestampValue *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp_value,json=timestampValue,proto3,oneof"`
}

type HealthCheck_Value_DurationValue struct {
	DurationValue *durationpb.Duration `protobuf:"bytes,7,opt,name=duration_value,json=durationValue,proto3,oneof"`
}

func (*HealthCheck_Value_BoolValue) isHealthCheck_Value_Value() {}

func (*HealthCheck_Value_StringValue) isHealthCheck_Value_Value() {}

func (*HealthCheck_Value_IntValue) isHealthCheck_Value_Value() {}

func (*HealthCheck_Value_UintValue) isHealthCheck_Value_Value() {}

func (*HealthCheck_Value_FloatValue) isHealthCheck_Value_Value() {}

func (*HealthCheck_Value_TimestampValue) isHealthCheck_Value_Value() {}

func (*HealthCheck_Value_DurationValue) isHealthCheck_Value_Value() {}

// A range of Values.
// At least one of low or high must be set.
// Only ordered types can be used for ranges: numbers, strings, timestamps, and durations.
type HealthCheck_ValueRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The low range, below which values are considered abnormal, typically LOW.
	Low *HealthCheck_Value `protobuf:"bytes,1,opt,name=low,proto3" json:"low,omitempty"`
	// The high range, above which values are considered abnormal, typically HIGH.
	High *HealthCheck_Value `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`
	// Optional deadband applied before the check returns to NORMAL to avoid jitter.
	// Deadband should have a value type compatible with the low and high values.
	// If low and high are Timestamps, then deadband should be a Duration.
	//
	// The check will transition from HIGH to NORMAL when the current_value becomes less than high - deadband,
	// and from LOW to NORMAL when the current_value becomes greater than low + deadband.
	Deadband      *HealthCheck_Value `protobuf:"bytes,3,opt,name=deadband,proto3" json:"deadband,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_ValueRange) Reset() {
	*x = HealthCheck_ValueRange{}
	mi := &file_health_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_ValueRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_ValueRange) ProtoMessage() {}

func (x *HealthCheck_ValueRange) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_ValueRange.ProtoReflect.Descriptor instead.
func (*HealthCheck_ValueRange) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 4}
}

func (x *HealthCheck_ValueRange) GetLow() *HealthCheck_Value {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *HealthCheck_ValueRange) GetHigh() *HealthCheck_Value {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *HealthCheck_ValueRange) GetDeadband() *HealthCheck_Value {
	if x != nil {
		return x.Deadband
	}
	return nil
}

// A collection of values.
type HealthCheck_Values struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*HealthCheck_Value   `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Values) Reset() {
	*x = HealthCheck_Values{}
	mi := &file_health_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Values) ProtoMessage() {}

func (x *HealthCheck_Values) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Values.ProtoReflect.Descriptor instead.
func (*HealthCheck_Values) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 5}
}

func (x *HealthCheck_Values) GetValues() []*HealthCheck_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

// Bounds describes a check that compares a measured value against expected values or ranges.
type HealthCheck_Bounds struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The measured value.
	// Optional when NORMAL.
	CurrentValue *HealthCheck_Value `protobuf:"bytes,1,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	// Types that are valid to be assigned to Expected:
	//
	//	*HealthCheck_Bounds_NormalValue
	//	*HealthCheck_Bounds_AbnormalValue
	//	*HealthCheck_Bounds_NormalRange
	//	*HealthCheck_Bounds_NormalValues
	//	*HealthCheck_Bounds_AbnormalValues
	Expected isHealthCheck_Bounds_Expected `protobuf_oneof:"expected"`
	// The unit of the value, for example "°C", "%", "kB", etc.
	DisplayUnit   string `protobuf:"bytes,8,opt,name=display_unit,json=displayUnit,proto3" json:"display_unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Bounds) Reset() {
	*x = HealthCheck_Bounds{}
	mi := &file_health_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Bounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Bounds) ProtoMessage() {}

func (x *HealthCheck_Bounds) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Bounds.ProtoReflect.Descriptor instead.
func (*HealthCheck_Bounds) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 6}
}

func (x *HealthCheck_Bounds) GetCurrentValue() *HealthCheck_Value {
	if x != nil {
		return x.CurrentValue
	}
	return nil
}

func (x *HealthCheck_Bounds) GetExpected() isHealthCheck_Bounds_Expected {
	if x != nil {
		return x.Expected
	}
	return nil
}

func (x *HealthCheck_Bounds) GetNormalValue() *HealthCheck_Value {
	if x != nil {
		if x, ok := x.Expected.(*HealthCheck_Bounds_NormalValue); ok {
			return x.NormalValue
		}
	}
	return nil
}

func (x *HealthCheck_Bounds) GetAbnormalValue() *HealthCheck_Value {
	if x != nil {
		if x, ok := x.Expected.(*HealthCheck_Bounds_AbnormalValue); ok {
			return x.AbnormalValue
		}
	}
	return nil
}

func (x *HealthCheck_Bounds) GetNormalRange() *HealthCheck_ValueRange {
	if x != nil {
		if x, ok := x.Expected.(*HealthCheck_Bounds_NormalRange); ok {
			return x.NormalRange
		}
	}
	return nil
}

func (x *HealthCheck_Bounds) GetNormalValues() *HealthCheck_Values {
	if x != nil {
		if x, ok := x.Expected.(*HealthCheck_Bounds_NormalValues); ok {
			return x.NormalValues
		}
	}
	return nil
}

func (x *HealthCheck_Bounds) GetAbnormalValues() *HealthCheck_Values {
	if x != nil {
		if x, ok := x.Expected.(*HealthCheck_Bounds_AbnormalValues); ok {
			return x.AbnormalValues
		}
	}
	return nil
}

func (x *HealthCheck_Bounds) GetDisplayUnit() string {
	if x != nil {
		return x.DisplayUnit
	}
	return ""
}

type isHealthCheck_Bounds_Expected interface {
	isHealthCheck_Bounds_Expected()
}

type HealthCheck_Bounds_NormalValue struct {
	// The normal value we expect for a healthy device.
	// Any measured value that is not equal to this value will result in a state of ABNORMAL.
	NormalValue *HealthCheck_Value `protobuf:"bytes,2,opt,name=normal_value,json=normalValue,proto3,oneof"`
}

type HealthCheck_Bounds_AbnormalValue struct {
	// A value indicating that the device is abnormal.
	// Any measured value that is not equal to this value will result in a state of NORMAL.
	AbnormalValue *HealthCheck_Value `protobuf:"bytes,3,opt,name=abnormal_value,json=abnormalValue,proto3,oneof"`
}

type HealthCheck_Bounds_NormalRange struct {
	// The range of values that are considered normal for a healthy device.
	// Any measured value that is not within this range will result in a state of HIGH or LOW.
	// See ValueRange.deadband for more information on how the deadband is applied.
	NormalRange *HealthCheck_ValueRange `protobuf:"bytes,4,opt,name=normal_range,json=normalRange,proto3,oneof"` // ValueRange abnormal_range = 5; // Not sure if we need this, waiting for a real use case
}

type HealthCheck_Bounds_NormalValues struct {
	// A list of normal values that are considered healthy for the device.
	// Any measured value that is not in this list will result in a state of ABNORMAL.
	NormalValues *HealthCheck_Values `protobuf:"bytes,6,opt,name=normal_values,json=normalValues,proto3,oneof"`
}

type HealthCheck_Bounds_AbnormalValues struct {
	// A list of abnormal values that are considered unhealthy for the device.
	// Any measured value that is in this list will result in a state of ABNORMAL.
	AbnormalValues *HealthCheck_Values `protobuf:"bytes,7,opt,name=abnormal_values,json=abnormalValues,proto3,oneof"`
}

func (*HealthCheck_Bounds_NormalValue) isHealthCheck_Bounds_Expected() {}

func (*HealthCheck_Bounds_AbnormalValue) isHealthCheck_Bounds_Expected() {}

func (*HealthCheck_Bounds_NormalRange) isHealthCheck_Bounds_Expected() {}

func (*HealthCheck_Bounds_NormalValues) isHealthCheck_Bounds_Expected() {}

func (*HealthCheck_Bounds_AbnormalValues) isHealthCheck_Bounds_Expected() {}

// Faults represents a check that reports a list of known issues with a device.
// The presence of any faults will result in an ABNORMAL state.
type HealthCheck_Faults struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of faults or errors currently present on the device.
	// The presence of any current faults will result in an ABNORMAL state.
	// If the device is healthy this list should be empty.
	CurrentFaults []*HealthCheck_Error `protobuf:"bytes,1,rep,name=current_faults,json=currentFaults,proto3" json:"current_faults,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Faults) Reset() {
	*x = HealthCheck_Faults{}
	mi := &file_health_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Faults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Faults) ProtoMessage() {}

func (x *HealthCheck_Faults) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Faults.ProtoReflect.Descriptor instead.
func (*HealthCheck_Faults) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 7}
}

func (x *HealthCheck_Faults) GetCurrentFaults() []*HealthCheck_Error {
	if x != nil {
		return x.CurrentFaults
	}
	return nil
}

// An acknowledgement for a change in health state.
// Some changes in health state require acknowledgement from another person or system before they can be considered
// resolved.
//
// For example, a fire detection system may detect smoke, which will cause the health check to change to ABNORMAL.
// Even if the smoke clears and the check returns to NORMAL, the system should still require a person to investigate
// the abnormality.
// Requiring an acknowledgement allows the system to track whether the abnormality has been investigated,
// or whether the system is still in a state that requires attention.
//
// Each check can specify whether it expects an acknowledgement independently for each health state transition.
// The possible transitions are represented by the HealthChange enum.
// Changing the expected acks will not change any existing acks, but will change the required acks for future changes
// in health state.
//
// The Ack itself can come from user interaction with a Smart Core app, via this API,
// from an interaction with a system managing a device, like a headend workstation,
// or from physical interaction with the device, like pressing a reset button.
// The source field should identify the source of the acknowledgement.
type HealthCheck_Ack struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	AckTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ack_time,json=ackTime,proto3" json:"ack_time,omitempty"`
	// The actor that has acknowledged the change in health, if known.
	Actor *Actor `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	// The source of the acknowledgement.
	// This should identify the app or system that acknowledged the change in health.
	// For example, "smartcore.app.ops", "reset button", or "device".
	Source        string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Ack) Reset() {
	*x = HealthCheck_Ack{}
	mi := &file_health_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Ack) ProtoMessage() {}

func (x *HealthCheck_Ack) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Ack.ProtoReflect.Descriptor instead.
func (*HealthCheck_Ack) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 8}
}

func (x *HealthCheck_Ack) GetAckTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AckTime
	}
	return nil
}

func (x *HealthCheck_Ack) GetActor() *Actor {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *HealthCheck_Ack) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// A Standard is a published standard that devices or sites conform to.
type HealthCheck_ComplianceImpact_Standard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The common name for the standard used by humans.
	// For example "BS 5266", "ISO 50001", "CIS v8.1", etc.
	// Required.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The official name for the standard, unambiguously identifying it.
	// The title usually includes the organization, an id, and version information.
	// For example "BS 5266-1:2016".
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// A more detailed description of the standard this check relates to.
	// For example "British Standard for emergency lighting systems in buildings"
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The body or organization that published the standard.
	// This should be the well recognised short name of the organization.
	// For example "BSI", "ASHRAE", "ISO", etc.
	Organization string `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty"`
	// A reference within the standard that this check relates to.
	// For example a clause or section number like "5.3.1".
	Reference     string `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_ComplianceImpact_Standard) Reset() {
	*x = HealthCheck_ComplianceImpact_Standard{}
	mi := &file_health_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_ComplianceImpact_Standard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_ComplianceImpact_Standard) ProtoMessage() {}

func (x *HealthCheck_ComplianceImpact_Standard) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_ComplianceImpact_Standard.ProtoReflect.Descriptor instead.
func (*HealthCheck_ComplianceImpact_Standard) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *HealthCheck_ComplianceImpact_Standard) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *HealthCheck_ComplianceImpact_Standard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *HealthCheck_ComplianceImpact_Standard) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HealthCheck_ComplianceImpact_Standard) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *HealthCheck_ComplianceImpact_Standard) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Code is a structured error code that can be used to programmatically identify the error.
type HealthCheck_Error_Code struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique code for the error within the system.
	// Required.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// The system responsible for the error code.
	// Required.
	// The value should be the well recognised name of the system that generated the error code.
	// Examples include "DALI" and "HTTP".
	System        string `protobuf:"bytes,2,opt,name=system,proto3" json:"system,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Error_Code) Reset() {
	*x = HealthCheck_Error_Code{}
	mi := &file_health_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Error_Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Error_Code) ProtoMessage() {}

func (x *HealthCheck_Error_Code) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Error_Code.ProtoReflect.Descriptor instead.
func (*HealthCheck_Error_Code) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *HealthCheck_Error_Code) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *HealthCheck_Error_Code) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

// Cause describes the underlying cause of the reliability issue.
// It is recommended that display_name is set to allow operators to identify where the issue is coming from.
// Providing a name allows navigation and additional details for the cause to be presented to the operator.
type HealthCheck_Reliability_Cause struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The device name of the cause of the reliability issue.
	// Reliability details for the cause can be found in the HealthCheck for that device.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// An error that describes the cause of the reliability issue.
	Error *HealthCheck_Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// A human readable name for the entity that is the cause of the reliability issue.
	DisplayName   string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Reliability_Cause) Reset() {
	*x = HealthCheck_Reliability_Cause{}
	mi := &file_health_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Reliability_Cause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Reliability_Cause) ProtoMessage() {}

func (x *HealthCheck_Reliability_Cause) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Reliability_Cause.ProtoReflect.Descriptor instead.
func (*HealthCheck_Reliability_Cause) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *HealthCheck_Reliability_Cause) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HealthCheck_Reliability_Cause) GetError() *HealthCheck_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *HealthCheck_Reliability_Cause) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// Affects represents the impact this device has on the reliability of other devices.
// An empty Affects denotes that this device affects other devices, but no other information is available.
type HealthCheck_Reliability_Affects struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A count of how many devices are affected by this devices reliability issue.
	// A zero value indicates the number of affected devices is unknown.
	Count         int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Reliability_Affects) Reset() {
	*x = HealthCheck_Reliability_Affects{}
	mi := &file_health_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Reliability_Affects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Reliability_Affects) ProtoMessage() {}

func (x *HealthCheck_Reliability_Affects) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Reliability_Affects.ProtoReflect.Descriptor instead.
func (*HealthCheck_Reliability_Affects) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *HealthCheck_Reliability_Affects) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PullHealthChecksResponse_Change struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the device the health check belongs to.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of change (e.g. ADD, UPDATE, etc...)
	Type types.ChangeType `protobuf:"varint,2,opt,name=type,proto3,enum=smartcore.types.ChangeType" json:"type,omitempty"`
	// The new value to use for ADD|UPDATE changes
	NewValue *HealthCheck `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	// The old value to use for UPDATE|REMOVE changes
	OldValue *HealthCheck `protobuf:"bytes,4,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	// When the change occurred
	ChangeTime    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullHealthChecksResponse_Change) Reset() {
	*x = PullHealthChecksResponse_Change{}
	mi := &file_health_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullHealthChecksResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullHealthChecksResponse_Change) ProtoMessage() {}

func (x *PullHealthChecksResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullHealthChecksResponse_Change.ProtoReflect.Descriptor instead.
func (*PullHealthChecksResponse_Change) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PullHealthChecksResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullHealthChecksResponse_Change) GetType() types.ChangeType {
	if x != nil {
		return x.Type
	}
	return types.ChangeType(0)
}

func (x *PullHealthChecksResponse_Change) GetNewValue() *HealthCheck {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *PullHealthChecksResponse_Change) GetOldValue() *HealthCheck {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *PullHealthChecksResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

type PullHealthCheckResponse_Change struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the device the health check belongs to.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new health check value.
	HealthCheck *HealthCheck `protobuf:"bytes,3,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	// When the change occurred
	ChangeTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullHealthCheckResponse_Change) Reset() {
	*x = PullHealthCheckResponse_Change{}
	mi := &file_health_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullHealthCheckResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullHealthCheckResponse_Change) ProtoMessage() {}

func (x *PullHealthCheckResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_health_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullHealthCheckResponse_Change.ProtoReflect.Descriptor instead.
func (*PullHealthCheckResponse_Change) Descriptor() ([]byte, []int) {
	return file_health_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PullHealthCheckResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullHealthCheckResponse_Change) GetHealthCheck() *HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *PullHealthCheckResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

var File_health_proto protoreflect.FileDescriptor

const file_health_proto_rawDesc = "" +
	"\n" +
	"\fhealth.proto\x12\rsmartcore.bos\x1a\x1egoogle/protobuf/duration.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\vactor.proto\x1a\x12types/change.proto\x1a\x17types/time/period.proto\"\xc6 \n" +
	"\vHealthCheck\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12R\n" +
	"\x0foccupant_impact\x18\x05 \x01(\x0e2).smartcore.bos.HealthCheck.OccupantImpactR\x0eoccupantImpact\x12U\n" +
	"\x10equipment_impact\x18\x06 \x01(\x0e2*.smartcore.bos.HealthCheck.EquipmentImpactR\x0fequipmentImpact\x12Z\n" +
	"\x12compliance_impacts\x18\a \x03(\v2+.smartcore.bos.HealthCheck.ComplianceImpactR\x11complianceImpacts\x12H\n" +
	"\vreliability\x18\n" +
	" \x01(\v2&.smartcore.bos.HealthCheck.ReliabilityR\vreliability\x12B\n" +
	"\tnormality\x18\v \x01(\x0e2$.smartcore.bos.HealthCheck.NormalityR\tnormality\x12;\n" +
	"\vnormal_time\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"normalTime\x12?\n" +
	"\rabnormal_time\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\fabnormalTime\x12;\n" +
	"\x06bounds\x18\x0f \x01(\v2!.smartcore.bos.HealthCheck.BoundsH\x00R\x06bounds\x12;\n" +
	"\x06faults\x18\x10 \x01(\v2!.smartcore.bos.HealthCheck.FaultsH\x00R\x06faults\x12!\n" +
	"\fack_expected\x18\x14 \x01(\x05R\vackExpected\x12!\n" +
	"\fack_required\x18\x15 \x01(\x05R\vackRequired\x12D\n" +
	"\x0eto_healthy_ack\x18\x16 \x01(\v2\x1e.smartcore.bos.HealthCheck.AckR\ftoHealthyAck\x12J\n" +
	"\x11to_unreliable_ack\x18\x17 \x01(\v2\x1e.smartcore.bos.HealthCheck.AckR\x0ftoUnreliableAck\x12F\n" +
	"\x0fto_abnormal_ack\x18\x18 \x01(\v2\x1e.smartcore.bos.HealthCheck.AckR\rtoAbnormalAck\x1a\xc7\x03\n" +
	"\x10ComplianceImpact\x12P\n" +
	"\bstandard\x18\x01 \x01(\v24.smartcore.bos.HealthCheck.ComplianceImpact.StandardR\bstandard\x12\\\n" +
	"\fcontribution\x18\x02 \x01(\x0e28.smartcore.bos.HealthCheck.ComplianceImpact.ContributionR\fcontribution\x1a\xa7\x01\n" +
	"\bStandard\x12!\n" +
	"\fdisplay_name\x18\x01 \x01(\tR\vdisplayName\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\"\n" +
	"\forganization\x18\x04 \x01(\tR\forganization\x12\x1c\n" +
	"\treference\x18\x05 \x01(\tR\treference\"Y\n" +
	"\fContribution\x12\x1c\n" +
	"\x18CONTRIBUTION_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04NOTE\x10\x01\x12\n" +
	"\n" +
	"\x06RATING\x10\x02\x12\v\n" +
	"\aWARNING\x10\x03\x12\b\n" +
	"\x04FAIL\x10\x04\x1a\xbc\x01\n" +
	"\x05Error\x12!\n" +
	"\fsummary_text\x18\x01 \x01(\tR\vsummaryText\x12!\n" +
	"\fdetails_text\x18\x02 \x01(\tR\vdetailsText\x129\n" +
	"\x04code\x18\x03 \x01(\v2%.smartcore.bos.HealthCheck.Error.CodeR\x04code\x1a2\n" +
	"\x04Code\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x16\n" +
	"\x06system\x18\x02 \x01(\tR\x06system\x1a\xf5\x05\n" +
	"\vReliability\x12B\n" +
	"\x05state\x18\x01 \x01(\x0e2,.smartcore.bos.HealthCheck.Reliability.StateR\x05state\x12?\n" +
	"\rreliable_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\freliableTime\x12C\n" +
	"\x0funreliable_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x0eunreliableTime\x12?\n" +
	"\n" +
	"last_error\x18\x04 \x01(\v2 .smartcore.bos.HealthCheck.ErrorR\tlastError\x12B\n" +
	"\x05cause\x18\x05 \x01(\v2,.smartcore.bos.HealthCheck.Reliability.CauseR\x05cause\x12H\n" +
	"\aaffects\x18\x06 \x01(\v2..smartcore.bos.HealthCheck.Reliability.AffectsR\aaffects\x1av\n" +
	"\x05Cause\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x126\n" +
	"\x05error\x18\x02 \x01(\v2 .smartcore.bos.HealthCheck.ErrorR\x05error\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x1a\x1f\n" +
	"\aAffects\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x05R\x05count\"\xb3\x01\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bRELIABLE\x10\x01\x12\x0e\n" +
	"\n" +
	"UNRELIABLE\x10\x02\x12\x1a\n" +
	"\x16CONN_TRANSIENT_FAILURE\x10\x03\x12\x10\n" +
	"\fSEND_FAILURE\x10\x04\x12\x0f\n" +
	"\vNO_RESPONSE\x10\x05\x12\x10\n" +
	"\fBAD_RESPONSE\x10\x06\x12\r\n" +
	"\tNOT_FOUND\x10\a\x12\x15\n" +
	"\x11PERMISSION_DENIED\x10\b\x1a\xc4\x02\n" +
	"\x05Value\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x01 \x01(\bH\x00R\tboolValue\x12#\n" +
	"\fstring_value\x18\x02 \x01(\tH\x00R\vstringValue\x12\x1d\n" +
	"\tint_value\x18\x03 \x01(\x03H\x00R\bintValue\x12\x1f\n" +
	"\n" +
	"uint_value\x18\x04 \x01(\x04H\x00R\tuintValue\x12!\n" +
	"\vfloat_value\x18\x05 \x01(\x01H\x00R\n" +
	"floatValue\x12E\n" +
	"\x0ftimestamp_value\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x0etimestampValue\x12B\n" +
	"\x0eduration_value\x18\a \x01(\v2\x19.google.protobuf.DurationH\x00R\rdurationValueB\a\n" +
	"\x05value\x1a\xb4\x01\n" +
	"\n" +
	"ValueRange\x122\n" +
	"\x03low\x18\x01 \x01(\v2 .smartcore.bos.HealthCheck.ValueR\x03low\x124\n" +
	"\x04high\x18\x02 \x01(\v2 .smartcore.bos.HealthCheck.ValueR\x04high\x12<\n" +
	"\bdeadband\x18\x03 \x01(\v2 .smartcore.bos.HealthCheck.ValueR\bdeadband\x1aB\n" +
	"\x06Values\x128\n" +
	"\x06values\x18\x01 \x03(\v2 .smartcore.bos.HealthCheck.ValueR\x06values\x1a\xf4\x03\n" +
	"\x06Bounds\x12E\n" +
	"\rcurrent_value\x18\x01 \x01(\v2 .smartcore.bos.HealthCheck.ValueR\fcurrentValue\x12E\n" +
	"\fnormal_value\x18\x02 \x01(\v2 .smartcore.bos.HealthCheck.ValueH\x00R\vnormalValue\x12I\n" +
	"\x0eabnormal_value\x18\x03 \x01(\v2 .smartcore.bos.HealthCheck.ValueH\x00R\rabnormalValue\x12J\n" +
	"\fnormal_range\x18\x04 \x01(\v2%.smartcore.bos.HealthCheck.ValueRangeH\x00R\vnormalRange\x12H\n" +
	"\rnormal_values\x18\x06 \x01(\v2!.smartcore.bos.HealthCheck.ValuesH\x00R\fnormalValues\x12L\n" +
	"\x0fabnormal_values\x18\a \x01(\v2!.smartcore.bos.HealthCheck.ValuesH\x00R\x0eabnormalValues\x12!\n" +
	"\fdisplay_unit\x18\b \x01(\tR\vdisplayUnitB\n" +
	"\n" +
	"\bexpected\x1aQ\n" +
	"\x06Faults\x12G\n" +
	"\x0ecurrent_faults\x18\x01 \x03(\v2 .smartcore.bos.HealthCheck.ErrorR\rcurrentFaults\x1a\x80\x01\n" +
	"\x03Ack\x125\n" +
	"\back_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\aackTime\x12*\n" +
	"\x05actor\x18\x02 \x01(\v2\x14.smartcore.bos.ActorR\x05actor\x12\x16\n" +
	"\x06source\x18\x03 \x01(\tR\x06source\"l\n" +
	"\x0eOccupantImpact\x12\x1f\n" +
	"\x1bOCCUPANT_IMPACT_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12NO_OCCUPANT_IMPACT\x10\x01\x12\v\n" +
	"\aCOMFORT\x10\x02\x12\n" +
	"\n" +
	"\x06HEALTH\x10\x03\x12\b\n" +
	"\x04LIFE\x10\x04\"v\n" +
	"\x0fEquipmentImpact\x12 \n" +
	"\x1cEQUIPMENT_IMPACT_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13NO_EQUIPMENT_IMPACT\x10\x01\x12\f\n" +
	"\bWARRANTY\x10\x02\x12\f\n" +
	"\bLIFESPAN\x10\x03\x12\f\n" +
	"\bFUNCTION\x10\x04\"S\n" +
	"\tNormality\x12\x19\n" +
	"\x15NORMALITY_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x01\x12\f\n" +
	"\bABNORMAL\x10\x02\x12\a\n" +
	"\x03LOW\x10\x03\x12\b\n" +
	"\x04HIGH\x10\x04\"a\n" +
	"\fHealthChange\x12\x1d\n" +
	"\x19HEALTH_CHANGE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"TO_HEALTHY\x10\x01\x12\x11\n" +
	"\rTO_UNRELIABLE\x10\x02\x12\x0f\n" +
	"\vTO_ABNORMAL\x10\x04B\a\n" +
	"\x05check\"\xad\x02\n" +
	"\x11HealthCheckRecord\x12=\n" +
	"\fhealth_check\x18\x01 \x01(\v2\x1a.smartcore.bos.HealthCheckR\vhealthCheck\x12;\n" +
	"\vrecord_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordTime\x12L\n" +
	"\vrecord_type\x18\x03 \x01(\x0e2+.smartcore.bos.HealthCheckRecord.RecordTypeR\n" +
	"recordType\"N\n" +
	"\n" +
	"RecordType\x12\x1b\n" +
	"\x17RECORD_TYPE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05ADDED\x10\x01\x12\v\n" +
	"\aUPDATED\x10\x02\x12\v\n" +
	"\aREMOVED\x10\x03\"\xa2\x01\n" +
	"\x17ListHealthChecksRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x127\n" +
	"\tread_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x04 \x01(\tR\tpageToken\"\xa2\x01\n" +
	"\x18ListHealthChecksResponse\x12?\n" +
	"\rhealth_checks\x18\x01 \x03(\v2\x1a.smartcore.bos.HealthCheckR\fhealthChecks\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize\"\x89\x01\n" +
	"\x17PullHealthChecksRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x127\n" +
	"\tread_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12!\n" +
	"\fupdates_only\x18\x03 \x01(\bR\vupdatesOnly\"\xe3\x02\n" +
	"\x18PullHealthChecksResponse\x12H\n" +
	"\achanges\x18\x01 \x03(\v2..smartcore.bos.PullHealthChecksResponse.ChangeR\achanges\x1a\xfc\x01\n" +
	"\x06Change\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12/\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1b.smartcore.types.ChangeTypeR\x04type\x127\n" +
	"\tnew_value\x18\x03 \x01(\v2\x1a.smartcore.bos.HealthCheckR\bnewValue\x127\n" +
	"\told_value\x18\x04 \x01(\v2\x1a.smartcore.bos.HealthCheckR\boldValue\x12;\n" +
	"\vchange_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"changeTime\"t\n" +
	"\x15GetHealthCheckRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x127\n" +
	"\tread_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\"\x98\x01\n" +
	"\x16PullHealthCheckRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x127\n" +
	"\tread_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12!\n" +
	"\fupdates_only\x18\x04 \x01(\bR\vupdatesOnly\"\xfd\x01\n" +
	"\x17PullHealthCheckResponse\x12G\n" +
	"\achanges\x18\x01 \x03(\v2-.smartcore.bos.PullHealthCheckResponse.ChangeR\achanges\x1a\x98\x01\n" +
	"\x06Change\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12=\n" +
	"\fhealth_check\x18\x03 \x01(\v2\x1a.smartcore.bos.HealthCheckR\vhealthCheck\x12;\n" +
	"\vchange_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"changeTime\"\x89\x02\n" +
	"\x1dListHealthCheckHistoryRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x0e\n" +
	"\x02id\x18\a \x01(\tR\x02id\x124\n" +
	"\x06period\x18\x02 \x01(\v2\x1c.smartcore.types.time.PeriodR\x06period\x127\n" +
	"\tread_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x12\x19\n" +
	"\border_by\x18\x06 \x01(\tR\aorderBy\"\xbb\x01\n" +
	"\x1eListHealthCheckHistoryResponse\x12R\n" +
	"\x14health_check_records\x18\x01 \x03(\v2 .smartcore.bos.HealthCheckRecordR\x12healthCheckRecords\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize2\x8f\x03\n" +
	"\tHealthApi\x12c\n" +
	"\x10ListHealthChecks\x12&.smartcore.bos.ListHealthChecksRequest\x1a'.smartcore.bos.ListHealthChecksResponse\x12e\n" +
	"\x10PullHealthChecks\x12&.smartcore.bos.PullHealthChecksRequest\x1a'.smartcore.bos.PullHealthChecksResponse0\x01\x12R\n" +
	"\x0eGetHealthCheck\x12$.smartcore.bos.GetHealthCheckRequest\x1a\x1a.smartcore.bos.HealthCheck\x12b\n" +
	"\x0fPullHealthCheck\x12%.smartcore.bos.PullHealthCheckRequest\x1a&.smartcore.bos.PullHealthCheckResponse0\x012\x86\x01\n" +
	"\rHealthHistory\x12u\n" +
	"\x16ListHealthCheckHistory\x12,.smartcore.bos.ListHealthCheckHistoryRequest\x1a-.smartcore.bos.ListHealthCheckHistoryResponseB%Z#github.com/vanti-dev/sc-bos/pkg/genb\x06proto3"

var (
	file_health_proto_rawDescOnce sync.Once
	file_health_proto_rawDescData []byte
)

func file_health_proto_rawDescGZIP() []byte {
	file_health_proto_rawDescOnce.Do(func() {
		file_health_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_health_proto_rawDesc), len(file_health_proto_rawDesc)))
	})
	return file_health_proto_rawDescData
}

var file_health_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_health_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_health_proto_goTypes = []any{
	(HealthCheck_OccupantImpact)(0),                // 0: smartcore.bos.HealthCheck.OccupantImpact
	(HealthCheck_EquipmentImpact)(0),               // 1: smartcore.bos.HealthCheck.EquipmentImpact
	(HealthCheck_Normality)(0),                     // 2: smartcore.bos.HealthCheck.Normality
	(HealthCheck_HealthChange)(0),                  // 3: smartcore.bos.HealthCheck.HealthChange
	(HealthCheck_ComplianceImpact_Contribution)(0), // 4: smartcore.bos.HealthCheck.ComplianceImpact.Contribution
	(HealthCheck_Reliability_State)(0),             // 5: smartcore.bos.HealthCheck.Reliability.State
	(HealthCheckRecord_RecordType)(0),              // 6: smartcore.bos.HealthCheckRecord.RecordType
	(*HealthCheck)(nil),                            // 7: smartcore.bos.HealthCheck
	(*HealthCheckRecord)(nil),                      // 8: smartcore.bos.HealthCheckRecord
	(*ListHealthChecksRequest)(nil),                // 9: smartcore.bos.ListHealthChecksRequest
	(*ListHealthChecksResponse)(nil),               // 10: smartcore.bos.ListHealthChecksResponse
	(*PullHealthChecksRequest)(nil),                // 11: smartcore.bos.PullHealthChecksRequest
	(*PullHealthChecksResponse)(nil),               // 12: smartcore.bos.PullHealthChecksResponse
	(*GetHealthCheckRequest)(nil),                  // 13: smartcore.bos.GetHealthCheckRequest
	(*PullHealthCheckRequest)(nil),                 // 14: smartcore.bos.PullHealthCheckRequest
	(*PullHealthCheckResponse)(nil),                // 15: smartcore.bos.PullHealthCheckResponse
	(*ListHealthCheckHistoryRequest)(nil),          // 16: smartcore.bos.ListHealthCheckHistoryRequest
	(*ListHealthCheckHistoryResponse)(nil),         // 17: smartcore.bos.ListHealthCheckHistoryResponse
	(*HealthCheck_ComplianceImpact)(nil),           // 18: smartcore.bos.HealthCheck.ComplianceImpact
	(*HealthCheck_Error)(nil),                      // 19: smartcore.bos.HealthCheck.Error
	(*HealthCheck_Reliability)(nil),                // 20: smartcore.bos.HealthCheck.Reliability
	(*HealthCheck_Value)(nil),                      // 21: smartcore.bos.HealthCheck.Value
	(*HealthCheck_ValueRange)(nil),                 // 22: smartcore.bos.HealthCheck.ValueRange
	(*HealthCheck_Values)(nil),                     // 23: smartcore.bos.HealthCheck.Values
	(*HealthCheck_Bounds)(nil),                     // 24: smartcore.bos.HealthCheck.Bounds
	(*HealthCheck_Faults)(nil),                     // 25: smartcore.bos.HealthCheck.Faults
	(*HealthCheck_Ack)(nil),                        // 26: smartcore.bos.HealthCheck.Ack
	(*HealthCheck_ComplianceImpact_Standard)(nil),  // 27: smartcore.bos.HealthCheck.ComplianceImpact.Standard
	(*HealthCheck_Error_Code)(nil),                 // 28: smartcore.bos.HealthCheck.Error.Code
	(*HealthCheck_Reliability_Cause)(nil),          // 29: smartcore.bos.HealthCheck.Reliability.Cause
	(*HealthCheck_Reliability_Affects)(nil),        // 30: smartcore.bos.HealthCheck.Reliability.Affects
	(*PullHealthChecksResponse_Change)(nil),        // 31: smartcore.bos.PullHealthChecksResponse.Change
	(*PullHealthCheckResponse_Change)(nil),         // 32: smartcore.bos.PullHealthCheckResponse.Change
	(*timestamppb.Timestamp)(nil),                  // 33: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),                  // 34: google.protobuf.FieldMask
	(*time.Period)(nil),                            // 35: smartcore.types.time.Period
	(*durationpb.Duration)(nil),                    // 36: google.protobuf.Duration
	(*Actor)(nil),                                  // 37: smartcore.bos.Actor
	(types.ChangeType)(0),                          // 38: smartcore.types.ChangeType
}
var file_health_proto_depIdxs = []int32{
	0,  // 0: smartcore.bos.HealthCheck.occupant_impact:type_name -> smartcore.bos.HealthCheck.OccupantImpact
	1,  // 1: smartcore.bos.HealthCheck.equipment_impact:type_name -> smartcore.bos.HealthCheck.EquipmentImpact
	18, // 2: smartcore.bos.HealthCheck.compliance_impacts:type_name -> smartcore.bos.HealthCheck.ComplianceImpact
	20, // 3: smartcore.bos.HealthCheck.reliability:type_name -> smartcore.bos.HealthCheck.Reliability
	2,  // 4: smartcore.bos.HealthCheck.normality:type_name -> smartcore.bos.HealthCheck.Normality
	33, // 5: smartcore.bos.HealthCheck.normal_time:type_name -> google.protobuf.Timestamp
	33, // 6: smartcore.bos.HealthCheck.abnormal_time:type_name -> google.protobuf.Timestamp
	24, // 7: smartcore.bos.HealthCheck.bounds:type_name -> smartcore.bos.HealthCheck.Bounds
	25, // 8: smartcore.bos.HealthCheck.faults:type_name -> smartcore.bos.HealthCheck.Faults
	26, // 9: smartcore.bos.HealthCheck.to_healthy_ack:type_name -> smartcore.bos.HealthCheck.Ack
	26, // 10: smartcore.bos.HealthCheck.to_unreliable_ack:type_name -> smartcore.bos.HealthCheck.Ack
	26, // 11: smartcore.bos.HealthCheck.to_abnormal_ack:type_name -> smartcore.bos.HealthCheck.Ack
	7,  // 12: smartcore.bos.HealthCheckRecord.health_check:type_name -> smartcore.bos.HealthCheck
	33, // 13: smartcore.bos.HealthCheckRecord.record_time:type_name -> google.protobuf.Timestamp
	6,  // 14: smartcore.bos.HealthCheckRecord.record_type:type_name -> smartcore.bos.HealthCheckRecord.RecordType
	34, // 15: smartcore.bos.ListHealthChecksRequest.read_mask:type_name -> google.protobuf.FieldMask
	7,  // 16: smartcore.bos.ListHealthChecksResponse.health_checks:type_name -> smartcore.bos.HealthCheck
	34, // 17: smartcore.bos.PullHealthChecksRequest.read_mask:type_name -> google.protobuf.FieldMask
	31, // 18: smartcore.bos.PullHealthChecksResponse.changes:type_name -> smartcore.bos.PullHealthChecksResponse.Change
	34, // 19: smartcore.bos.GetHealthCheckRequest.read_mask:type_name -> google.protobuf.FieldMask
	34, // 20: smartcore.bos.PullHealthCheckRequest.read_mask:type_name -> google.protobuf.FieldMask
	32, // 21: smartcore.bos.PullHealthCheckResponse.changes:type_name -> smartcore.bos.PullHealthCheckResponse.Change
	35, // 22: smartcore.bos.ListHealthCheckHistoryRequest.period:type_name -> smartcore.types.time.Period
	34, // 23: smartcore.bos.ListHealthCheckHistoryRequest.read_mask:type_name -> google.protobuf.FieldMask
	8,  // 24: smartcore.bos.ListHealthCheckHistoryResponse.health_check_records:type_name -> smartcore.bos.HealthCheckRecord
	27, // 25: smartcore.bos.HealthCheck.ComplianceImpact.standard:type_name -> smartcore.bos.HealthCheck.ComplianceImpact.Standard
	4,  // 26: smartcore.bos.HealthCheck.ComplianceImpact.contribution:type_name -> smartcore.bos.HealthCheck.ComplianceImpact.Contribution
	28, // 27: smartcore.bos.HealthCheck.Error.code:type_name -> smartcore.bos.HealthCheck.Error.Code
	5,  // 28: smartcore.bos.HealthCheck.Reliability.state:type_name -> smartcore.bos.HealthCheck.Reliability.State
	33, // 29: smartcore.bos.HealthCheck.Reliability.reliable_time:type_name -> google.protobuf.Timestamp
	33, // 30: smartcore.bos.HealthCheck.Reliability.unreliable_time:type_name -> google.protobuf.Timestamp
	19, // 31: smartcore.bos.HealthCheck.Reliability.last_error:type_name -> smartcore.bos.HealthCheck.Error
	29, // 32: smartcore.bos.HealthCheck.Reliability.cause:type_name -> smartcore.bos.HealthCheck.Reliability.Cause
	30, // 33: smartcore.bos.HealthCheck.Reliability.affects:type_name -> smartcore.bos.HealthCheck.Reliability.Affects
	33, // 34: smartcore.bos.HealthCheck.Value.timestamp_value:type_name -> google.protobuf.Timestamp
	36, // 35: smartcore.bos.HealthCheck.Value.duration_value:type_name -> google.protobuf.Duration
	21, // 36: smartcore.bos.HealthCheck.ValueRange.low:type_name -> smartcore.bos.HealthCheck.Value
	21, // 37: smartcore.bos.HealthCheck.ValueRange.high:type_name -> smartcore.bos.HealthCheck.Value
	21, // 38: smartcore.bos.HealthCheck.ValueRange.deadband:type_name -> smartcore.bos.HealthCheck.Value
	21, // 39: smartcore.bos.HealthCheck.Values.values:type_name -> smartcore.bos.HealthCheck.Value
	21, // 40: smartcore.bos.HealthCheck.Bounds.current_value:type_name -> smartcore.bos.HealthCheck.Value
	21, // 41: smartcore.bos.HealthCheck.Bounds.normal_value:type_name -> smartcore.bos.HealthCheck.Value
	21, // 42: smartcore.bos.HealthCheck.Bounds.abnormal_value:type_name -> smartcore.bos.HealthCheck.Value
	22, // 43: smartcore.bos.HealthCheck.Bounds.normal_range:type_name -> smartcore.bos.HealthCheck.ValueRange
	23, // 44: smartcore.bos.HealthCheck.Bounds.normal_values:type_name -> smartcore.bos.HealthCheck.Values
	23, // 45: smartcore.bos.HealthCheck.Bounds.abnormal_values:type_name -> smartcore.bos.HealthCheck.Values
	19, // 46: smartcore.bos.HealthCheck.Faults.current_faults:type_name -> smartcore.bos.HealthCheck.Error
	33, // 47: smartcore.bos.HealthCheck.Ack.ack_time:type_name -> google.protobuf.Timestamp
	37, // 48: smartcore.bos.HealthCheck.Ack.actor:type_name -> smartcore.bos.Actor
	19, // 49: smartcore.bos.HealthCheck.Reliability.Cause.error:type_name -> smartcore.bos.HealthCheck.Error
	38, // 50: smartcore.bos.PullHealthChecksResponse.Change.type:type_name -> smartcore.types.ChangeType
	7,  // 51: smartcore.bos.PullHealthChecksResponse.Change.new_value:type_name -> smartcore.bos.HealthCheck
	7,  // 52: smartcore.bos.PullHealthChecksResponse.Change.old_value:type_name -> smartcore.bos.HealthCheck
	33, // 53: smartcore.bos.PullHealthChecksResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	7,  // 54: smartcore.bos.PullHealthCheckResponse.Change.health_check:type_name -> smartcore.bos.HealthCheck
	33, // 55: smartcore.bos.PullHealthCheckResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	9,  // 56: smartcore.bos.HealthApi.ListHealthChecks:input_type -> smartcore.bos.ListHealthChecksRequest
	11, // 57: smartcore.bos.HealthApi.PullHealthChecks:input_type -> smartcore.bos.PullHealthChecksRequest
	13, // 58: smartcore.bos.HealthApi.GetHealthCheck:input_type -> smartcore.bos.GetHealthCheckRequest
	14, // 59: smartcore.bos.HealthApi.PullHealthCheck:input_type -> smartcore.bos.PullHealthCheckRequest
	16, // 60: smartcore.bos.HealthHistory.ListHealthCheckHistory:input_type -> smartcore.bos.ListHealthCheckHistoryRequest
	10, // 61: smartcore.bos.HealthApi.ListHealthChecks:output_type -> smartcore.bos.ListHealthChecksResponse
	12, // 62: smartcore.bos.HealthApi.PullHealthChecks:output_type -> smartcore.bos.PullHealthChecksResponse
	7,  // 63: smartcore.bos.HealthApi.GetHealthCheck:output_type -> smartcore.bos.HealthCheck
	15, // 64: smartcore.bos.HealthApi.PullHealthCheck:output_type -> smartcore.bos.PullHealthCheckResponse
	17, // 65: smartcore.bos.HealthHistory.ListHealthCheckHistory:output_type -> smartcore.bos.ListHealthCheckHistoryResponse
	61, // [61:66] is the sub-list for method output_type
	56, // [56:61] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_health_proto_init() }
func file_health_proto_init() {
	if File_health_proto != nil {
		return
	}
	file_actor_proto_init()
	file_health_proto_msgTypes[0].OneofWrappers = []any{
		(*HealthCheck_Bounds_)(nil),
		(*HealthCheck_Faults_)(nil),
	}
	file_health_proto_msgTypes[14].OneofWrappers = []any{
		(*HealthCheck_Value_BoolValue)(nil),
		(*HealthCheck_Value_StringValue)(nil),
		(*HealthCheck_Value_IntValue)(nil),
		(*HealthCheck_Value_UintValue)(nil),
		(*HealthCheck_Value_FloatValue)(nil),
		(*HealthCheck_Value_TimestampValue)(nil),
		(*HealthCheck_Value_DurationValue)(nil),
	}
	file_health_proto_msgTypes[17].OneofWrappers = []any{
		(*HealthCheck_Bounds_NormalValue)(nil),
		(*HealthCheck_Bounds_AbnormalValue)(nil),
		(*HealthCheck_Bounds_NormalRange)(nil),
		(*HealthCheck_Bounds_NormalValues)(nil),
		(*HealthCheck_Bounds_AbnormalValues)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_health_proto_rawDesc), len(file_health_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_health_proto_goTypes,
		DependencyIndexes: file_health_proto_depIdxs,
		EnumInfos:         file_health_proto_enumTypes,
		MessageInfos:      file_health_proto_msgTypes,
	}.Build()
	File_health_proto = out.File
	file_health_proto_goTypes = nil
	file_health_proto_depIdxs = nil
}
