// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	context "context"
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// WrapButtonApi	adapts a ButtonApiServer	and presents it as a ButtonApiClient
func WrapButtonApi(server ButtonApiServer) ButtonApiClient {
	return &buttonApiWrapper{server}
}

type buttonApiWrapper struct {
	server ButtonApiServer
}

// compile time check that we implement the interface we need
var _ ButtonApiClient = (*buttonApiWrapper)(nil)

// UnwrapServer returns the underlying server instance.
func (w *buttonApiWrapper) UnwrapServer() ButtonApiServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *buttonApiWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *buttonApiWrapper) GetButtonState(ctx context.Context, req *GetButtonStateRequest, _ ...grpc.CallOption) (*ButtonState, error) {
	return w.server.GetButtonState(ctx, req)
}

func (w *buttonApiWrapper) PullButtonEvents(ctx context.Context, in *PullButtonEventsRequest, opts ...grpc.CallOption) (ButtonApi_PullButtonEventsClient, error) {
	stream := wrap.NewClientServerStream(ctx)
	server := &pullButtonEventsButtonApiServerWrapper{stream.Server()}
	client := &pullButtonEventsButtonApiClientWrapper{stream.Client()}
	go func() {
		err := w.server.PullButtonEvents(in, server)
		stream.Close(err)
	}()
	return client, nil
}

type pullButtonEventsButtonApiClientWrapper struct {
	grpc.ClientStream
}

func (w *pullButtonEventsButtonApiClientWrapper) Recv() (*PullButtonEventsResponse, error) {
	m := new(PullButtonEventsResponse)
	if err := w.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type pullButtonEventsButtonApiServerWrapper struct {
	grpc.ServerStream
}

func (s *pullButtonEventsButtonApiServerWrapper) Send(response *PullButtonEventsResponse) error {
	return s.ServerStream.SendMsg(response)
}
