// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.2
// source: udmi.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UdmiServiceClient is the client API for UdmiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UdmiServiceClient interface {
	// DescribeTopics returns the topics the implementer is interested in subscribing to
	// (usually config topics, https://faucetsdn.github.io/udmi/docs/messages/config.html)
	DescribeTopics(ctx context.Context, in *DescribeTopicsRequest, opts ...grpc.CallOption) (*DescribeTopicsResponse, error)
	// If the implementer lists topics in any DescribeTopicsResponse, then each message received via the MQTT
	// broker will invoke a call to this method
	OnMessage(ctx context.Context, in *OnMessageRequest, opts ...grpc.CallOption) (*OnMessageResponse, error)
	// PullExportMessages, which are to be published to the MQTT broker for data export
	PullExportMessages(ctx context.Context, in *PullExportMessagesRequest, opts ...grpc.CallOption) (UdmiService_PullExportMessagesClient, error)
}

type udmiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUdmiServiceClient(cc grpc.ClientConnInterface) UdmiServiceClient {
	return &udmiServiceClient{cc}
}

func (c *udmiServiceClient) DescribeTopics(ctx context.Context, in *DescribeTopicsRequest, opts ...grpc.CallOption) (*DescribeTopicsResponse, error) {
	out := new(DescribeTopicsResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.UdmiService/DescribeTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udmiServiceClient) OnMessage(ctx context.Context, in *OnMessageRequest, opts ...grpc.CallOption) (*OnMessageResponse, error) {
	out := new(OnMessageResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.UdmiService/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udmiServiceClient) PullExportMessages(ctx context.Context, in *PullExportMessagesRequest, opts ...grpc.CallOption) (UdmiService_PullExportMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &UdmiService_ServiceDesc.Streams[0], "/smartcore.bos.UdmiService/PullExportMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &udmiServicePullExportMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UdmiService_PullExportMessagesClient interface {
	Recv() (*PullExportMessagesResponse, error)
	grpc.ClientStream
}

type udmiServicePullExportMessagesClient struct {
	grpc.ClientStream
}

func (x *udmiServicePullExportMessagesClient) Recv() (*PullExportMessagesResponse, error) {
	m := new(PullExportMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UdmiServiceServer is the server API for UdmiService service.
// All implementations must embed UnimplementedUdmiServiceServer
// for forward compatibility
type UdmiServiceServer interface {
	// DescribeTopics returns the topics the implementer is interested in subscribing to
	// (usually config topics, https://faucetsdn.github.io/udmi/docs/messages/config.html)
	DescribeTopics(context.Context, *DescribeTopicsRequest) (*DescribeTopicsResponse, error)
	// If the implementer lists topics in any DescribeTopicsResponse, then each message received via the MQTT
	// broker will invoke a call to this method
	OnMessage(context.Context, *OnMessageRequest) (*OnMessageResponse, error)
	// PullExportMessages, which are to be published to the MQTT broker for data export
	PullExportMessages(*PullExportMessagesRequest, UdmiService_PullExportMessagesServer) error
	mustEmbedUnimplementedUdmiServiceServer()
}

// UnimplementedUdmiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUdmiServiceServer struct {
}

func (UnimplementedUdmiServiceServer) DescribeTopics(context.Context, *DescribeTopicsRequest) (*DescribeTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTopics not implemented")
}
func (UnimplementedUdmiServiceServer) OnMessage(context.Context, *OnMessageRequest) (*OnMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedUdmiServiceServer) PullExportMessages(*PullExportMessagesRequest, UdmiService_PullExportMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method PullExportMessages not implemented")
}
func (UnimplementedUdmiServiceServer) mustEmbedUnimplementedUdmiServiceServer() {}

// UnsafeUdmiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UdmiServiceServer will
// result in compilation errors.
type UnsafeUdmiServiceServer interface {
	mustEmbedUnimplementedUdmiServiceServer()
}

func RegisterUdmiServiceServer(s grpc.ServiceRegistrar, srv UdmiServiceServer) {
	s.RegisterService(&UdmiService_ServiceDesc, srv)
}

func _UdmiService_DescribeTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdmiServiceServer).DescribeTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.UdmiService/DescribeTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdmiServiceServer).DescribeTopics(ctx, req.(*DescribeTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UdmiService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdmiServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.UdmiService/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdmiServiceServer).OnMessage(ctx, req.(*OnMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UdmiService_PullExportMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullExportMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UdmiServiceServer).PullExportMessages(m, &udmiServicePullExportMessagesServer{stream})
}

type UdmiService_PullExportMessagesServer interface {
	Send(*PullExportMessagesResponse) error
	grpc.ServerStream
}

type udmiServicePullExportMessagesServer struct {
	grpc.ServerStream
}

func (x *udmiServicePullExportMessagesServer) Send(m *PullExportMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UdmiService_ServiceDesc is the grpc.ServiceDesc for UdmiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UdmiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.UdmiService",
	HandlerType: (*UdmiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeTopics",
			Handler:    _UdmiService_DescribeTopics_Handler,
		},
		{
			MethodName: "OnMessage",
			Handler:    _UdmiService_OnMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullExportMessages",
			Handler:       _UdmiService_PullExportMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "udmi.proto",
}
