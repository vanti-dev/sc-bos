// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: udmi.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UdmiService_PullControlTopics_FullMethodName  = "/smartcore.bos.UdmiService/PullControlTopics"
	UdmiService_OnMessage_FullMethodName          = "/smartcore.bos.UdmiService/OnMessage"
	UdmiService_PullExportMessages_FullMethodName = "/smartcore.bos.UdmiService/PullExportMessages"
	UdmiService_GetExportMessage_FullMethodName   = "/smartcore.bos.UdmiService/GetExportMessage"
)

// UdmiServiceClient is the client API for UdmiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UdmiService defines the service needed to add UDMI support to a driver or system.
// The implementer is responsible for message payloads and topic definitions. This will not be validated.
type UdmiServiceClient interface {
	// PullControlTopics returns a stream of topics the implementer is interested in subscribing to.
	// Each response will include all topics, any sent previously can be discarded.
	// (usually config topics, https://faucetsdn.github.io/udmi/docs/messages/config.html)
	PullControlTopics(ctx context.Context, in *PullControlTopicsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullControlTopicsResponse], error)
	// If the implementer lists topics in any PullControlTopicsResponse, then each message received via the MQTT
	// broker will invoke a call to this method
	OnMessage(ctx context.Context, in *OnMessageRequest, opts ...grpc.CallOption) (*OnMessageResponse, error)
	// PullExportMessages, which are to be published to the MQTT broker for data export
	PullExportMessages(ctx context.Context, in *PullExportMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullExportMessagesResponse], error)
	// GetExportMessage returns a single MqttMessage.
	// Servers may return the last message returned by PullExportMessages, or collect data explicitly to return.
	// If the server does not have a message to return, it may return an Unavailable error.
	GetExportMessage(ctx context.Context, in *GetExportMessageRequest, opts ...grpc.CallOption) (*MqttMessage, error)
}

type udmiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUdmiServiceClient(cc grpc.ClientConnInterface) UdmiServiceClient {
	return &udmiServiceClient{cc}
}

func (c *udmiServiceClient) PullControlTopics(ctx context.Context, in *PullControlTopicsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullControlTopicsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UdmiService_ServiceDesc.Streams[0], UdmiService_PullControlTopics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullControlTopicsRequest, PullControlTopicsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UdmiService_PullControlTopicsClient = grpc.ServerStreamingClient[PullControlTopicsResponse]

func (c *udmiServiceClient) OnMessage(ctx context.Context, in *OnMessageRequest, opts ...grpc.CallOption) (*OnMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnMessageResponse)
	err := c.cc.Invoke(ctx, UdmiService_OnMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udmiServiceClient) PullExportMessages(ctx context.Context, in *PullExportMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullExportMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UdmiService_ServiceDesc.Streams[1], UdmiService_PullExportMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullExportMessagesRequest, PullExportMessagesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UdmiService_PullExportMessagesClient = grpc.ServerStreamingClient[PullExportMessagesResponse]

func (c *udmiServiceClient) GetExportMessage(ctx context.Context, in *GetExportMessageRequest, opts ...grpc.CallOption) (*MqttMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MqttMessage)
	err := c.cc.Invoke(ctx, UdmiService_GetExportMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UdmiServiceServer is the server API for UdmiService service.
// All implementations must embed UnimplementedUdmiServiceServer
// for forward compatibility.
//
// UdmiService defines the service needed to add UDMI support to a driver or system.
// The implementer is responsible for message payloads and topic definitions. This will not be validated.
type UdmiServiceServer interface {
	// PullControlTopics returns a stream of topics the implementer is interested in subscribing to.
	// Each response will include all topics, any sent previously can be discarded.
	// (usually config topics, https://faucetsdn.github.io/udmi/docs/messages/config.html)
	PullControlTopics(*PullControlTopicsRequest, grpc.ServerStreamingServer[PullControlTopicsResponse]) error
	// If the implementer lists topics in any PullControlTopicsResponse, then each message received via the MQTT
	// broker will invoke a call to this method
	OnMessage(context.Context, *OnMessageRequest) (*OnMessageResponse, error)
	// PullExportMessages, which are to be published to the MQTT broker for data export
	PullExportMessages(*PullExportMessagesRequest, grpc.ServerStreamingServer[PullExportMessagesResponse]) error
	// GetExportMessage returns a single MqttMessage.
	// Servers may return the last message returned by PullExportMessages, or collect data explicitly to return.
	// If the server does not have a message to return, it may return an Unavailable error.
	GetExportMessage(context.Context, *GetExportMessageRequest) (*MqttMessage, error)
	mustEmbedUnimplementedUdmiServiceServer()
}

// UnimplementedUdmiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUdmiServiceServer struct{}

func (UnimplementedUdmiServiceServer) PullControlTopics(*PullControlTopicsRequest, grpc.ServerStreamingServer[PullControlTopicsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullControlTopics not implemented")
}
func (UnimplementedUdmiServiceServer) OnMessage(context.Context, *OnMessageRequest) (*OnMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedUdmiServiceServer) PullExportMessages(*PullExportMessagesRequest, grpc.ServerStreamingServer[PullExportMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullExportMessages not implemented")
}
func (UnimplementedUdmiServiceServer) GetExportMessage(context.Context, *GetExportMessageRequest) (*MqttMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExportMessage not implemented")
}
func (UnimplementedUdmiServiceServer) mustEmbedUnimplementedUdmiServiceServer() {}
func (UnimplementedUdmiServiceServer) testEmbeddedByValue()                     {}

// UnsafeUdmiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UdmiServiceServer will
// result in compilation errors.
type UnsafeUdmiServiceServer interface {
	mustEmbedUnimplementedUdmiServiceServer()
}

func RegisterUdmiServiceServer(s grpc.ServiceRegistrar, srv UdmiServiceServer) {
	// If the following call pancis, it indicates UnimplementedUdmiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UdmiService_ServiceDesc, srv)
}

func _UdmiService_PullControlTopics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullControlTopicsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UdmiServiceServer).PullControlTopics(m, &grpc.GenericServerStream[PullControlTopicsRequest, PullControlTopicsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UdmiService_PullControlTopicsServer = grpc.ServerStreamingServer[PullControlTopicsResponse]

func _UdmiService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdmiServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UdmiService_OnMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdmiServiceServer).OnMessage(ctx, req.(*OnMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UdmiService_PullExportMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullExportMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UdmiServiceServer).PullExportMessages(m, &grpc.GenericServerStream[PullExportMessagesRequest, PullExportMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UdmiService_PullExportMessagesServer = grpc.ServerStreamingServer[PullExportMessagesResponse]

func _UdmiService_GetExportMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExportMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdmiServiceServer).GetExportMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UdmiService_GetExportMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdmiServiceServer).GetExportMessage(ctx, req.(*GetExportMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UdmiService_ServiceDesc is the grpc.ServiceDesc for UdmiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UdmiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.UdmiService",
	HandlerType: (*UdmiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _UdmiService_OnMessage_Handler,
		},
		{
			MethodName: "GetExportMessage",
			Handler:    _UdmiService_GetExportMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullControlTopics",
			Handler:       _UdmiService_PullControlTopics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullExportMessages",
			Handler:       _UdmiService_PullExportMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "udmi.proto",
}
