// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: mqtt.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MqttService_PullMessages_FullMethodName = "/smartcore.bos.MqttService/PullMessages"
)

// MqttServiceClient is the client API for MqttService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqttServiceClient interface {
	PullMessages(ctx context.Context, in *PullMessagesRequest, opts ...grpc.CallOption) (MqttService_PullMessagesClient, error)
}

type mqttServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMqttServiceClient(cc grpc.ClientConnInterface) MqttServiceClient {
	return &mqttServiceClient{cc}
}

func (c *mqttServiceClient) PullMessages(ctx context.Context, in *PullMessagesRequest, opts ...grpc.CallOption) (MqttService_PullMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MqttService_ServiceDesc.Streams[0], MqttService_PullMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mqttServicePullMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MqttService_PullMessagesClient interface {
	Recv() (*PullMessagesResponse, error)
	grpc.ClientStream
}

type mqttServicePullMessagesClient struct {
	grpc.ClientStream
}

func (x *mqttServicePullMessagesClient) Recv() (*PullMessagesResponse, error) {
	m := new(PullMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MqttServiceServer is the server API for MqttService service.
// All implementations must embed UnimplementedMqttServiceServer
// for forward compatibility
type MqttServiceServer interface {
	PullMessages(*PullMessagesRequest, MqttService_PullMessagesServer) error
	mustEmbedUnimplementedMqttServiceServer()
}

// UnimplementedMqttServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMqttServiceServer struct {
}

func (UnimplementedMqttServiceServer) PullMessages(*PullMessagesRequest, MqttService_PullMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method PullMessages not implemented")
}
func (UnimplementedMqttServiceServer) mustEmbedUnimplementedMqttServiceServer() {}

// UnsafeMqttServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqttServiceServer will
// result in compilation errors.
type UnsafeMqttServiceServer interface {
	mustEmbedUnimplementedMqttServiceServer()
}

func RegisterMqttServiceServer(s grpc.ServiceRegistrar, srv MqttServiceServer) {
	s.RegisterService(&MqttService_ServiceDesc, srv)
}

func _MqttService_PullMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MqttServiceServer).PullMessages(m, &mqttServicePullMessagesServer{stream})
}

type MqttService_PullMessagesServer interface {
	Send(*PullMessagesResponse) error
	grpc.ServerStream
}

type mqttServicePullMessagesServer struct {
	grpc.ServerStream
}

func (x *mqttServicePullMessagesServer) Send(m *PullMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MqttService_ServiceDesc is the grpc.ServiceDesc for MqttService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MqttService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.MqttService",
	HandlerType: (*MqttServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullMessages",
			Handler:       _MqttService_PullMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mqtt.proto",
}
