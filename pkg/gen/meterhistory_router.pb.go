// Code generated by protoc-gen-router. DO NOT EDIT.

package gen

import (
	"context"
	"fmt"

	"google.golang.org/grpc"

	"github.com/smart-core-os/sc-golang/pkg/router"
)

// MeterHistoryRouter is a gen.MeterHistoryServer that allows routing named requests to specific gen.MeterHistoryClient
type MeterHistoryRouter struct {
	UnimplementedMeterHistoryServer

	router.Router
}

// compile time check that we implement the interface we need
var _ MeterHistoryServer = (*MeterHistoryRouter)(nil)

func NewMeterHistoryRouter(opts ...router.Option) *MeterHistoryRouter {
	return &MeterHistoryRouter{
		Router: router.NewRouter(opts...),
	}
}

// WithMeterHistoryClientFactory instructs the router to create a new
// client the first time Get is called for that name.
func WithMeterHistoryClientFactory(f func(name string) (MeterHistoryClient, error)) router.Option {
	return router.WithFactory(func(name string) (any, error) {
		return f(name)
	})
}

func (r *MeterHistoryRouter) Register(server grpc.ServiceRegistrar) {
	RegisterMeterHistoryServer(server, r)
}

// Add extends Router.Add to panic if client is not of type gen.MeterHistoryClient.
func (r *MeterHistoryRouter) Add(name string, client any) any {
	if !r.HoldsType(client) {
		panic(fmt.Sprintf("not correct type: client of type %T is not a gen.MeterHistoryClient", client))
	}
	return r.Router.Add(name, client)
}

func (r *MeterHistoryRouter) HoldsType(client any) bool {
	_, ok := client.(MeterHistoryClient)
	return ok
}

func (r *MeterHistoryRouter) AddMeterHistoryClient(name string, client MeterHistoryClient) MeterHistoryClient {
	res := r.Add(name, client)
	if res == nil {
		return nil
	}
	return res.(MeterHistoryClient)
}

func (r *MeterHistoryRouter) RemoveMeterHistoryClient(name string) MeterHistoryClient {
	res := r.Remove(name)
	if res == nil {
		return nil
	}
	return res.(MeterHistoryClient)
}

func (r *MeterHistoryRouter) GetMeterHistoryClient(name string) (MeterHistoryClient, error) {
	res, err := r.Get(name)
	if err != nil {
		return nil, err
	}
	if res == nil {
		return nil, nil
	}
	return res.(MeterHistoryClient), nil
}

func (r *MeterHistoryRouter) ListMeterReadingHistory(ctx context.Context, request *ListMeterReadingHistoryRequest) (*ListMeterReadingHistoryResponse, error) {
	child, err := r.GetMeterHistoryClient(request.Name)
	if err != nil {
		return nil, err
	}

	return child.ListMeterReadingHistory(ctx, request)
}
