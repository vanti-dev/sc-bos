// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: history.proto

package gen

import (
	traits "github.com/smart-core-os/sc-api/go/traits"
	time "github.com/smart-core-os/sc-api/go/types/time"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HistoryRecord is a generic record of a device's state at a point in time.
// Prefer using trait specific record types where possible.
type HistoryRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Payload       []byte                 `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryRecord) Reset() {
	*x = HistoryRecord{}
	mi := &file_history_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRecord) ProtoMessage() {}

func (x *HistoryRecord) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRecord.ProtoReflect.Descriptor instead.
func (*HistoryRecord) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{0}
}

func (x *HistoryRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HistoryRecord) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *HistoryRecord) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *HistoryRecord) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CreateHistoryRecordRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The record to create.
	// The id and create_time fields must be absent.
	Record        *HistoryRecord `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateHistoryRecordRequest) Reset() {
	*x = CreateHistoryRecordRequest{}
	mi := &file_history_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHistoryRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHistoryRecordRequest) ProtoMessage() {}

func (x *CreateHistoryRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHistoryRecordRequest.ProtoReflect.Descriptor instead.
func (*CreateHistoryRecordRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{1}
}

func (x *CreateHistoryRecordRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateHistoryRecordRequest) GetRecord() *HistoryRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type ListHistoryRecordsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The maximum number of records to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListHistoryRecords` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specify the order of the returned records.
	// The default is `create_time asc` - aka oldest record first.
	// The format is `field_name [asc|desc]`, with asc being the default.
	// Only `create_time` is supported.
	OrderBy       string               `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Query         *HistoryRecord_Query `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHistoryRecordsRequest) Reset() {
	*x = ListHistoryRecordsRequest{}
	mi := &file_history_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHistoryRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoryRecordsRequest) ProtoMessage() {}

func (x *ListHistoryRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoryRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListHistoryRecordsRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{2}
}

func (x *ListHistoryRecordsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListHistoryRecordsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListHistoryRecordsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListHistoryRecordsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListHistoryRecordsRequest) GetQuery() *HistoryRecord_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type ListHistoryRecordsResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Records []*HistoryRecord       `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of records matched by the query.
	// This may be an estimate.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListHistoryRecordsResponse) Reset() {
	*x = ListHistoryRecordsResponse{}
	mi := &file_history_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListHistoryRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistoryRecordsResponse) ProtoMessage() {}

func (x *ListHistoryRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistoryRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListHistoryRecordsResponse) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{3}
}

func (x *ListHistoryRecordsResponse) GetRecords() []*HistoryRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListHistoryRecordsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListHistoryRecordsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type AirTemperatureRecord struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AirTemperature *traits.AirTemperature `protobuf:"bytes,1,opt,name=air_temperature,json=airTemperature,proto3" json:"air_temperature,omitempty"`
	RecordTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AirTemperatureRecord) Reset() {
	*x = AirTemperatureRecord{}
	mi := &file_history_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AirTemperatureRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirTemperatureRecord) ProtoMessage() {}

func (x *AirTemperatureRecord) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirTemperatureRecord.ProtoReflect.Descriptor instead.
func (*AirTemperatureRecord) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{4}
}

func (x *AirTemperatureRecord) GetAirTemperature() *traits.AirTemperature {
	if x != nil {
		return x.AirTemperature
	}
	return nil
}

func (x *AirTemperatureRecord) GetRecordTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordTime
	}
	return nil
}

type ListAirTemperatureHistoryRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Period *time.Period           `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	// Fields to fetch relative to the AirTemperatureRecord type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of devices to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListAirTemperatureHistoryResponse` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specify the order of the returned records.
	// The default is `record_time asc` - aka oldest record first.
	// The format is `field_name [asc|desc]`, with asc being the default.
	// Only `record_time` is supported.
	OrderBy       string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAirTemperatureHistoryRequest) Reset() {
	*x = ListAirTemperatureHistoryRequest{}
	mi := &file_history_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAirTemperatureHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAirTemperatureHistoryRequest) ProtoMessage() {}

func (x *ListAirTemperatureHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAirTemperatureHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListAirTemperatureHistoryRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{5}
}

func (x *ListAirTemperatureHistoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListAirTemperatureHistoryRequest) GetPeriod() *time.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *ListAirTemperatureHistoryRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListAirTemperatureHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAirTemperatureHistoryRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAirTemperatureHistoryRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListAirTemperatureHistoryResponse struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	AirTemperatureRecords []*AirTemperatureRecord `protobuf:"bytes,1,rep,name=air_temperature_records,json=airTemperatureRecords,proto3" json:"air_temperature_records,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of records matched by the query.
	// This may be an estimate.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAirTemperatureHistoryResponse) Reset() {
	*x = ListAirTemperatureHistoryResponse{}
	mi := &file_history_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAirTemperatureHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAirTemperatureHistoryResponse) ProtoMessage() {}

func (x *ListAirTemperatureHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAirTemperatureHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListAirTemperatureHistoryResponse) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{6}
}

func (x *ListAirTemperatureHistoryResponse) GetAirTemperatureRecords() []*AirTemperatureRecord {
	if x != nil {
		return x.AirTemperatureRecords
	}
	return nil
}

func (x *ListAirTemperatureHistoryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListAirTemperatureHistoryResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type MeterReadingRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MeterReading  *MeterReading          `protobuf:"bytes,1,opt,name=meter_reading,json=meterReading,proto3" json:"meter_reading,omitempty"`
	RecordTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeterReadingRecord) Reset() {
	*x = MeterReadingRecord{}
	mi := &file_history_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeterReadingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterReadingRecord) ProtoMessage() {}

func (x *MeterReadingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterReadingRecord.ProtoReflect.Descriptor instead.
func (*MeterReadingRecord) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{7}
}

func (x *MeterReadingRecord) GetMeterReading() *MeterReading {
	if x != nil {
		return x.MeterReading
	}
	return nil
}

func (x *MeterReadingRecord) GetRecordTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordTime
	}
	return nil
}

type ListMeterReadingHistoryRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Period *time.Period           `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	// Fields to fetch relative to the MeterReadingRecord type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of devices to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListMeterReadingHistoryResponse` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specify the order of the returned records.
	// The default is `record_time asc` - aka oldest record first.
	// The format is `field_name [asc|desc]`, with asc being the default.
	// Only `record_time` is supported.
	OrderBy       string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMeterReadingHistoryRequest) Reset() {
	*x = ListMeterReadingHistoryRequest{}
	mi := &file_history_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMeterReadingHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMeterReadingHistoryRequest) ProtoMessage() {}

func (x *ListMeterReadingHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMeterReadingHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListMeterReadingHistoryRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{8}
}

func (x *ListMeterReadingHistoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListMeterReadingHistoryRequest) GetPeriod() *time.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *ListMeterReadingHistoryRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListMeterReadingHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMeterReadingHistoryRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListMeterReadingHistoryRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListMeterReadingHistoryResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	MeterReadingRecords []*MeterReadingRecord  `protobuf:"bytes,1,rep,name=meter_reading_records,json=meterReadingRecords,proto3" json:"meter_reading_records,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of records matched by the query.
	// This may be an estimate.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMeterReadingHistoryResponse) Reset() {
	*x = ListMeterReadingHistoryResponse{}
	mi := &file_history_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMeterReadingHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMeterReadingHistoryResponse) ProtoMessage() {}

func (x *ListMeterReadingHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMeterReadingHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListMeterReadingHistoryResponse) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{9}
}

func (x *ListMeterReadingHistoryResponse) GetMeterReadingRecords() []*MeterReadingRecord {
	if x != nil {
		return x.MeterReadingRecords
	}
	return nil
}

func (x *ListMeterReadingHistoryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListMeterReadingHistoryResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type ElectricDemandRecord struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ElectricDemand *traits.ElectricDemand `protobuf:"bytes,1,opt,name=electric_demand,json=electricDemand,proto3" json:"electric_demand,omitempty"`
	RecordTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ElectricDemandRecord) Reset() {
	*x = ElectricDemandRecord{}
	mi := &file_history_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElectricDemandRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectricDemandRecord) ProtoMessage() {}

func (x *ElectricDemandRecord) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectricDemandRecord.ProtoReflect.Descriptor instead.
func (*ElectricDemandRecord) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{10}
}

func (x *ElectricDemandRecord) GetElectricDemand() *traits.ElectricDemand {
	if x != nil {
		return x.ElectricDemand
	}
	return nil
}

func (x *ElectricDemandRecord) GetRecordTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordTime
	}
	return nil
}

type ListElectricDemandHistoryRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Period *time.Period           `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	// Fields to fetch relative to the ElectricDemandRecord type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of devices to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListElectricDemandHistoryResponse` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specify the order of the returned records.
	// The default is `record_time asc` - aka oldest record first.
	// The format is `field_name [asc|desc]`, with asc being the default.
	// Only `record_time` is supported.
	OrderBy       string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListElectricDemandHistoryRequest) Reset() {
	*x = ListElectricDemandHistoryRequest{}
	mi := &file_history_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListElectricDemandHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListElectricDemandHistoryRequest) ProtoMessage() {}

func (x *ListElectricDemandHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListElectricDemandHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListElectricDemandHistoryRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{11}
}

func (x *ListElectricDemandHistoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListElectricDemandHistoryRequest) GetPeriod() *time.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *ListElectricDemandHistoryRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListElectricDemandHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListElectricDemandHistoryRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListElectricDemandHistoryRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListElectricDemandHistoryResponse struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	ElectricDemandRecords []*ElectricDemandRecord `protobuf:"bytes,1,rep,name=electric_demand_records,json=electricDemandRecords,proto3" json:"electric_demand_records,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of records matched by the query.
	// This may be an estimate.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListElectricDemandHistoryResponse) Reset() {
	*x = ListElectricDemandHistoryResponse{}
	mi := &file_history_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListElectricDemandHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListElectricDemandHistoryResponse) ProtoMessage() {}

func (x *ListElectricDemandHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListElectricDemandHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListElectricDemandHistoryResponse) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{12}
}

func (x *ListElectricDemandHistoryResponse) GetElectricDemandRecords() []*ElectricDemandRecord {
	if x != nil {
		return x.ElectricDemandRecords
	}
	return nil
}

func (x *ListElectricDemandHistoryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListElectricDemandHistoryResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type OccupancyRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Occupancy     *traits.Occupancy      `protobuf:"bytes,1,opt,name=occupancy,proto3" json:"occupancy,omitempty"`
	RecordTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OccupancyRecord) Reset() {
	*x = OccupancyRecord{}
	mi := &file_history_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OccupancyRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OccupancyRecord) ProtoMessage() {}

func (x *OccupancyRecord) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OccupancyRecord.ProtoReflect.Descriptor instead.
func (*OccupancyRecord) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{13}
}

func (x *OccupancyRecord) GetOccupancy() *traits.Occupancy {
	if x != nil {
		return x.Occupancy
	}
	return nil
}

func (x *OccupancyRecord) GetRecordTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordTime
	}
	return nil
}

type ListOccupancyHistoryRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Period *time.Period           `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	// Fields to fetch relative to the OccupancyRecord type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of devices to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListOccupancyHistoryResponse` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specify the order of the returned records.
	// The default is `record_time asc` - aka oldest record first.
	// The format is `field_name [asc|desc]`, with asc being the default.
	// Only `record_time` is supported.
	OrderBy       string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOccupancyHistoryRequest) Reset() {
	*x = ListOccupancyHistoryRequest{}
	mi := &file_history_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOccupancyHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOccupancyHistoryRequest) ProtoMessage() {}

func (x *ListOccupancyHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOccupancyHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListOccupancyHistoryRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{14}
}

func (x *ListOccupancyHistoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListOccupancyHistoryRequest) GetPeriod() *time.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *ListOccupancyHistoryRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListOccupancyHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOccupancyHistoryRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOccupancyHistoryRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListOccupancyHistoryResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	OccupancyRecords []*OccupancyRecord     `protobuf:"bytes,1,rep,name=occupancy_records,json=occupancyRecords,proto3" json:"occupancy_records,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of records matched by the query.
	// This may be an estimate.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOccupancyHistoryResponse) Reset() {
	*x = ListOccupancyHistoryResponse{}
	mi := &file_history_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOccupancyHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOccupancyHistoryResponse) ProtoMessage() {}

func (x *ListOccupancyHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOccupancyHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListOccupancyHistoryResponse) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{15}
}

func (x *ListOccupancyHistoryResponse) GetOccupancyRecords() []*OccupancyRecord {
	if x != nil {
		return x.OccupancyRecords
	}
	return nil
}

func (x *ListOccupancyHistoryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListOccupancyHistoryResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type AirQualityRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AirQuality    *traits.AirQuality     `protobuf:"bytes,1,opt,name=air_quality,json=airQuality,proto3" json:"air_quality,omitempty"`
	RecordTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AirQualityRecord) Reset() {
	*x = AirQualityRecord{}
	mi := &file_history_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AirQualityRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirQualityRecord) ProtoMessage() {}

func (x *AirQualityRecord) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirQualityRecord.ProtoReflect.Descriptor instead.
func (*AirQualityRecord) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{16}
}

func (x *AirQualityRecord) GetAirQuality() *traits.AirQuality {
	if x != nil {
		return x.AirQuality
	}
	return nil
}

func (x *AirQualityRecord) GetRecordTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordTime
	}
	return nil
}

type ListAirQualityHistoryRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Period *time.Period           `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	// Fields to fetch relative to the AirQualityRecord type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of devices to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListAirQualityHistoryResponse` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specify the order of the returned records.
	// The default is `record_time asc` - aka oldest record first.
	// The format is `field_name [asc|desc]`, with asc being the default.
	// Only `record_time` is supported.
	OrderBy       string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAirQualityHistoryRequest) Reset() {
	*x = ListAirQualityHistoryRequest{}
	mi := &file_history_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAirQualityHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAirQualityHistoryRequest) ProtoMessage() {}

func (x *ListAirQualityHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAirQualityHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListAirQualityHistoryRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{17}
}

func (x *ListAirQualityHistoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListAirQualityHistoryRequest) GetPeriod() *time.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *ListAirQualityHistoryRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListAirQualityHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAirQualityHistoryRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAirQualityHistoryRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListAirQualityHistoryResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AirQualityRecords []*AirQualityRecord    `protobuf:"bytes,1,rep,name=air_quality_records,json=airQualityRecords,proto3" json:"air_quality_records,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of records matched by the query.
	// This may be an estimate.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAirQualityHistoryResponse) Reset() {
	*x = ListAirQualityHistoryResponse{}
	mi := &file_history_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAirQualityHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAirQualityHistoryResponse) ProtoMessage() {}

func (x *ListAirQualityHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAirQualityHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListAirQualityHistoryResponse) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{18}
}

func (x *ListAirQualityHistoryResponse) GetAirQualityRecords() []*AirQualityRecord {
	if x != nil {
		return x.AirQualityRecords
	}
	return nil
}

func (x *ListAirQualityHistoryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListAirQualityHistoryResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type SoundLevelRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SoundLevel    *SoundLevel            `protobuf:"bytes,1,opt,name=sound_level,json=soundLevel,proto3" json:"sound_level,omitempty"`
	RecordTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SoundLevelRecord) Reset() {
	*x = SoundLevelRecord{}
	mi := &file_history_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SoundLevelRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundLevelRecord) ProtoMessage() {}

func (x *SoundLevelRecord) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundLevelRecord.ProtoReflect.Descriptor instead.
func (*SoundLevelRecord) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{19}
}

func (x *SoundLevelRecord) GetSoundLevel() *SoundLevel {
	if x != nil {
		return x.SoundLevel
	}
	return nil
}

func (x *SoundLevelRecord) GetRecordTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordTime
	}
	return nil
}

type ListSoundLevelHistoryRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Period *time.Period           `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	// Fields to fetch relative to the SoundLevelRecord type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of records to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListSoundLevelHistory` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specify the order of the returned records.
	// The default is `record_time asc` - aka oldest record first.
	// The format is `field_name [asc|desc]`, with asc being the default.
	// Only `record_time` is supported.
	OrderBy       string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSoundLevelHistoryRequest) Reset() {
	*x = ListSoundLevelHistoryRequest{}
	mi := &file_history_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSoundLevelHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSoundLevelHistoryRequest) ProtoMessage() {}

func (x *ListSoundLevelHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSoundLevelHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListSoundLevelHistoryRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{20}
}

func (x *ListSoundLevelHistoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSoundLevelHistoryRequest) GetPeriod() *time.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *ListSoundLevelHistoryRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListSoundLevelHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSoundLevelHistoryRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSoundLevelHistoryRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListSoundLevelHistoryResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SoundLevelRecords []*SoundLevelRecord    `protobuf:"bytes,1,rep,name=sound_level_records,json=soundLevelRecords,proto3" json:"sound_level_records,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of records matched by the query.
	// This may be an estimate.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSoundLevelHistoryResponse) Reset() {
	*x = ListSoundLevelHistoryResponse{}
	mi := &file_history_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSoundLevelHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSoundLevelHistoryResponse) ProtoMessage() {}

func (x *ListSoundLevelHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSoundLevelHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListSoundLevelHistoryResponse) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{21}
}

func (x *ListSoundLevelHistoryResponse) GetSoundLevelRecords() []*SoundLevelRecord {
	if x != nil {
		return x.SoundLevelRecords
	}
	return nil
}

func (x *ListSoundLevelHistoryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListSoundLevelHistoryResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type EnterLeaveEventRecord struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	EnterLeaveEvent *traits.EnterLeaveEvent `protobuf:"bytes,1,opt,name=enter_leave_event,json=enterLeaveEvent,proto3" json:"enter_leave_event,omitempty"`
	RecordTime      *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=record_time,json=recordTime,proto3" json:"record_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EnterLeaveEventRecord) Reset() {
	*x = EnterLeaveEventRecord{}
	mi := &file_history_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnterLeaveEventRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterLeaveEventRecord) ProtoMessage() {}

func (x *EnterLeaveEventRecord) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterLeaveEventRecord.ProtoReflect.Descriptor instead.
func (*EnterLeaveEventRecord) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{22}
}

func (x *EnterLeaveEventRecord) GetEnterLeaveEvent() *traits.EnterLeaveEvent {
	if x != nil {
		return x.EnterLeaveEvent
	}
	return nil
}

func (x *EnterLeaveEventRecord) GetRecordTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordTime
	}
	return nil
}

type ListEnterLeaveHistoryRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Period *time.Period           `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	// Fields to fetch relative to the EnterLeaveEventRecord type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of records to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListEnterLeaveHistory` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specify the order of the returned records.
	// The default is `record_time asc` - aka oldest record first.
	// The format is `field_name [asc|desc]`, with asc being the default.
	// Only `record_time` is supported.
	OrderBy       string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEnterLeaveHistoryRequest) Reset() {
	*x = ListEnterLeaveHistoryRequest{}
	mi := &file_history_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEnterLeaveHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterLeaveHistoryRequest) ProtoMessage() {}

func (x *ListEnterLeaveHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterLeaveHistoryRequest.ProtoReflect.Descriptor instead.
func (*ListEnterLeaveHistoryRequest) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{23}
}

func (x *ListEnterLeaveHistoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListEnterLeaveHistoryRequest) GetPeriod() *time.Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *ListEnterLeaveHistoryRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListEnterLeaveHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEnterLeaveHistoryRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListEnterLeaveHistoryRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListEnterLeaveHistoryResponse struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	EnterLeaveRecords []*EnterLeaveEventRecord `protobuf:"bytes,1,rep,name=enter_leave_records,json=enterLeaveRecords,proto3" json:"enter_leave_records,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of records matched by the query.
	// This may be an estimate.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEnterLeaveHistoryResponse) Reset() {
	*x = ListEnterLeaveHistoryResponse{}
	mi := &file_history_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEnterLeaveHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnterLeaveHistoryResponse) ProtoMessage() {}

func (x *ListEnterLeaveHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnterLeaveHistoryResponse.ProtoReflect.Descriptor instead.
func (*ListEnterLeaveHistoryResponse) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{24}
}

func (x *ListEnterLeaveHistoryResponse) GetEnterLeaveRecords() []*EnterLeaveEventRecord {
	if x != nil {
		return x.EnterLeaveRecords
	}
	return nil
}

func (x *ListEnterLeaveHistoryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListEnterLeaveHistoryResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type HistoryRecord_Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*HistoryRecord_Query_SourceEqual
	Source isHistoryRecord_Query_Source `protobuf_oneof:"source"`
	// The bounding records to select: from_record <= record < to_record.
	// ID or create_time (in that order) will be used for result selection.
	FromRecord    *HistoryRecord `protobuf:"bytes,10,opt,name=from_record,json=fromRecord,proto3" json:"from_record,omitempty"`
	ToRecord      *HistoryRecord `protobuf:"bytes,11,opt,name=to_record,json=toRecord,proto3" json:"to_record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryRecord_Query) Reset() {
	*x = HistoryRecord_Query{}
	mi := &file_history_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryRecord_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryRecord_Query) ProtoMessage() {}

func (x *HistoryRecord_Query) ProtoReflect() protoreflect.Message {
	mi := &file_history_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryRecord_Query.ProtoReflect.Descriptor instead.
func (*HistoryRecord_Query) Descriptor() ([]byte, []int) {
	return file_history_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HistoryRecord_Query) GetSource() isHistoryRecord_Query_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *HistoryRecord_Query) GetSourceEqual() string {
	if x != nil {
		if x, ok := x.Source.(*HistoryRecord_Query_SourceEqual); ok {
			return x.SourceEqual
		}
	}
	return ""
}

func (x *HistoryRecord_Query) GetFromRecord() *HistoryRecord {
	if x != nil {
		return x.FromRecord
	}
	return nil
}

func (x *HistoryRecord_Query) GetToRecord() *HistoryRecord {
	if x != nil {
		return x.ToRecord
	}
	return nil
}

type isHistoryRecord_Query_Source interface {
	isHistoryRecord_Query_Source()
}

type HistoryRecord_Query_SourceEqual struct {
	SourceEqual string `protobuf:"bytes,1,opt,name=source_equal,json=sourceEqual,proto3,oneof"`
}

func (*HistoryRecord_Query_SourceEqual) isHistoryRecord_Query_Source() {}

var File_history_proto protoreflect.FileDescriptor

const file_history_proto_rawDesc = "" +
	"\n" +
	"\rhistory.proto\x12\rsmartcore.bos\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x17types/time/period.proto\x1a\x1ctraits/air_temperature.proto\x1a\x15traits/electric.proto\x1a\x1dtraits/occupancy_sensor.proto\x1a\x1ftraits/air_quality_sensor.proto\x1a\x1ftraits/enter_leave_sensor.proto\x1a\vmeter.proto\x1a\x12sound_sensor.proto\"\xc1\x02\n" +
	"\rHistoryRecord\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12;\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12\x18\n" +
	"\apayload\x18\x04 \x01(\fR\apayload\x1a\xb0\x01\n" +
	"\x05Query\x12#\n" +
	"\fsource_equal\x18\x01 \x01(\tH\x00R\vsourceEqual\x12=\n" +
	"\vfrom_record\x18\n" +
	" \x01(\v2\x1c.smartcore.bos.HistoryRecordR\n" +
	"fromRecord\x129\n" +
	"\tto_record\x18\v \x01(\v2\x1c.smartcore.bos.HistoryRecordR\btoRecordB\b\n" +
	"\x06source\"f\n" +
	"\x1aCreateHistoryRecordRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x124\n" +
	"\x06record\x18\x02 \x01(\v2\x1c.smartcore.bos.HistoryRecordR\x06record\"\xc0\x01\n" +
	"\x19ListHistoryRecordsRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12\x19\n" +
	"\border_by\x18\x05 \x01(\tR\aorderBy\x128\n" +
	"\x05query\x18\x04 \x01(\v2\".smartcore.bos.HistoryRecord.QueryR\x05query\"\x9b\x01\n" +
	"\x1aListHistoryRecordsResponse\x126\n" +
	"\arecords\x18\x01 \x03(\v2\x1c.smartcore.bos.HistoryRecordR\arecords\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize\"\x9e\x01\n" +
	"\x14AirTemperatureRecord\x12I\n" +
	"\x0fair_temperature\x18\x01 \x01(\v2 .smartcore.traits.AirTemperatureR\x0eairTemperature\x12;\n" +
	"\vrecord_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordTime\"\xfc\x01\n" +
	" ListAirTemperatureHistoryRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x124\n" +
	"\x06period\x18\x02 \x01(\v2\x1c.smartcore.types.time.PeriodR\x06period\x127\n" +
	"\tread_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x12\x19\n" +
	"\border_by\x18\x06 \x01(\tR\aorderBy\"\xc7\x01\n" +
	"!ListAirTemperatureHistoryResponse\x12[\n" +
	"\x17air_temperature_records\x18\x01 \x03(\v2#.smartcore.bos.AirTemperatureRecordR\x15airTemperatureRecords\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize\"\x93\x01\n" +
	"\x12MeterReadingRecord\x12@\n" +
	"\rmeter_reading\x18\x01 \x01(\v2\x1b.smartcore.bos.MeterReadingR\fmeterReading\x12;\n" +
	"\vrecord_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordTime\"\xfa\x01\n" +
	"\x1eListMeterReadingHistoryRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x124\n" +
	"\x06period\x18\x02 \x01(\v2\x1c.smartcore.types.time.PeriodR\x06period\x127\n" +
	"\tread_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x12\x19\n" +
	"\border_by\x18\x06 \x01(\tR\aorderBy\"\xbf\x01\n" +
	"\x1fListMeterReadingHistoryResponse\x12U\n" +
	"\x15meter_reading_records\x18\x01 \x03(\v2!.smartcore.bos.MeterReadingRecordR\x13meterReadingRecords\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize\"\x9e\x01\n" +
	"\x14ElectricDemandRecord\x12I\n" +
	"\x0felectric_demand\x18\x01 \x01(\v2 .smartcore.traits.ElectricDemandR\x0eelectricDemand\x12;\n" +
	"\vrecord_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordTime\"\xfc\x01\n" +
	" ListElectricDemandHistoryRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x124\n" +
	"\x06period\x18\x02 \x01(\v2\x1c.smartcore.types.time.PeriodR\x06period\x127\n" +
	"\tread_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x12\x19\n" +
	"\border_by\x18\x06 \x01(\tR\aorderBy\"\xc7\x01\n" +
	"!ListElectricDemandHistoryResponse\x12[\n" +
	"\x17electric_demand_records\x18\x01 \x03(\v2#.smartcore.bos.ElectricDemandRecordR\x15electricDemandRecords\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize\"\x89\x01\n" +
	"\x0fOccupancyRecord\x129\n" +
	"\toccupancy\x18\x01 \x01(\v2\x1b.smartcore.traits.OccupancyR\toccupancy\x12;\n" +
	"\vrecord_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordTime\"\xf7\x01\n" +
	"\x1bListOccupancyHistoryRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x124\n" +
	"\x06period\x18\x02 \x01(\v2\x1c.smartcore.types.time.PeriodR\x06period\x127\n" +
	"\tread_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x12\x19\n" +
	"\border_by\x18\x06 \x01(\tR\aorderBy\"\xb2\x01\n" +
	"\x1cListOccupancyHistoryResponse\x12K\n" +
	"\x11occupancy_records\x18\x01 \x03(\v2\x1e.smartcore.bos.OccupancyRecordR\x10occupancyRecords\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize\"\x8e\x01\n" +
	"\x10AirQualityRecord\x12=\n" +
	"\vair_quality\x18\x01 \x01(\v2\x1c.smartcore.traits.AirQualityR\n" +
	"airQuality\x12;\n" +
	"\vrecord_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordTime\"\xf8\x01\n" +
	"\x1cListAirQualityHistoryRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x124\n" +
	"\x06period\x18\x02 \x01(\v2\x1c.smartcore.types.time.PeriodR\x06period\x127\n" +
	"\tread_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x12\x19\n" +
	"\border_by\x18\x06 \x01(\tR\aorderBy\"\xb7\x01\n" +
	"\x1dListAirQualityHistoryResponse\x12O\n" +
	"\x13air_quality_records\x18\x01 \x03(\v2\x1f.smartcore.bos.AirQualityRecordR\x11airQualityRecords\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize\"\x8b\x01\n" +
	"\x10SoundLevelRecord\x12:\n" +
	"\vsound_level\x18\x01 \x01(\v2\x19.smartcore.bos.SoundLevelR\n" +
	"soundLevel\x12;\n" +
	"\vrecord_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordTime\"\xf8\x01\n" +
	"\x1cListSoundLevelHistoryRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x124\n" +
	"\x06period\x18\x02 \x01(\v2\x1c.smartcore.types.time.PeriodR\x06period\x127\n" +
	"\tread_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x12\x19\n" +
	"\border_by\x18\x06 \x01(\tR\aorderBy\"\xb7\x01\n" +
	"\x1dListSoundLevelHistoryResponse\x12O\n" +
	"\x13sound_level_records\x18\x01 \x03(\v2\x1f.smartcore.bos.SoundLevelRecordR\x11soundLevelRecords\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize\"\xa3\x01\n" +
	"\x15EnterLeaveEventRecord\x12M\n" +
	"\x11enter_leave_event\x18\x01 \x01(\v2!.smartcore.traits.EnterLeaveEventR\x0fenterLeaveEvent\x12;\n" +
	"\vrecord_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordTime\"\xf8\x01\n" +
	"\x1cListEnterLeaveHistoryRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x124\n" +
	"\x06period\x18\x02 \x01(\v2\x1c.smartcore.types.time.PeriodR\x06period\x127\n" +
	"\tread_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x12\x19\n" +
	"\border_by\x18\x06 \x01(\tR\aorderBy\"\xbc\x01\n" +
	"\x1dListEnterLeaveHistoryResponse\x12T\n" +
	"\x13enter_leave_records\x18\x01 \x03(\v2$.smartcore.bos.EnterLeaveEventRecordR\x11enterLeaveRecords\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05R\ttotalSize2\xdc\x01\n" +
	"\x0fHistoryAdminApi\x12^\n" +
	"\x13CreateHistoryRecord\x12).smartcore.bos.CreateHistoryRecordRequest\x1a\x1c.smartcore.bos.HistoryRecord\x12i\n" +
	"\x12ListHistoryRecords\x12(.smartcore.bos.ListHistoryRecordsRequest\x1a).smartcore.bos.ListHistoryRecordsResponse2\x97\x01\n" +
	"\x15AirTemperatureHistory\x12~\n" +
	"\x19ListAirTemperatureHistory\x12/.smartcore.bos.ListAirTemperatureHistoryRequest\x1a0.smartcore.bos.ListAirTemperatureHistoryResponse2\x88\x01\n" +
	"\fMeterHistory\x12x\n" +
	"\x17ListMeterReadingHistory\x12-.smartcore.bos.ListMeterReadingHistoryRequest\x1a..smartcore.bos.ListMeterReadingHistoryResponse2\x91\x01\n" +
	"\x0fElectricHistory\x12~\n" +
	"\x19ListElectricDemandHistory\x12/.smartcore.bos.ListElectricDemandHistoryRequest\x1a0.smartcore.bos.ListElectricDemandHistoryResponse2\x89\x01\n" +
	"\x16OccupancySensorHistory\x12o\n" +
	"\x14ListOccupancyHistory\x12*.smartcore.bos.ListOccupancyHistoryRequest\x1a+.smartcore.bos.ListOccupancyHistoryResponse2\x8d\x01\n" +
	"\x17AirQualitySensorHistory\x12r\n" +
	"\x15ListAirQualityHistory\x12+.smartcore.bos.ListAirQualityHistoryRequest\x1a,.smartcore.bos.ListAirQualityHistoryResponse2\x8a\x01\n" +
	"\x12SoundSensorHistory\x12t\n" +
	"\x15ListSoundLevelHistory\x12+.smartcore.bos.ListSoundLevelHistoryRequest\x1a,.smartcore.bos.ListSoundLevelHistoryResponse\"\x002\x8f\x01\n" +
	"\x11EnterLeaveHistory\x12z\n" +
	"\x1bListEnterLeaveSensorHistory\x12+.smartcore.bos.ListEnterLeaveHistoryRequest\x1a,.smartcore.bos.ListEnterLeaveHistoryResponse\"\x00B%Z#github.com/vanti-dev/sc-bos/pkg/genb\x06proto3"

var (
	file_history_proto_rawDescOnce sync.Once
	file_history_proto_rawDescData []byte
)

func file_history_proto_rawDescGZIP() []byte {
	file_history_proto_rawDescOnce.Do(func() {
		file_history_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_history_proto_rawDesc), len(file_history_proto_rawDesc)))
	})
	return file_history_proto_rawDescData
}

var file_history_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_history_proto_goTypes = []any{
	(*HistoryRecord)(nil),                     // 0: smartcore.bos.HistoryRecord
	(*CreateHistoryRecordRequest)(nil),        // 1: smartcore.bos.CreateHistoryRecordRequest
	(*ListHistoryRecordsRequest)(nil),         // 2: smartcore.bos.ListHistoryRecordsRequest
	(*ListHistoryRecordsResponse)(nil),        // 3: smartcore.bos.ListHistoryRecordsResponse
	(*AirTemperatureRecord)(nil),              // 4: smartcore.bos.AirTemperatureRecord
	(*ListAirTemperatureHistoryRequest)(nil),  // 5: smartcore.bos.ListAirTemperatureHistoryRequest
	(*ListAirTemperatureHistoryResponse)(nil), // 6: smartcore.bos.ListAirTemperatureHistoryResponse
	(*MeterReadingRecord)(nil),                // 7: smartcore.bos.MeterReadingRecord
	(*ListMeterReadingHistoryRequest)(nil),    // 8: smartcore.bos.ListMeterReadingHistoryRequest
	(*ListMeterReadingHistoryResponse)(nil),   // 9: smartcore.bos.ListMeterReadingHistoryResponse
	(*ElectricDemandRecord)(nil),              // 10: smartcore.bos.ElectricDemandRecord
	(*ListElectricDemandHistoryRequest)(nil),  // 11: smartcore.bos.ListElectricDemandHistoryRequest
	(*ListElectricDemandHistoryResponse)(nil), // 12: smartcore.bos.ListElectricDemandHistoryResponse
	(*OccupancyRecord)(nil),                   // 13: smartcore.bos.OccupancyRecord
	(*ListOccupancyHistoryRequest)(nil),       // 14: smartcore.bos.ListOccupancyHistoryRequest
	(*ListOccupancyHistoryResponse)(nil),      // 15: smartcore.bos.ListOccupancyHistoryResponse
	(*AirQualityRecord)(nil),                  // 16: smartcore.bos.AirQualityRecord
	(*ListAirQualityHistoryRequest)(nil),      // 17: smartcore.bos.ListAirQualityHistoryRequest
	(*ListAirQualityHistoryResponse)(nil),     // 18: smartcore.bos.ListAirQualityHistoryResponse
	(*SoundLevelRecord)(nil),                  // 19: smartcore.bos.SoundLevelRecord
	(*ListSoundLevelHistoryRequest)(nil),      // 20: smartcore.bos.ListSoundLevelHistoryRequest
	(*ListSoundLevelHistoryResponse)(nil),     // 21: smartcore.bos.ListSoundLevelHistoryResponse
	(*EnterLeaveEventRecord)(nil),             // 22: smartcore.bos.EnterLeaveEventRecord
	(*ListEnterLeaveHistoryRequest)(nil),      // 23: smartcore.bos.ListEnterLeaveHistoryRequest
	(*ListEnterLeaveHistoryResponse)(nil),     // 24: smartcore.bos.ListEnterLeaveHistoryResponse
	(*HistoryRecord_Query)(nil),               // 25: smartcore.bos.HistoryRecord.Query
	(*timestamppb.Timestamp)(nil),             // 26: google.protobuf.Timestamp
	(*traits.AirTemperature)(nil),             // 27: smartcore.traits.AirTemperature
	(*time.Period)(nil),                       // 28: smartcore.types.time.Period
	(*fieldmaskpb.FieldMask)(nil),             // 29: google.protobuf.FieldMask
	(*MeterReading)(nil),                      // 30: smartcore.bos.MeterReading
	(*traits.ElectricDemand)(nil),             // 31: smartcore.traits.ElectricDemand
	(*traits.Occupancy)(nil),                  // 32: smartcore.traits.Occupancy
	(*traits.AirQuality)(nil),                 // 33: smartcore.traits.AirQuality
	(*SoundLevel)(nil),                        // 34: smartcore.bos.SoundLevel
	(*traits.EnterLeaveEvent)(nil),            // 35: smartcore.traits.EnterLeaveEvent
}
var file_history_proto_depIdxs = []int32{
	26, // 0: smartcore.bos.HistoryRecord.create_time:type_name -> google.protobuf.Timestamp
	0,  // 1: smartcore.bos.CreateHistoryRecordRequest.record:type_name -> smartcore.bos.HistoryRecord
	25, // 2: smartcore.bos.ListHistoryRecordsRequest.query:type_name -> smartcore.bos.HistoryRecord.Query
	0,  // 3: smartcore.bos.ListHistoryRecordsResponse.records:type_name -> smartcore.bos.HistoryRecord
	27, // 4: smartcore.bos.AirTemperatureRecord.air_temperature:type_name -> smartcore.traits.AirTemperature
	26, // 5: smartcore.bos.AirTemperatureRecord.record_time:type_name -> google.protobuf.Timestamp
	28, // 6: smartcore.bos.ListAirTemperatureHistoryRequest.period:type_name -> smartcore.types.time.Period
	29, // 7: smartcore.bos.ListAirTemperatureHistoryRequest.read_mask:type_name -> google.protobuf.FieldMask
	4,  // 8: smartcore.bos.ListAirTemperatureHistoryResponse.air_temperature_records:type_name -> smartcore.bos.AirTemperatureRecord
	30, // 9: smartcore.bos.MeterReadingRecord.meter_reading:type_name -> smartcore.bos.MeterReading
	26, // 10: smartcore.bos.MeterReadingRecord.record_time:type_name -> google.protobuf.Timestamp
	28, // 11: smartcore.bos.ListMeterReadingHistoryRequest.period:type_name -> smartcore.types.time.Period
	29, // 12: smartcore.bos.ListMeterReadingHistoryRequest.read_mask:type_name -> google.protobuf.FieldMask
	7,  // 13: smartcore.bos.ListMeterReadingHistoryResponse.meter_reading_records:type_name -> smartcore.bos.MeterReadingRecord
	31, // 14: smartcore.bos.ElectricDemandRecord.electric_demand:type_name -> smartcore.traits.ElectricDemand
	26, // 15: smartcore.bos.ElectricDemandRecord.record_time:type_name -> google.protobuf.Timestamp
	28, // 16: smartcore.bos.ListElectricDemandHistoryRequest.period:type_name -> smartcore.types.time.Period
	29, // 17: smartcore.bos.ListElectricDemandHistoryRequest.read_mask:type_name -> google.protobuf.FieldMask
	10, // 18: smartcore.bos.ListElectricDemandHistoryResponse.electric_demand_records:type_name -> smartcore.bos.ElectricDemandRecord
	32, // 19: smartcore.bos.OccupancyRecord.occupancy:type_name -> smartcore.traits.Occupancy
	26, // 20: smartcore.bos.OccupancyRecord.record_time:type_name -> google.protobuf.Timestamp
	28, // 21: smartcore.bos.ListOccupancyHistoryRequest.period:type_name -> smartcore.types.time.Period
	29, // 22: smartcore.bos.ListOccupancyHistoryRequest.read_mask:type_name -> google.protobuf.FieldMask
	13, // 23: smartcore.bos.ListOccupancyHistoryResponse.occupancy_records:type_name -> smartcore.bos.OccupancyRecord
	33, // 24: smartcore.bos.AirQualityRecord.air_quality:type_name -> smartcore.traits.AirQuality
	26, // 25: smartcore.bos.AirQualityRecord.record_time:type_name -> google.protobuf.Timestamp
	28, // 26: smartcore.bos.ListAirQualityHistoryRequest.period:type_name -> smartcore.types.time.Period
	29, // 27: smartcore.bos.ListAirQualityHistoryRequest.read_mask:type_name -> google.protobuf.FieldMask
	16, // 28: smartcore.bos.ListAirQualityHistoryResponse.air_quality_records:type_name -> smartcore.bos.AirQualityRecord
	34, // 29: smartcore.bos.SoundLevelRecord.sound_level:type_name -> smartcore.bos.SoundLevel
	26, // 30: smartcore.bos.SoundLevelRecord.record_time:type_name -> google.protobuf.Timestamp
	28, // 31: smartcore.bos.ListSoundLevelHistoryRequest.period:type_name -> smartcore.types.time.Period
	29, // 32: smartcore.bos.ListSoundLevelHistoryRequest.read_mask:type_name -> google.protobuf.FieldMask
	19, // 33: smartcore.bos.ListSoundLevelHistoryResponse.sound_level_records:type_name -> smartcore.bos.SoundLevelRecord
	35, // 34: smartcore.bos.EnterLeaveEventRecord.enter_leave_event:type_name -> smartcore.traits.EnterLeaveEvent
	26, // 35: smartcore.bos.EnterLeaveEventRecord.record_time:type_name -> google.protobuf.Timestamp
	28, // 36: smartcore.bos.ListEnterLeaveHistoryRequest.period:type_name -> smartcore.types.time.Period
	29, // 37: smartcore.bos.ListEnterLeaveHistoryRequest.read_mask:type_name -> google.protobuf.FieldMask
	22, // 38: smartcore.bos.ListEnterLeaveHistoryResponse.enter_leave_records:type_name -> smartcore.bos.EnterLeaveEventRecord
	0,  // 39: smartcore.bos.HistoryRecord.Query.from_record:type_name -> smartcore.bos.HistoryRecord
	0,  // 40: smartcore.bos.HistoryRecord.Query.to_record:type_name -> smartcore.bos.HistoryRecord
	1,  // 41: smartcore.bos.HistoryAdminApi.CreateHistoryRecord:input_type -> smartcore.bos.CreateHistoryRecordRequest
	2,  // 42: smartcore.bos.HistoryAdminApi.ListHistoryRecords:input_type -> smartcore.bos.ListHistoryRecordsRequest
	5,  // 43: smartcore.bos.AirTemperatureHistory.ListAirTemperatureHistory:input_type -> smartcore.bos.ListAirTemperatureHistoryRequest
	8,  // 44: smartcore.bos.MeterHistory.ListMeterReadingHistory:input_type -> smartcore.bos.ListMeterReadingHistoryRequest
	11, // 45: smartcore.bos.ElectricHistory.ListElectricDemandHistory:input_type -> smartcore.bos.ListElectricDemandHistoryRequest
	14, // 46: smartcore.bos.OccupancySensorHistory.ListOccupancyHistory:input_type -> smartcore.bos.ListOccupancyHistoryRequest
	17, // 47: smartcore.bos.AirQualitySensorHistory.ListAirQualityHistory:input_type -> smartcore.bos.ListAirQualityHistoryRequest
	20, // 48: smartcore.bos.SoundSensorHistory.ListSoundLevelHistory:input_type -> smartcore.bos.ListSoundLevelHistoryRequest
	23, // 49: smartcore.bos.EnterLeaveHistory.ListEnterLeaveSensorHistory:input_type -> smartcore.bos.ListEnterLeaveHistoryRequest
	0,  // 50: smartcore.bos.HistoryAdminApi.CreateHistoryRecord:output_type -> smartcore.bos.HistoryRecord
	3,  // 51: smartcore.bos.HistoryAdminApi.ListHistoryRecords:output_type -> smartcore.bos.ListHistoryRecordsResponse
	6,  // 52: smartcore.bos.AirTemperatureHistory.ListAirTemperatureHistory:output_type -> smartcore.bos.ListAirTemperatureHistoryResponse
	9,  // 53: smartcore.bos.MeterHistory.ListMeterReadingHistory:output_type -> smartcore.bos.ListMeterReadingHistoryResponse
	12, // 54: smartcore.bos.ElectricHistory.ListElectricDemandHistory:output_type -> smartcore.bos.ListElectricDemandHistoryResponse
	15, // 55: smartcore.bos.OccupancySensorHistory.ListOccupancyHistory:output_type -> smartcore.bos.ListOccupancyHistoryResponse
	18, // 56: smartcore.bos.AirQualitySensorHistory.ListAirQualityHistory:output_type -> smartcore.bos.ListAirQualityHistoryResponse
	21, // 57: smartcore.bos.SoundSensorHistory.ListSoundLevelHistory:output_type -> smartcore.bos.ListSoundLevelHistoryResponse
	24, // 58: smartcore.bos.EnterLeaveHistory.ListEnterLeaveSensorHistory:output_type -> smartcore.bos.ListEnterLeaveHistoryResponse
	50, // [50:59] is the sub-list for method output_type
	41, // [41:50] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_history_proto_init() }
func file_history_proto_init() {
	if File_history_proto != nil {
		return
	}
	file_meter_proto_init()
	file_sound_sensor_proto_init()
	file_history_proto_msgTypes[25].OneofWrappers = []any{
		(*HistoryRecord_Query_SourceEqual)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_history_proto_rawDesc), len(file_history_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_history_proto_goTypes,
		DependencyIndexes: file_history_proto_depIdxs,
		MessageInfos:      file_history_proto_msgTypes,
	}.Build()
	File_history_proto = out.File
	file_history_proto_goTypes = nil
	file_history_proto_depIdxs = nil
}
