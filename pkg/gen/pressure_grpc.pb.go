// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pressure.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PressureApi_GetPressure_FullMethodName    = "/smartcore.bos.PressureApi/GetPressure"
	PressureApi_PullPressure_FullMethodName   = "/smartcore.bos.PressureApi/PullPressure"
	PressureApi_UpdatePressure_FullMethodName = "/smartcore.bos.PressureApi/UpdatePressure"
)

// PressureApiClient is the client API for PressureApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Pressure trait is applicable to devices that measure or control pressure in a system.
// This includes devices such as pressure sensors, pressure regulators, and other
// similar control mechanisms used in various industrial and commercial applications.
type PressureApiClient interface {
	GetPressure(ctx context.Context, in *GetPressureRequest, opts ...grpc.CallOption) (*Pressure, error)
	PullPressure(ctx context.Context, in *PullPressureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullPressureResponse], error)
	UpdatePressure(ctx context.Context, in *UpdatePressureRequest, opts ...grpc.CallOption) (*Pressure, error)
}

type pressureApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPressureApiClient(cc grpc.ClientConnInterface) PressureApiClient {
	return &pressureApiClient{cc}
}

func (c *pressureApiClient) GetPressure(ctx context.Context, in *GetPressureRequest, opts ...grpc.CallOption) (*Pressure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pressure)
	err := c.cc.Invoke(ctx, PressureApi_GetPressure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pressureApiClient) PullPressure(ctx context.Context, in *PullPressureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullPressureResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PressureApi_ServiceDesc.Streams[0], PressureApi_PullPressure_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullPressureRequest, PullPressureResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PressureApi_PullPressureClient = grpc.ServerStreamingClient[PullPressureResponse]

func (c *pressureApiClient) UpdatePressure(ctx context.Context, in *UpdatePressureRequest, opts ...grpc.CallOption) (*Pressure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pressure)
	err := c.cc.Invoke(ctx, PressureApi_UpdatePressure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PressureApiServer is the server API for PressureApi service.
// All implementations must embed UnimplementedPressureApiServer
// for forward compatibility.
//
// Pressure trait is applicable to devices that measure or control pressure in a system.
// This includes devices such as pressure sensors, pressure regulators, and other
// similar control mechanisms used in various industrial and commercial applications.
type PressureApiServer interface {
	GetPressure(context.Context, *GetPressureRequest) (*Pressure, error)
	PullPressure(*PullPressureRequest, grpc.ServerStreamingServer[PullPressureResponse]) error
	UpdatePressure(context.Context, *UpdatePressureRequest) (*Pressure, error)
	mustEmbedUnimplementedPressureApiServer()
}

// UnimplementedPressureApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPressureApiServer struct{}

func (UnimplementedPressureApiServer) GetPressure(context.Context, *GetPressureRequest) (*Pressure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPressure not implemented")
}
func (UnimplementedPressureApiServer) PullPressure(*PullPressureRequest, grpc.ServerStreamingServer[PullPressureResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullPressure not implemented")
}
func (UnimplementedPressureApiServer) UpdatePressure(context.Context, *UpdatePressureRequest) (*Pressure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePressure not implemented")
}
func (UnimplementedPressureApiServer) mustEmbedUnimplementedPressureApiServer() {}
func (UnimplementedPressureApiServer) testEmbeddedByValue()                     {}

// UnsafePressureApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PressureApiServer will
// result in compilation errors.
type UnsafePressureApiServer interface {
	mustEmbedUnimplementedPressureApiServer()
}

func RegisterPressureApiServer(s grpc.ServiceRegistrar, srv PressureApiServer) {
	// If the following call pancis, it indicates UnimplementedPressureApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PressureApi_ServiceDesc, srv)
}

func _PressureApi_GetPressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPressureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PressureApiServer).GetPressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PressureApi_GetPressure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PressureApiServer).GetPressure(ctx, req.(*GetPressureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PressureApi_PullPressure_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullPressureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PressureApiServer).PullPressure(m, &grpc.GenericServerStream[PullPressureRequest, PullPressureResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PressureApi_PullPressureServer = grpc.ServerStreamingServer[PullPressureResponse]

func _PressureApi_UpdatePressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePressureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PressureApiServer).UpdatePressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PressureApi_UpdatePressure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PressureApiServer).UpdatePressure(ctx, req.(*UpdatePressureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PressureApi_ServiceDesc is the grpc.ServiceDesc for PressureApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PressureApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.PressureApi",
	HandlerType: (*PressureApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPressure",
			Handler:    _PressureApi_GetPressure_Handler,
		},
		{
			MethodName: "UpdatePressure",
			Handler:    _PressureApi_UpdatePressure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullPressure",
			Handler:       _PressureApi_PullPressure_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pressure.proto",
}

const (
	PressureInfo_DescribePressure_FullMethodName = "/smartcore.bos.PressureInfo/DescribePressure"
)

// PressureInfoClient is the client API for PressureInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PressureInfoClient interface {
	DescribePressure(ctx context.Context, in *DescribePressureRequest, opts ...grpc.CallOption) (*PressureSupport, error)
}

type pressureInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewPressureInfoClient(cc grpc.ClientConnInterface) PressureInfoClient {
	return &pressureInfoClient{cc}
}

func (c *pressureInfoClient) DescribePressure(ctx context.Context, in *DescribePressureRequest, opts ...grpc.CallOption) (*PressureSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PressureSupport)
	err := c.cc.Invoke(ctx, PressureInfo_DescribePressure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PressureInfoServer is the server API for PressureInfo service.
// All implementations must embed UnimplementedPressureInfoServer
// for forward compatibility.
type PressureInfoServer interface {
	DescribePressure(context.Context, *DescribePressureRequest) (*PressureSupport, error)
	mustEmbedUnimplementedPressureInfoServer()
}

// UnimplementedPressureInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPressureInfoServer struct{}

func (UnimplementedPressureInfoServer) DescribePressure(context.Context, *DescribePressureRequest) (*PressureSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePressure not implemented")
}
func (UnimplementedPressureInfoServer) mustEmbedUnimplementedPressureInfoServer() {}
func (UnimplementedPressureInfoServer) testEmbeddedByValue()                      {}

// UnsafePressureInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PressureInfoServer will
// result in compilation errors.
type UnsafePressureInfoServer interface {
	mustEmbedUnimplementedPressureInfoServer()
}

func RegisterPressureInfoServer(s grpc.ServiceRegistrar, srv PressureInfoServer) {
	// If the following call pancis, it indicates UnimplementedPressureInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PressureInfo_ServiceDesc, srv)
}

func _PressureInfo_DescribePressure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePressureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PressureInfoServer).DescribePressure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PressureInfo_DescribePressure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PressureInfoServer).DescribePressure(ctx, req.(*DescribePressureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PressureInfo_ServiceDesc is the grpc.ServiceDesc for PressureInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PressureInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.PressureInfo",
	HandlerType: (*PressureInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribePressure",
			Handler:    _PressureInfo_DescribePressure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pressure.proto",
}
