// Code generated by protoc-gen-wrapper. DO NOT EDIT.

package gen

import (
	wrap "github.com/smart-core-os/sc-golang/pkg/wrap"
	grpc "google.golang.org/grpc"
)

// WrapFluidFlowInfo	adapts a FluidFlowInfoServer	and presents it as a FluidFlowInfoClient
func WrapFluidFlowInfo(server FluidFlowInfoServer) *FluidFlowInfoWrapper {
	conn := wrap.ServerToClient(FluidFlowInfo_ServiceDesc, server)
	client := NewFluidFlowInfoClient(conn)
	return &FluidFlowInfoWrapper{
		FluidFlowInfoClient: client,
		server:              server,
		conn:                conn,
		desc:                FluidFlowInfo_ServiceDesc,
	}
}

type FluidFlowInfoWrapper struct {
	FluidFlowInfoClient

	server FluidFlowInfoServer
	conn   grpc.ClientConnInterface
	desc   grpc.ServiceDesc
}

// UnwrapServer returns the underlying server instance.
func (w *FluidFlowInfoWrapper) UnwrapServer() FluidFlowInfoServer {
	return w.server
}

// Unwrap implements wrap.Unwrapper and returns the underlying server instance as an unknown type.
func (w *FluidFlowInfoWrapper) Unwrap() any {
	return w.UnwrapServer()
}

func (w *FluidFlowInfoWrapper) UnwrapService() (grpc.ClientConnInterface, grpc.ServiceDesc) {
	return w.conn, w.desc
}
