// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: priority.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PriorityApiClient is the client API for PriorityApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriorityApiClient interface {
	// Clear a single priority value, unsetting it in the priority list entries.
	ClearPriorityEntry(ctx context.Context, in *ClearPriorityValueRequest, opts ...grpc.CallOption) (*ClearPriorityValueResponse, error)
}

type priorityApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPriorityApiClient(cc grpc.ClientConnInterface) PriorityApiClient {
	return &priorityApiClient{cc}
}

func (c *priorityApiClient) ClearPriorityEntry(ctx context.Context, in *ClearPriorityValueRequest, opts ...grpc.CallOption) (*ClearPriorityValueResponse, error) {
	out := new(ClearPriorityValueResponse)
	err := c.cc.Invoke(ctx, "/smartcore.bos.PriorityApi/ClearPriorityEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriorityApiServer is the server API for PriorityApi service.
// All implementations must embed UnimplementedPriorityApiServer
// for forward compatibility
type PriorityApiServer interface {
	// Clear a single priority value, unsetting it in the priority list entries.
	ClearPriorityEntry(context.Context, *ClearPriorityValueRequest) (*ClearPriorityValueResponse, error)
	mustEmbedUnimplementedPriorityApiServer()
}

// UnimplementedPriorityApiServer must be embedded to have forward compatible implementations.
type UnimplementedPriorityApiServer struct {
}

func (UnimplementedPriorityApiServer) ClearPriorityEntry(context.Context, *ClearPriorityValueRequest) (*ClearPriorityValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearPriorityEntry not implemented")
}
func (UnimplementedPriorityApiServer) mustEmbedUnimplementedPriorityApiServer() {}

// UnsafePriorityApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriorityApiServer will
// result in compilation errors.
type UnsafePriorityApiServer interface {
	mustEmbedUnimplementedPriorityApiServer()
}

func RegisterPriorityApiServer(s grpc.ServiceRegistrar, srv PriorityApiServer) {
	s.RegisterService(&PriorityApi_ServiceDesc, srv)
}

func _PriorityApi_ClearPriorityEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearPriorityValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriorityApiServer).ClearPriorityEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.bos.PriorityApi/ClearPriorityEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriorityApiServer).ClearPriorityEntry(ctx, req.(*ClearPriorityValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PriorityApi_ServiceDesc is the grpc.ServiceDesc for PriorityApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriorityApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.bos.PriorityApi",
	HandlerType: (*PriorityApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearPriorityEntry",
			Handler:    _PriorityApi_ClearPriorityEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "priority.proto",
}
