package config

import (
	"encoding/json"

	"github.com/vanti-dev/sc-bos/internal/auth/keycloak"
	"github.com/vanti-dev/sc-bos/pkg/system"
	"github.com/vanti-dev/sc-bos/pkg/util/jsontypes"
)

type Root struct {
	system.Config
	// User configures user credential and access token validation for applications acting on behalf of a user.
	// This includes the ability to login using a username and password through OIDC authentication servers like KeyCloak.
	User *User `json:"user,omitempty"`
	// System configures credential and access token validation for applications acting on their own behalf.
	// This includes OAuth2 Client Credentials key exchange and validation backed by different key stores.
	System *System `json:"system,omitempty"`
}

type User struct {
	// Validity defaults to 24 hours and specifies how long access tokens generated by user key exchange are valid for.
	Validity *jsontypes.Duration `json:"validity,omitempty"`

	// FileAccounts enumerates a list of identities that incoming credentials are validated against.
	FileAccounts *Identities `json:"fileAccounts,omitempty"`
	// If true, when the system starts, all accounts from FileAccounts that do not already exist in the local accounts database will be imported.
	// Login will only use the local accounts database, as all accounts will be in there.
	ImportFileAccounts bool `json:"importFileAccounts,omitempty"`
	// Enable user login using user accounts stored in the local database.
	LocalAccounts bool `json:"localAccounts,omitempty"`
	// Keycloak configures access token validation against a KeyCloak server using OIDC.
	Keycloak *keycloak.Config `json:"keycloakAccounts,omitempty"`
}

type System struct {
	// Validity defaults to 15 minutes and specifies how long access tokens generated by client credentials key exchange are valid for.
	Validity *jsontypes.Duration `json:"validity,omitempty"`

	// FileAccounts, when non-nil, causes the system to validate system tokens using a local
	// file of identities and secrets.
	// See Identities for how this field can be represented/configured in JSON.
	FileAccounts *Identities `json:"fileAccounts,omitempty"`
	// TenantAccounts causes the system to validate system tokens using the legacy tenants system.
	// All tokens are deemed invalid if the tenants system is not available.
	TenantAccounts bool `json:"tenantAccounts,omitempty"`
	// CohortAccounts causes the system to validate system tokens using the cohort manager, setup via enrollment.
	// All tokens are deemed invalid if the manager is not known (i.e. the controller is not enrolled), or the manager doesn't support TenantApi.
	CohortAccounts bool `json:"cohortAccounts,omitempty"`
	// Enable service accounts stored in the local database to authenticate using client credentials.
	LocalAccounts bool `json:"localAccounts,omitempty"`
}

type Keycloak struct {
	URL      string `json:"url,omitempty"`
	Realm    string `json:"realm,omitempty"`
	ClientID string `json:"clientID,omitempty"`
}

func ReadConfig(data []byte) (Root, error) {
	root := Default()
	err := json.Unmarshal(data, &root)
	return root, err
}

func Default() Root {
	return Root{}
}
