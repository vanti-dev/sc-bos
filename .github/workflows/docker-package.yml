name: Create and publish Docker image

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build and publish'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-docker:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      actions: read
      contents: read
      packages: write
    env:
      # Set the release version to the tag name if it's a tag event, otherwise use the tag name from the workflow_dispatch input
      TAG_NAME: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}

    steps:
      # Note: this checks out the latest commit, not the tag - the tag is used for the release version
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download the release assets so we can use them in our Docker image
      - name: Download release assets
        if: ${{ !env.ACT }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG_NAME: ${{ env.TAG_NAME }}
        run: |
          # construct the assets URL
          ASSETS_URL="https://api.github.com/repos/$REPO/releases/tags/$TAG_NAME"
          echo "Fetching assets from $ASSETS_URL"
          
          # Fetch the assets list and extract the URL and name for each asset
          ASSETS=$(curl -s -H "Authorization: token $GH_TOKEN" $ASSETS_URL | jq -r '.assets[] | {url: .url, name: .name}')
          
          echo "Found assets:"
          echo "$ASSETS" | jq -c '.'
          
          # Download each asset
          mkdir .downloads
          echo "$ASSETS" | jq -c '.' | while read -r asset; do
            asset_url=$(echo $asset | jq -r '.url')
            asset_name=$(echo $asset | jq -r '.name')
            echo "Downloading $asset_name from $asset_url"
            curl -L -o ".downloads/$asset_name" -H "Accept: application/octet-stream" -H "Authorization: token $GH_TOKEN" "$asset_url"
          done

      # If running locally using act, download the assets from the local filesystem
      - name: Get assets
        if: ${{ env.ACT }}
        uses: actions/download-artifact@v3
        with:
          path: .downloads

      - run: |
          mv .downloads/sc-bos/* .downloads/
          mv .downloads/ops-ui/* .downloads/
        if: ${{ env.ACT }}

      - name: Untar ops-ui
        run: |
          mkdir -p .build/ops-ui
          tar -xzf .downloads/ops-ui*.tar.gz -C .build/ops-ui

      # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        if: ${{ !env.ACT }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: vanti-bot
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Untar sc-bos (amd64)
        run: |
          mkdir -p .build/sc-bos
          tar -xzf .downloads/sc-bos_*_linux-amd64.tar.gz -C .build/sc-bos
      - name: Build and push Docker image (amd64)
        uses: docker/build-push-action@v5
        with:
          context: .
          # only push if not running locally using act
          push: ${{ !env.ACT }}
          tags: ghcr.io/vanti-dev/sc-bos:${{ env.TAG_NAME }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

      - name: Untar sc-bos (arm64)
        run: |
          rm -rf .build/sc-bos
          mkdir -p .build/sc-bos
          tar -xzf .downloads/sc-bos_*_linux-arm64.tar.gz -C .build/sc-bos
      - name: Build and push Docker image (amd64)
        uses: docker/build-push-action@v5
        with:
          context: .
          # only push if not running locally using act
          push: ${{ !env.ACT }}
          tags: ghcr.io/vanti-dev/sc-bos:${{ env.TAG_NAME }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64
